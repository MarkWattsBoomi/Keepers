!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}([function(e,t){e.exports=React},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowField=t.eContentType=void 0;var o,r=n(2),i=n(3);!function(e){e[e.unknown=0]="unknown",e[e.ContentString=1]="ContentString",e[e.ContentNumber=2]="ContentNumber",e[e.ContentObject=3]="ContentObject",e[e.ContentBoolean=4]="ContentBoolean",e[e.ContentList=5]="ContentList",e[e.ContentPassword=6]="ContentPassword",e[e.ContentContent=7]="ContentContent",e[e.ContentDateTime=8]="ContentDateTime",e[e.ContentEncrypted=9]="ContentEncrypted"}(o=t.eContentType||(t.eContentType={}));var a=function(){function e(e){if(this.ContentType=o.unknown,this.DeveloperName="",this.TypeElementDeveloperName="",this.TypeElementId="",this.TypeElementPropertyDeveloperName="",this.TypeElementPropertyId="",this.ValueElementId="",e)switch(this.ContentType=o[e.contentType],this.DeveloperName=e.developerName,this.TypeElementDeveloperName=e.typeElementDeveloperName,this.TypeElementId=e.typeElementId,this.TypeElementPropertyDeveloperName=e.typeElementPropertyDeveloperName,this.TypeElementPropertyId=e.typeElementPropertyId,this.ValueElementId=e.valueElementId,this.ContentType){case o.ContentObject:this.Value=e.objectData?new r.FlowObjectData(e.objectData):void 0;break;case o.ContentList:this.Value=e.objectData&&e.objectData[0]?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.Value=e.contentValue}}return Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementDeveloperName",{get:function(){return this.TypeElementDeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyDeveloperName",{get:function(){return this.TypeElementPropertyDeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valueElementId",{get:function(){return this.ValueElementId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},set:function(e){this.Value=e},enumerable:!1,configurable:!0}),e.prototype.iFlowField=function(){var e="",t=[];switch(this.ContentType){case o.ContentObject:var n=this.Value;t.push(n.iObjectData());break;case o.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value?this.Value:""}return{contentType:o[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementDeveloperName:this.TypeElementDeveloperName,typeElementId:this.TypeElementId,typeElementPropertyDeveloperName:this.TypeElementPropertyDeveloperName,typeElementPropertyId:this.TypeElementPropertyId,valueElementId:this.ValueElementId}},e}();t.FlowField=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectData=void 0;var o=n(8),r=function(){function e(e){if(this.DeveloperName="",this.ExternalId="",this.InternalId="",this.IsSelected=!1,this.Order=0,this.TypeElementId="",this.Properties={},e&&e[0]){var t=e[0];if(this.DeveloperName=t.developerName,this.InternalId=t.internalId,this.ExternalId=t.externalId,this.Order=t.order,this.IsSelected=t.isSelected,this.TypeElementId=t.typeElementId,t.properties&&t.properties.length>0)for(var n=0,r=t.properties;n<r.length;n++){var i=r[n];this.Properties[i.developerName]=new o.FlowObjectDataProperty(i)}}else console.log("null data")}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"externalId",{get:function(){return this.ExternalId},set:function(e){this.ExternalId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"internalId",{get:function(){return this.InternalId},set:function(e){this.InternalId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isSelected",{get:function(){return this.IsSelected},set:function(e){this.IsSelected=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},set:function(e){this.Order=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"properties",{get:function(){return this.Properties},enumerable:!1,configurable:!0}),e.newInstance=function(e){return new this([{developerName:e,externalId:"",internalId:manywho.utils.guid(),isSelected:!1,order:0,properties:[],typeElementId:""}])},e.prototype.addProperty=function(e){this.Properties[e.developerName]=e},e.prototype.removeProperty=function(e){delete this.Properties[e]},e.prototype.clone=function(t){var n=this,o=e.newInstance(t||this.DeveloperName);return Object.keys(this.properties).forEach((function(e){var t=n.properties[e].clone();o.properties[e]=t})),o},e.prototype.iObjectData=function(e){for(var t=[],n=0,o=Object.keys(this.properties);n<o.length;n++){var r=o[n];t.push(this.properties[r].iFlowObjectDataProperty())}return{developerName:this.developerName,externalId:this.externalId,internalId:this.internalId,isSelected:e||this.isSelected,order:this.order,properties:t,typeElementId:this.TypeElementId}},e.prototype.iFlowObjectDataArray=function(e){var t=[];return t.push(this.iObjectData(e)),t},e}();t.FlowObjectData=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectDataArray=t.eSortOrder=void 0;var o,r=n(1),i=n(2);!function(e){e[e.ascending=0]="ascending",e[e.descending=1]="descending"}(o=t.eSortOrder||(t.eSortOrder={}));var a=function(){function e(e){this.Items=[];for(var t=0,n=e||[];t<n.length;t++){var o=n[t];this.Items.push(new i.FlowObjectData([o]))}}return Object.defineProperty(e.prototype,"items",{get:function(){return this.Items},enumerable:!1,configurable:!0}),e.prototype.sort=function(e,t){return e===o.ascending?t?this.Items.sort((function(e,n){var o,i;switch(e.properties[t].contentType){case r.eContentType.ContentNumber:o=parseFloat(e.properties[t].value),i=parseFloat(n.properties[t].value);break;case r.eContentType.ContentDateTime:o=new Date(e.properties[t].value),i=new Date(n.properties[t].value);break;default:o=e.properties[t].value,i=n.properties[t].value}switch(!0){case o<i:return-1;case o>i:return 1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order})):t?this.Items.sort((function(e,n){if(!(e&&n&&e.properties&&n.properties&&e.properties[t]&&n.properties[t]&&e.properties[t].value&&n.properties[t].value))return 0;if(!e.properties[t])return 0;switch(!0){case e.properties[t].value<n.properties[t].value:return 1;case e.properties[t].value>n.properties[t].value:return-1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order}))},e.prototype.addItem=function(e){this.Items.push(e)},e.prototype.clearItems=function(){this.Items=[]},e.prototype.clone=function(){var t=new e;return this.items.forEach((function(e){t.addItem(e.clone())})),t},e.prototype.iFlowObjectDataArray=function(e){for(var t=[],n=0,o=this.Items;n<o.length;n++){var r=o[n];t.push(r.iObjectData(e))}return t},e.prototype.getItemWithPropertyName=function(e,t,n){for(var o=0,i=this.Items;o<i.length;o++){var a=i[o];if(a.properties[e]&&null!=a.properties[e].value){var s=a.properties[e].value,l=t;switch(a.properties[e].contentType){case r.eContentType.ContentString:s=s.toLowerCase(),l=l.toLowerCase();break;case r.eContentType.ContentNumber:s=s,l=parseFloat(l.toLowerCase());break;case r.eContentType.ContentBoolean:s=s,l="true"===new String(l).toLowerCase()}if(s===l)return a.properties[n]}}return null},e.prototype.getSelectedItems=function(){for(var t=new e,n=0,o=this.Items;n<o.length;n++){var r=o[n];!0===r.isSelected&&t.addItem(r)}return t},e.prototype.getItemWithPropertyValue=function(e,t){for(var n=0,o=this.Items;n<o.length;n++){var i=o[n];if(i.properties[e]&&null!=i.properties[e].value){var a=i.properties[e].value,s=t;switch(i.properties[e].contentType){case r.eContentType.ContentString:a=a.toLowerCase(),s=new String(s).toLowerCase();break;case r.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case r.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}if(a===s)return i}}},e.prototype.getIndexOfItemWithPropertyValue=function(e,t){for(var n=0;n<this.items.length;n++){var o=this.items[n];if(o.properties[e]&&null!=o.properties[e].value){var i=o.properties[e].value,a=t;switch(o.properties[e].contentType){case r.eContentType.ContentString:i=i.toLowerCase(),a=a.toLowerCase();break;case r.eContentType.ContentNumber:i=i,a=parseFloat(new String(a).toLowerCase());break;case r.eContentType.ContentBoolean:i=i,a="true"===new String(a).toLowerCase()}if(i===a)return n}}return-1},e.prototype.removeItemWithPropertyValue=function(e,t){for(var n=0,o=0;o<this.items.length;o++){var i=this.items[o];if(i.properties[e]&&null!=i.properties[e].value){var a=i.properties[e].value,s=t;switch(i.properties[e].contentType){case r.eContentType.ContentString:a=a.toLowerCase(),s=s.toLowerCase();break;case r.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case r.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}a===s&&(this.items.splice(o,1),n++)}}return n},e.prototype.removeItemAtIndex=function(e){var t=0;return this.items[e]&&(this.items.splice(e,1),t=e),t},e}();t.FlowObjectDataArray=a},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowBaseComponent=t.eLoadingState=void 0;var s=n(0);n(13);var l,c=n(5),u=n(7),d=n(1),p=n(2),h=n(3),f=n(9),y=n(14);!function(e){e[e.ready=0]="ready",e[e.loading=1]="loading",e[e.saving=2]="saving",e[e.moving=3]="moving",e[e.inititializing=4]="inititializing",e[e.inititialized=5]="inititialized",e[e.mounting=6]="mounting",e[e.mounted=7]="mounted"}(l=t.eLoadingState||(t.eLoadingState={}));var m=function(e){function t(t){var n=e.call(this,t)||this;n.Fields={},n.Attributes={},n.Outcomes={},n.sendCollaborationMessage=y(n._sendCollaborationMessage,100,null),n.Fields={},n.LoadingState=l.inititializing,n.loadAllValues=n.loadAllValues.bind(n),n.dontLoadAllValues=n.dontLoadAllValues.bind(n),n.updateValues=n.updateValues.bind(n),n.triggerOutcome=n.triggerOutcome.bind(n),n.ComponentId=n.props.id,n.ParentId=n.props.parentId,n.FlowKey=n.props.flowKey,n.Attributes={},n.loadModel=n.loadModel.bind(n),n.loadAttributes=n.loadAttributes.bind(n),n.loadOutcomes=n.loadOutcomes.bind(n),n.receiveMessage=n.receiveMessage.bind(n),n.getStateValue=n.getStateValue.bind(n),n.setStateValue=n.setStateValue.bind(n),n.getStateValueType=n.getStateValueType.bind(n),n.sendCollaborationMessage=n.sendCollaborationMessage.bind(n),n.onBeforeSend=n.onBeforeSend.bind(n),n.onDone=n.onDone.bind(n),n.calculateValue=n.calculateValue.bind(n),window.addEventListener("message",n.receiveMessage,!1),n.loadModel(),n.loadAttributes(),n.loadOutcomes();var o="";return!manywho.settings.global("platform.uri")&&manywho.settings.global("platform.uri").length<=0&&(o=window.location.origin||"https://flow.manywho.com"),n.StateId=manywho.utils.extractStateId(n.props.flowKey),n.TenantId=manywho.utils.extractTenantId(n.props.flowKey),n.invokeurl=o+"/api/run/1/state/"+n.StateId,n.url=o+"/api/run/1/state/"+n.StateId+"/values",n.userurl=o+"/api/run/1/state/"+n.StateId+"/values/03dc41dd-1c6b-4b33-bf61-cbd1d0778fff",n.valueurl=o+"/api/run/1/state/"+n.StateId+"/values/name",n.LoadingState=l.inititialized,n}return r(t,e),Object.defineProperty(t.prototype,"tenantId",{get:function(){return this.TenantId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stateId",{get:function(){return this.StateId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"flowKey",{get:function(){return this.FlowKey},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"componentId",{get:function(){return this.ComponentId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"parentId",{get:function(){return this.ParentId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isReady",{get:function(){return this.LoadingState===l.ready},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"loadingState",{get:function(){return this.LoadingState},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"outcomes",{get:function(){return this.Outcomes},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fields",{get:function(){return this.Fields},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"model",{get:function(){return this.Model},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"user",{get:function(){return this.User},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"joinURI",{get:function(){return window.location.href},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isDesignTime",{get:function(){return this.IsDesignTime},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"authenticationToken",{get:function(){return JSON.parse(sessionStorage.flowUser).authenticationToken},enumerable:!1,configurable:!0}),t.prototype.getAttribute=function(e,t){return this.attributes[e]?this.attributes[e].value:t||""},t.prototype.onBeforeSend=function(e,t){if(t){var n=this.getOutcomeById(t.mapElementInvokeRequest.selectedOutcomeId),o=manywho.eventManager.outcomeBeingTriggered;n&&(o&&o.id===n.id||(manywho.eventManager.outcomeBeingTriggered=n))}else manywho.eventManager.outcomeBeingTriggered=void 0},t.prototype.calculateValue=function(e){if(e.startsWith("{{")&&e.endsWith("}}")){for(var t=e.replace("{{",""),n=void 0,o="",r=(t=t.replace("}}","")).split("."),i=0;i<r.length;i++)if(0===i)(n=this.fields[r[i]])?n.ContentType!==d.eContentType.ContentObject&&n.ContentType!==d.eContentType.ContentList&&(o=n.value):(console.log("The Value ["+r[i]+"] was not found, have you included it in your flow"),o=e);else if(n){var a=n.value.properties[r[i]];a?a.contentType===d.eContentType.ContentObject||a.contentType===d.eContentType.ContentList?n=n.value.properties[r[i]].value:o=n.value.properties[r[i]].value:o=e}else o=e;return o}return e},t.prototype.onDone=function(e,t){return i(this,void 0,void 0,(function(){var t,n=this;return a(this,(function(o){return"FORWARD"===e.invokeType&&(manywho.model.parseEngineResponse(e,this.flowKey),this.loadModel(),this.loadAttributes(),this.loadOutcomes()),manywho.eventManager.outcomeBeingTriggered&&manywho.eventManager.outcomeBeingTriggered.attributes&&(t=manywho.eventManager.outcomeBeingTriggered,Object.keys(manywho.eventManager.outcomeBeingTriggered.attributes).forEach((function(e){return i(n,void 0,void 0,(function(){var n,o,r;return a(this,(function(i){switch(i.label){case 0:switch(n=manywho.eventManager.outcomeBeingTriggered.attributes[e],n.name.toLowerCase()){case"autoclose":return[3,1];case"autoopen":return[3,2];case"autonav":case"automove":return[3,6];case"autoprint":return[3,10]}return[3,11];case 1:return"true"===n.value.toLowerCase()&&window.close(),[3,11];case 2:return(o=t.attributes.AutoOpenUrl||void 0)&&o.value.length>0?[4,this.calculateValue(o.value)]:[3,4];case 3:return r=i.sent(),window.open(r,"_blank"),[3,5];case 4:alert("No 'AutoOpenUrl' specified in the outcome's attributes"),i.label=5;case 5:return[3,11];case 6:return(o=t.attributes.AutoNavUrl||void 0)&&o.value.length>0?[4,this.calculateValue(o.value)]:[3,8];case 7:return r=i.sent(),window.open(r,"_blank"),[3,9];case 8:alert("No 'AutoNavUrl' specified in the outcome's attributes"),i.label=9;case 9:return[3,11];case 10:return window.print(),[3,11];case 11:return[2]}}))}))}))),this.LoadingState=l.ready,manywho.eventManager.outcomeBeingTriggered=void 0,[2]}))}))},t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return this.LoadingState=l.mounting,manywho.eventManager.addDoneListener(this.onDone,this.componentId+"_core"),manywho.eventManager.addBeforeSendListener(this.onBeforeSend,this.componentId+"_core"),[4,this.preserveState()];case 1:return e.sent(),this.LoadingState=l.mounted,manywho.utils.removeLoadingIndicator("loader"),[2,Promise.resolve()]}}))}))},t.prototype.preserveState=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return this.LoadingState=l.mounting,[4,this.setStateValue(this.getStateValue())];case 1:return e.sent(),this.LoadingState=l.mounted,[2]}}))}))},t.prototype.componentWillUnmount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){return manywho.eventManager.removeBeforeSendListener(this.componentId+"_core"),manywho.eventManager.removeDoneListener(this.componentId+"_core"),[2,Promise.resolve()]}))}))},t.prototype.loadOutcome=function(e){if(e){var t=manywho.model.getOutcome(e,this.props.flowKey);if(t)return this.Outcomes[t.developerName]=new f.FlowOutcome(t),this.Outcomes[t.developerName]}},t.prototype.loadOutcomes=function(){this.Outcomes={};for(var e=manywho.model.getOutcomes(this.props.id,this.props.flowKey),t=0,n=e;t<n.length;t++){var o=n[t];this.Outcomes[o.developerName]=new f.FlowOutcome(o)}for(var r=0,i=e=manywho.model.getOutcomes("",this.props.flowKey);r<i.length;r++){o=i[r];this.Outcomes[o.developerName]=new f.FlowOutcome(o)}},t.prototype.getOutcomeById=function(e){var t,n=this;return Object.keys(this.outcomes).forEach((function(o){n.outcomes[o].id===e&&(t=n.outcomes[o])})),t||(t=this.loadOutcome(e)),t},t.prototype.loadAttributes=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){var t=e.attributes;if(t)for(var n=0,o=Object.keys(t);n<o.length;n++){var r=o[n];this.Attributes[r]=new c.FlowAttribute(r,t[r])}}},t.prototype.loadModel=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){this.Model={contentType:e.contentType,content:e.content,dataSource:new h.FlowObjectDataArray([]),developerName:e.developerName,displayColumns:[],enabled:e.isEnabled,height:e.height,helpInfo:e.helpInfo,hintInfo:e.hintValue,joinUri:this.joinURI,label:e.label,maxSize:e.maxSize,multiSelect:e.isMultiSelect,readOnly:!e.isEditable,required:e.isRequired,size:e.size,validationMessage:e.validationMessage,visible:e.isVisible,width:e.width};var t=e.objectData;if(t)for(var n=0,o=t;n<o.length;n++){var r=o[n];this.Model.dataSource.addItem(new p.FlowObjectData([r]))}var i=e.columns;if(i)for(var a=0,s=i;a<s.length;a++){var l=s[a];this.Model.displayColumns.push(new u.FlowDisplayColumn(l))}}},t.prototype.loadValue=function(e){return i(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:return this.LoadingState=l.loading,[4,this.callRequestOld(this.valueurl+"/"+e,"GET",{})];case 1:return(t=n.sent())&&(this.Fields[t.developerName]=new d.FlowField(t)),this.LoadingState=l.ready,[2,this.Fields[t.developerName]]}}))}))},t.prototype.getResultBodyText=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(t){return[2,e.text().then((function(e){return e.startsWith('"')&&(e=e.substr(1)),e.endsWith('"')&&(e=e.substr(0,e.length-1)),e}))]}))}))},t.prototype.callRequest=function(e,t,n){return i(this,void 0,void 0,(function(){var o,r,s=this;return a(this,(function(l){switch(l.label){case 0:return o=[],(r={}).method=t,r.headers={"Content-Type":"application/json",Authorization:this.authenticationToken,ManyWhoTenant:this.tenantId},r.credentials="same-origin","POST"!==t&&"PUT"!==t||(r.body=n),[4,fetch(e,r).then((function(e){return i(s,void 0,void 0,(function(){var t,n;return a(this,(function(r){switch(r.label){case 0:return 200!==e.status?[3,2]:[4,this.getResultBodyText(e)];case 1:return t=r.sent(),JSON.parse(t).forEach((function(e){o.push(e)})),console.log("Loaded Values"),[2,o];case 2:return[4,this.getResultBodyText(e)];case 3:return n=r.sent(),console.log("Can't load values - "+n),[2,o]}}))}))}))];case 1:return l.sent(),[2]}}))}))},t.prototype.callRequestOld=function(e,t,n){return i(this,void 0,void 0,(function(){return a(this,(function(o){switch(o.label){case 0:return[4,manywho.connection.request(this,null,e,t,this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),n)];case 1:return[2,o.sent()]}}))}))},t.prototype.loadAllValues=function(){return i(this,void 0,void 0,(function(){var e,t,n,o=this;return a(this,(function(r){switch(r.label){case 0:return this.LoadingState=l.loading,this.Fields={},[4,this.callRequestOld(this.url,"GET",{})];case 1:return(r.sent()||[]).map((function(e){e&&(o.Fields[e.developerName]=new d.FlowField(e))})),[4,this.callRequestOld(this.userurl,"GET",{})];case 2:return(e=r.sent())&&(t=new d.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value}),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype.dontLoadAllValues=function(){return i(this,void 0,void 0,(function(){var e,t,n;return a(this,(function(o){switch(o.label){case 0:return this.LoadingState=l.loading,[4,this.callRequestOld(this.userurl,"GET",{})];case 1:return(e=o.sent())&&(t=new d.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value}),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype.getStateValue=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{},t=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(t)switch(t.contentType){case"ContentObject":return e.objectData&&e.objectData[0]&&e.objectData[0].properties.length>0?new p.FlowObjectData([e.objectData[0]]):(n=this.model.dataSource.getSelectedItems()).items.length>0?n.items[0]:void 0;case"ContentList":return e.objectData&&e.objectData.length>0?new h.FlowObjectDataArray(e.objectData):(n=this.model.dataSource.getSelectedItems()).items.length>0?n:void 0;var n;default:return e.contentValue?e.contentValue:""}},t.prototype.getStateValueType=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey).contentType;return d.eContentType[e]},t.prototype.setStateValue=function(e,t){return i(this,void 0,void 0,(function(){var t,n,o,r,i;return a(this,(function(a){if(this.LoadingState===l.mounting||this.LoadingState===l.ready){switch(t=this.loadingState,this.LoadingState=l.saving,n=manywho.model.getComponent(this.ComponentId,this.FlowKey),manywho.state.getComponent(this.componentId,this.flowKey)||{},o=void 0,n.contentType){case"ContentObject":r=null,e&&(e.isSelected=!0,r=e.iFlowObjectDataArray(),r=JSON.parse(JSON.stringify(r))),o={objectData:r},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentList":i=null,e&&(i=e.iFlowObjectDataArray(),i=JSON.parse(JSON.stringify(i))),o={objectData:i},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentDate":o={contentValue:e.toISOString()},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;default:o={contentValue:e},manywho.state.setComponent(this.componentId,o,this.flowKey,!0)}this.LoadingState=t,manywho.collaboration.isInitialized(this.flowKey)}return[2,Promise.resolve()]}))}))},t.prototype.eventHandled=function(e,t){console.log("ping")},t.prototype.updateValues=function(e){return i(this,void 0,void 0,(function(){var t,n,o,r,i=this;return a(this,(function(a){switch(a.label){case 0:if(this.LoadingState=l.saving,t=[],e.constructor.name===d.FlowField.name)t.push(e.iFlowField());else for(n=0,o=e;n<o.length;n++)r=o[n],t.push(r.iFlowField());return[4,this.callRequestOld(this.url,"POST",t)];case 1:return a.sent(),manywho.collaboration.isInitialized(this.flowKey)&&t.forEach((function(e){manywho.collaboration.push(i.ComponentId,{message:{action:"REFRESH_FIELD",fieldName:e.developerName}},i.flowKey)})),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype._sendCollaborationMessage=function(e){manywho.collaboration.isInitialized(this.flowKey)&&manywho.collaboration.push(this.ComponentId,{message:e},this.flowKey)},t.prototype.triggerOutcome=function(e,t){return i(this,void 0,void 0,(function(){var n;return a(this,(function(o){switch(o.label){case 0:return this.LoadingState=l.moving,t||(t=[]),this.outcomes[e]&&(n=this.outcomes[e].iFlowOutcome()),n?[4,manywho.component.onOutcome(n,t,this.FlowKey)]:[3,2];case 1:return o.sent(),[3,3];case 2:this.log("Could not find outcome "+e),o.label=3;case 3:return[2,Promise.resolve()]}}))}))},t.prototype.moveTo=function(e,t){return i(this,void 0,void 0,(function(){var t,n,o,r;return a(this,(function(i){switch(i.label){case 0:return this.LoadingState=l.moving,"",t="/api/run/1/state/"+this.stateId,n=manywho.state.getState(this.flowKey),(o={}).currentMapElementId=n.currentMapElementId,o.invokeType="NAVIGATE",o.mapElementInvokeRequest={},o.mapElementInvokeRequest.selectedOutcomeId=null,o.pageRequest={pageComponentInputResponses:[{pageComponentId:this.componentId,contentValue:null,objectData:null}]},o.selectedMapElementId=e,o.stateId=this.stateId,o.stateToken=n.token,[4,manywho.connection.request(this,null,t,"POST",this.tenantId,this.stateId,manywho.state.getAuthenticationToken(this.flowKey),o)];case 1:return r=i.sent(),manywho.model.parseEngineResponse(r,this.flowKey),[4,manywho.engine.render(this.flowKey)];case 2:return i.sent(),[2,Promise.resolve()]}}))}))},t.prototype.log=function(e){var t=new Date,n="["+[("0"+t.getHours()).slice(-2),("0"+t.getMinutes()).slice(-2),("0"+t.getSeconds()).slice(-2)].join(":")+"] ";console.log(n+e)},t.prototype.launchFlowSilent=function(e,t,n,o){return i(this,void 0,void 0,(function(){var e,n,r;return a(this,(function(i){return e=manywho.settings.global("platform.uri")||"https://flow.manywho.com",n=e+"/api/run/1/state",(r={}).id=t,r.developerName=null,r.inputs=o?o.iFlowObjectDataArray():null,manywho.connection.request(this,"",n,"POST",this.TenantId,"",manywho.state.getAuthenticationToken(this.FlowKey),r),[2,Promise.resolve()]}))}))},t.prototype.launchFlowTab=function(e,t,n,o){return i(this,void 0,void 0,(function(){var o,r;return a(this,(function(i){return o=manywho.settings.global("platform.uri")||"https://flow.boomi.com",r=o+"/"+e+"/play/"+n+"?flow-id="+t,window.open(r,"_new"),[2,Promise.resolve()]}))}))},t.prototype.componentDidUpdate=function(){return i(this,void 0,void 0,(function(){var e,t;return a(this,(function(n){switch(n.label){case 0:if(e=manywho.state.getComponent(this.componentId,this.flowKey),t=e.message,this.loadModel(),t&&manywho.state.setComponent(this.componentId,{message:{}},this.flowKey,!1),!t||!t.action)return[3,6];switch(t.action.toUpperCase()){case"REFRESH_FIELDS":return[3,1];case"REFRESH_FIELD":return[3,3]}return[3,5];case 1:return[4,this.loadAllValues()];case 2:return n.sent(),[3,6];case 3:return[4,this.loadValue(t.fieldName)];case 4:return n.sent(),[3,6];case 5:return[3,6];case 6:return[2,t]}}))}))},t.prototype.receiveMessage=function(e){return i(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:if(!e.data)return[3,9];if(!(t=e.data).action)return[3,9];switch(t.action.toUpperCase()){case"OUTCOME":return[3,1];case"REFRESH_FIELDS":return[3,3];case"REFRESH_FIELD":return[3,5]}return[3,7];case 1:return[4,this.triggerOutcome(t.data)];case 2:return n.sent(),[3,9];case 3:return[4,this.loadAllValues()];case 4:return n.sent(),[3,9];case 5:return[4,this.loadValue(t.fieldName)];case 6:return n.sent(),[3,9];case 7:return[4,this.handleMessage(t)];case 8:return n.sent(),[3,9];case 9:return[2,Promise.resolve()]}}))}))},t.prototype.handleMessage=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(e){return[2,Promise.resolve()]}))}))},t}(s.Component);t.FlowBaseComponent=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowAttribute=void 0;var o=function(){function e(e,t){this.Name=e,this.Value=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this.Name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},enumerable:!1,configurable:!0}),e}();t.FlowAttribute=o},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||o(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),r(n(12),t),r(n(16),t),r(n(17),t),r(n(19),t),r(n(4),t),r(n(5),t),r(n(7),t),r(n(1),t),r(n(2),t),r(n(3),t),r(n(8),t),r(n(9),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowDisplayColumn=void 0;var o=n(1),r=function(){function e(e){this.Column=e,this.ComponentType=e.componentType,this.ContentFormat=e.contentFormat,this.ContentType=o.eContentType[e.contentType],this.DeveloperName=e.developerName,this.DisplayOrder=e.order,this.Label=e.label,this.ReadOnly=!e.isEditable,this.TypeElememtPropertyToDisplayId=e.typeElememtPropertyToDisplayId,this.TypeElementPropertyId=e.typeElementPropertyId,this.Visible=e.isDisplayValue}return Object.defineProperty(e.prototype,"componentType",{get:function(){return this.ComponentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){return this.Visible},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"readOnly",{get:function(){return this.ReadOnly},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"displayOrder",{get:function(){return this.DisplayOrder},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElememtPropertyToDisplayId",{get:function(){return this.TypeElememtPropertyToDisplayId},enumerable:!1,configurable:!0}),e.prototype.iFlowDisplayColumn=function(){return this.Column},e}();t.FlowDisplayColumn=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectDataProperty=void 0;var o=n(1),r=n(2),i=n(3),a=function(){function e(e){if(this.ContentFormat="",this.ContentType=o.eContentType.unknown,this.DeveloperName="",this.TypeElementId="",this.TypeElementPropertyId="",e)switch(this.DeveloperName=e.developerName,this.ContentType=o.eContentType[e.contentType],this.ContentFormat=e.contentFormat?e.contentFormat:"",this.TypeElementId=e.typeElementId?e.typeElementId:"",this.TypeElementPropertyId=e.typeElementPropertyId,this.ContentType){case o.eContentType.ContentObject:this.Value=e.objectData?new r.FlowObjectData(e.objectData):void 0;break;case o.eContentType.ContentList:this.value=e.objectData?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.value=e.contentValue?e.contentValue:""}}return e.newInstance=function(e,t,n){var r="",i=[];switch(t){case o.eContentType.ContentObject:var a=n;i.push(a.iObjectData());break;case o.eContentType.ContentList:i=n.iFlowObjectDataArray();break;default:r=n}return new this({contentFormat:"",contentType:o.eContentType[t],contentValue:r,developerName:e,objectData:i,typeElementId:"",typeElementPropertyId:""})},Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},set:function(e){this.contentFormat=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},set:function(e){this.ContentType=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},set:function(e){this.TypeElementPropertyId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){switch(this.contentType){case o.eContentType.ContentNumber:return parseFloat(this.Value?this.Value:"0");case o.eContentType.ContentBoolean:return"true"===new String(this.Value).toLowerCase();default:return this.Value}},set:function(e){this.Value=e},enumerable:!1,configurable:!0}),e.prototype.clone=function(){var t;switch(this.contentType){case o.eContentType.ContentList:t=new i.FlowObjectDataArray,this.value.items.forEach((function(e){t.addItem(e.clone(e.developerName))}));break;case o.eContentType.ContentObject:t=this.value.clone(this.value.developerName);break;default:t=this.value}return e.newInstance(this.developerName,this.contentType,t)},e.prototype.iFlowObjectDataProperty=function(){var e="",t=[];switch(this.ContentType){case o.eContentType.ContentObject:var n=this.Value;n&&n.developerName&&n.developerName.length>0&&t.push(n.iObjectData());break;case o.eContentType.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value}return{contentFormat:this.ContentFormat,contentType:o.eContentType[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementId:this.TypeElementId,typeElementPropertyId:this.TypeElementPropertyId}},Object.defineProperty(e.prototype,"displayString",{get:function(){var e="";if(this.Value)switch(this.ContentType){case o.eContentType.ContentString:case o.eContentType.ContentNumber:e=this.Value;break;case o.eContentType.ContentBoolean:e=!0===this.Value?"True":"False";break;case o.eContentType.ContentDateTime:var t=Date.parse(this.Value);if(!isNaN(t)){var n=new Date(t);return e.length<=10?n.toLocaleDateString():n.toLocaleString()}break;default:e=o.eContentType[this.ContentType]}else e="Undefined";return e},enumerable:!1,configurable:!0}),e}();t.FlowObjectDataProperty=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowOutcome=t.ePageActionType=t.ePageActionBindingType=void 0;var o=n(5);!function(e){e.Save="SAVE",e.PartialSave="PARTIAL_SAVE",e.NoSave="NO_SAVE"}(t.ePageActionBindingType||(t.ePageActionBindingType={})),function(e){e.New="NEW",e.Query="QUERY",e.Insert="INSERT",e.Update="UPDATE",e.Upsert="UPSERT",e.Delete="DELETE",e.Remove="REMOVE",e.Add="ADD",e.Edit="EDIT",e.Next="NEXT",e.Back="BACK",e.Done="DONE",e.Save="SAVE",e.Cancel="CANCEL",e.Apply="APPLY",e.Import="IMPORT",e.Close="CLOSE",e.Open="OPEN",e.Submit="SUBMIT",e.Escalate="ESCALATE",e.Reject="REJECT",e.Delegate="DELEGATE"}(t.ePageActionType||(t.ePageActionType={}));var r=function(){function e(e){if(this.DeveloperName=e.developerName,this.Id=e.id,this.IsBulkAction=e.isBulkAction,this.IsOut=e.isOut,this.Label=e.label,this.Order=e.order,this.PageActionBindingType=e.pageActionBindingType,this.PageActionType=e.pageActionType,this.PageObjectBindingId=e.pageObjectBindingId,this.Attributes={},e.attributes)for(var t=0,n=Object.keys(e.attributes);t<n.length;t++){var r=n[t];this.Attributes[r]=new o.FlowAttribute(r,e.attributes[r])}this.Outcome=e}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this.Id},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isBulkAction",{get:function(){return this.IsBulkAction},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isOut",{get:function(){return this.IsOut},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageActionBindingType",{get:function(){return this.PageActionBindingType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageActionType",{get:function(){return this.PageActionType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageObjectBindingId",{get:function(){return this.PageObjectBindingId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!1,configurable:!0}),e.prototype.iFlowOutcome=function(){return this.Outcome},e}();t.FlowOutcome=r},function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(11)),o(n(21))},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=n(6),c=s(n(0)),u=function(t){function n(n){var o=t.call(this,n)||this;return o.version="1.0.0",o.count=0,o.scrollTop=0,o.tScrollTop=0,o.scrollLock=!1,o.scrollMove=o.scrollMove.bind(o),o.flowMoved=o.flowMoved.bind(o),o.flowWillMove=o.flowWillMove.bind(o),o.setScrollPos=o.setScrollPos.bind(o),delete manywho["component.scrollToTop"],manywho.component.scrollToTop=function(){},e.exports=manywho,o}return r(n,t),n.prototype.findParentScroller=function(e){var t=getComputedStyle(e);return"auto"===t.getPropertyValue("overflow-x")||"auto"===t.getPropertyValue("overflow-y")||"auto"===t.getPropertyValue("overflow")||"manywho"===e.id||"body"===e.tagName?e:(e=e.parentElement,this.findParentScroller(e))},n.prototype.scrollMove=function(e){!1===this.scrollLock&&(this.scrollTop=this.parentScroller.scrollTop,localStorage.setItem(this.flowKey+"_"+this.componentId+"_y",this.scrollTop.toString()),console.log(this.scrollTop))},n.prototype.flowWillMove=function(e,t){return i(this,void 0,void 0,(function(){return a(this,(function(e){return this.scrollLock=!0,this.tScrollTop=this.parentScroller.scrollTop,localStorage.setItem(this.flowKey+"_"+this.componentId+"_y",this.tScrollTop.toString()),[2]}))}))},n.prototype.flowMoved=function(e,t){return i(this,void 0,void 0,(function(){var n,o,r;return a(this,(function(i){return n=this,"FORWARD"===e.invokeType&&(this.loadingState!==l.eLoadingState.ready?window.setTimeout((function(){n.flowMoved(e,t)}),500):(this.scrollLock=!1,(o=manywho.model.getContainer(this.parentId,this.flowKey))&&(r=document.getElementById(o.id),this.parentScroller=this.findParentScroller(r),this.scrollTop=parseFloat(localStorage.getItem(this.flowKey+"_"+this.componentId+"_y")||"0"),window.setTimeout(this.setScrollPos,100)))),[2]}))}))},n.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){var e,n;return a(this,(function(o){switch(o.label){case 0:return[4,t.prototype.componentDidMount.call(this)];case 1:return o.sent(),e=manywho.model.getContainer(this.parentId,this.flowKey),n=document.getElementById(e.id),this.parentScroller=this.findParentScroller(n),this.scrollTop=parseFloat(localStorage.getItem(this.componentId+"_y")||"0"),manywho.eventManager.addDoneListener(this.flowMoved,this.componentId),manywho.eventManager.addBeforeSendListener(this.flowWillMove,this.componentId),window.setTimeout(this.setScrollPos,100),[2]}}))}))},n.prototype.componentWillUnmount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,t.prototype.componentWillUnmount.call(this)];case 1:return e.sent(),this.parentScroller.removeEventListener("scroll",this.scrollMove,{passive:!0}),manywho.eventManager.removeDoneListener(this.componentId),manywho.eventManager.removeBeforeSendListener(this.componentId),[2]}}))}))},n.prototype.setScrollPos=function(e){void 0===e&&(e=!0);var t=this;this.parentScroller.scrollTop=this.scrollTop,!0===e&&window.setTimeout((function(){t.setScrollPos(!1)}),300)},n.prototype.render=function(){return c.default.createElement("div",null)},n}(l.FlowComponent);t.default=u,manywho.component.register("ScrollKeeper",u)},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowComponent=void 0;var s=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.dontLoadAllValues()];case 2:return t.sent(),[2,Promise.resolve()]}}))}))},t}(n(4).FlowBaseComponent);t.FlowComponent=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners={},manywho.eventManager.doneListeners={},manywho.eventManager.failListeners={},manywho.eventManager.outcomeBeingTriggered,manywho.eventManager.history=[],manywho.eventManager.beforeSend=function(e,t){for(var n in manywho.eventManager.beforeSendListeners)manywho.eventManager.beforeSendListeners[n](e,t)},manywho.eventManager.done=function(e,t){for(var n in manywho.eventManager.doneListeners)manywho.eventManager.doneListeners[n](e,t)},manywho.eventManager.fail=function(e,t){for(var n in manywho.eventManager.failListeners)manywho.eventManager.failListeners[n](e,t)},manywho.eventManager.addBeforeSendListener=function(e,t){manywho.eventManager.beforeSendListeners[t]=e},manywho.eventManager.removeBeforeSendListener=function(e){delete manywho.eventManager.beforeSendListeners[e]},manywho.eventManager.addDoneListener=function(e,t){manywho.eventManager.doneListeners[t]=e},manywho.eventManager.removeDoneListener=function(e){delete manywho.eventManager.doneListeners[e]},manywho.eventManager.addFailListener=function(e,t){manywho.eventManager.failListeners[t]=e},manywho.eventManager.removeFailListener=function(e){delete manywho.eventManager.failListeners[e]},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail}}))},function(e,t,n){(function(t){var n=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,r=/^0b[01]+$/i,i=/^0o[0-7]+$/i,a=parseInt,s="object"==typeof t&&t&&t.Object===Object&&t,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,d=Math.max,p=Math.min,h=function(){return c.Date.now()};function f(e,t,n){var o,r,i,a,s,l,c=0,u=!1,f=!1,g=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function b(t){var n=o,i=r;return o=r=void 0,c=t,a=e.apply(i,n)}function v(e){return c=e,s=setTimeout(I,t),u?b(e):a}function w(e){var n=e-l;return void 0===l||n>=t||n<0||f&&e-c>=i}function I(){var e=h();if(w(e))return O(e);s=setTimeout(I,function(e){var n=t-(e-l);return f?p(n,i-(e-c)):n}(e))}function O(e){return s=void 0,g&&o?b(e):(o=r=void 0,a)}function T(){var e=h(),n=w(e);if(o=arguments,r=this,l=e,n){if(void 0===s)return v(l);if(f)return s=setTimeout(I,t),b(l)}return void 0===s&&(s=setTimeout(I,t)),a}return t=m(t)||0,y(n)&&(u=!!n.leading,i=(f="maxWait"in n)?d(m(n.maxWait)||0,t):i,g="trailing"in n?!!n.trailing:g),T.cancel=function(){void 0!==s&&clearTimeout(s),c=0,o=l=r=s=void 0},T.flush=function(){return void 0===s?a:O(h())},T}function y(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function m(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==u.call(e)}(e))return NaN;if(y(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=y(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var s=r.test(e);return s||i.test(e)?a(e.slice(2),s?2:8):o.test(e)?NaN:+e}e.exports=function(e,t,n){var o=!0,r=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return y(n)&&(o="leading"in n?!!n.leading:o,r="trailing"in n?!!n.trailing:r),f(e,t,{leading:o,maxWait:t,trailing:r})}}).call(this,n(15))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowPage=void 0;var s=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.loadAllValues()];case 2:return t.sent(),[2,Promise.resolve()]}}))}))},t}(n(4).FlowBaseComponent);t.FlowPage=s},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.ModalDialog=t.DragEvent=t.eDragEventType=t.modalDialogButton=void 0;var i=n(0);n(18);var a,s=function(e,t){this.label=e,this.handler=t};t.modalDialogButton=s,function(e){e[e.unknown=0]="unknown",e[e.canvas=1]="canvas",e[e.table=2]="table",e[e.link=3]="link",e[e.dialog=4]="dialog"}(a=t.eDragEventType||(t.eDragEventType={}));var l=function(){function e(){this.type=a.unknown,this.sourceElement=null,this.targetElement=null,this.mouseX=0,this.mouseY=0,this.mouseOffsetX=0,this.mouseOffsetY=0}return e.start=function(t,n,o,r){var i=new e;return i.type=t,i.sourceElement=n,i.targetElement=null,i.mouseX=o,i.mouseY=r,i.mouseOffsetX=o,i.mouseOffsetY=r,i},e.prototype.drag=function(e,t){this.mouseX=e,this.mouseY=t},e.prototype.end=function(e,t,n){this.targetElement=e,this.mouseX=t,this.mouseY=n,this.type=a.unknown},e}();t.DragEvent=l;var c=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new l,n.top=0,n.left=0,n.handleKeyUp=n.handleKeyUp.bind(n),n.handleOutsideClick=n.handleOutsideClick.bind(n),n.onCloseRequest=n.onCloseRequest.bind(n),n}return r(t,e),t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.componentDidMount=function(){if(this.dialog){var e=this.dialog.offsetParent.clientWidth/2,t=this.dialog.offsetParent.clientHeight/2,n=this.dialog.clientWidth/2,o=this.dialog.clientHeight/2;this.left=e-n,this.top=t-o,this.forceUpdate(),this.dialog.classList.add("shown"),this.forceUpdate()}},t.prototype.componentWillUnmount=function(){},t.prototype.onCloseRequest=function(){this.props.onCloseRequest&&this.props.onCloseRequest()},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.onCloseRequest()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.handleOutsideClick=function(e){this.dialog||this.dialog.contains(e.target)||this.onCloseRequest()},t.prototype.render=function(){var e=this,t={};t.left=this.left,t.top=this.top;for(var n=[],o=function(e){n.push(i.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},r=0,a=this.props.buttons;r<a.length;r++){o(a[r])}return i.createElement("div",{className:"modal-redaction",onMouseMove:function(t){e.onMouseMove(t)},onMouseUp:function(t){e.onMouseUp(t)},onMouseDown:function(t){e.handleOutsideClick(t)},onContextMenu:function(t){t.preventDefault(),t.stopPropagation(),e.props.onContextMenu&&e.props.onContextMenu()}},i.createElement("div",{style:t,className:"modal-content",ref:function(t){return e.dialog=t}},i.createElement("div",{className:"modal-dialog"},i.createElement("div",{className:"modal-dialog-header",onMouseDown:function(t){e.onMouseDown(t)}},i.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},i.createElement("span",{className:"modal-dialog-header-title"},this.props.title)),i.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},i.createElement("span",{className:"glyphicon glyphicon-remove modal-dialog-header-button",style:{cursor:"pointer",color:"#fefefe",marginRight:"5px",fontSize:"14pt"},title:"Close",onMouseDown:function(t){t.stopPropagation(),e.props.onClose("cancel")}}))),i.createElement("div",{className:"modal-dialog-body"},i.createElement("div",{className:"modal-dialog-body-client"},this.props.children)),i.createElement("div",{className:"modal-dialog-button-bar"},n))))},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.forceUpdate()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;console.log("grab dialog"),this.dragEvent=l.start(a.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===a.dialog&&(console.log("move dialog"),this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY))},t.prototype.onMouseUp=function(e){this.dragEvent.type===a.dialog&&(console.log("drop dialog"),this.dragEvent.end(null,e.clientX,e.clientY))},t}(i.Component);t.ModalDialog=c},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0);n(20);var a=function(e){function t(t){var n=e.call(this,t)||this;return n.icons={},n.selectedItem=n.props.onChangeValue,n.onchange=n.onchange.bind(n),n.addIcon=n.addIcon.bind(n),n.addIcons=n.addIcons.bind(n),n.addIcons(),n}return r(t,e),t.prototype.onchange=function(e){this.selectedItem=e.target.innerText,this.props.onChange&&this.props.onChange(this.selectedItem),this.forceUpdate()},t.prototype.addIcons=function(){this.addIcon("asterisk","Asterisk"),this.addIcon("plus","Plus"),this.addIcon("minus","Minus"),this.addIcon("eur","Eur"),this.addIcon("euro","Euro"),this.addIcon("cloud","Cloud"),this.addIcon("envelope","Envelope"),this.addIcon("pencil","Pencil"),this.addIcon("glass","Glass"),this.addIcon("music","Music"),this.addIcon("search","Search"),this.addIcon("heart","Heart"),this.addIcon("star","Star"),this.addIcon("star-empty","Star Empty"),this.addIcon("user","User"),this.addIcon("film","Film"),this.addIcon("th-large","Th Large"),this.addIcon("th","Th"),this.addIcon("th-list","Th List"),this.addIcon("ok","Ok"),this.addIcon("remove","Remove"),this.addIcon("zoom-in","Zoom In"),this.addIcon("zoom-out","Zoom Out"),this.addIcon("off","Off"),this.addIcon("signal","Signal"),this.addIcon("cog","Cog"),this.addIcon("trash","Trash"),this.addIcon("home","Home"),this.addIcon("file","File"),this.addIcon("time","Time"),this.addIcon("road","Road"),this.addIcon("download-alt","Download Alt"),this.addIcon("download","Download"),this.addIcon("upload","Upload"),this.addIcon("inbox","Inbox"),this.addIcon("play-circle","Play Circle"),this.addIcon("repeat","Repeat"),this.addIcon("refresh","Refresh"),this.addIcon("list-alt","List Alt"),this.addIcon("lock","Lock"),this.addIcon("flag","Flag"),this.addIcon("headphones","Headphones"),this.addIcon("volume-off","Volume Off"),this.addIcon("volume-down","Volume Down"),this.addIcon("volume-up","Volume Up"),this.addIcon("qrcode","Qrcode"),this.addIcon("barcode","Barcode"),this.addIcon("tag","Tag"),this.addIcon("tags","Tags"),this.addIcon("book","Book"),this.addIcon("bookmark","Bookmark"),this.addIcon("print","Print"),this.addIcon("camera","Camera"),this.addIcon("font","Font"),this.addIcon("bold","Bold"),this.addIcon("italic","Italic"),this.addIcon("text-height","Text Height"),this.addIcon("text-width","Text Width"),this.addIcon("align-left","Align Left"),this.addIcon("align-center","Align Center"),this.addIcon("align-right","Align Right"),this.addIcon("align-justify","Align Justify"),this.addIcon("list","List"),this.addIcon("indent-left","Indent Left"),this.addIcon("indent-right","Indent Right"),this.addIcon("facetime-video","Facetime Video"),this.addIcon("picture","Picture"),this.addIcon("map-marker","Map Marker"),this.addIcon("adjust","Adjust"),this.addIcon("tint","Tint"),this.addIcon("edit","Edit"),this.addIcon("share","Share"),this.addIcon("check","Check"),this.addIcon("move","Move"),this.addIcon("step-backward","Step Backward"),this.addIcon("fast-backward","Fast Backward"),this.addIcon("backward","Backward"),this.addIcon("play","Play"),this.addIcon("pause","Pause"),this.addIcon("stop","Stop"),this.addIcon("forward","Forward"),this.addIcon("fast-forward","Fast Forward"),this.addIcon("step-forward","Step Forward"),this.addIcon("eject","Eject"),this.addIcon("chevron-left","Chevron Left"),this.addIcon("chevron-right","Chevron Right"),this.addIcon("plus-sign","Plus Sign"),this.addIcon("minus-sign","Minus Sign"),this.addIcon("remove-sign","Remove Sign"),this.addIcon("ok-sign","Ok Sign"),this.addIcon("question-sign","Question Sign"),this.addIcon("info-sign","Info Sign"),this.addIcon("screenshot","Screenshot"),this.addIcon("remove-circle","Remove Circle"),this.addIcon("ok-circle","Ok Circle"),this.addIcon("ban-circle","Ban Circle"),this.addIcon("arrow-left","Arrow Left"),this.addIcon("arrow-right","Arrow Right"),this.addIcon("arrow-up","Arrow Up"),this.addIcon("arrow-down","Arrow Down"),this.addIcon("share-alt","Share Alt"),this.addIcon("resize-full","Resize Full"),this.addIcon("resize-small","Resize Small"),this.addIcon("exclamation-sign","Exclamation Sign"),this.addIcon("gift","Gift"),this.addIcon("leaf","Leaf"),this.addIcon("fire","Fire"),this.addIcon("eye-open","Eye Open"),this.addIcon("eye-close","Eye Close"),this.addIcon("warning-sign","Warning Sign"),this.addIcon("plane","Plane"),this.addIcon("calendar","Calendar"),this.addIcon("random","Random"),this.addIcon("comment","Comment"),this.addIcon("magnet","Magnet"),this.addIcon("chevron-up","Chevron Up"),this.addIcon("chevron-down","Chevron Down"),this.addIcon("retweet","Retweet"),this.addIcon("shopping-cart","Shopping Cart"),this.addIcon("folder-close","Folder Close"),this.addIcon("folder-open","Folder Open"),this.addIcon("resize-vertical","Resize Vertical"),this.addIcon("resize-horizontal","Resize Horizontal"),this.addIcon("hdd","Hdd"),this.addIcon("bullhorn","Bullhorn"),this.addIcon("bell","Bell"),this.addIcon("certificate","Certificate"),this.addIcon("thumbs-up","Thumbs Up"),this.addIcon("thumbs-down","Thumbs Down"),this.addIcon("hand-right","Hand Right"),this.addIcon("hand-left","Hand Left"),this.addIcon("hand-up","Hand Up"),this.addIcon("hand-down","Hand Down"),this.addIcon("circle-arrow-right","Circle Arrow Right"),this.addIcon("circle-arrow-left","Circle Arrow Left"),this.addIcon("circle-arrow-up","Circle Arrow Up"),this.addIcon("circle-arrow-down","Circle Arrow Down"),this.addIcon("globe","Globe"),this.addIcon("wrench","Wrench"),this.addIcon("tasks","Tasks"),this.addIcon("filter","Filter"),this.addIcon("briefcase","Briefcase"),this.addIcon("fullscreen","Fullscreen"),this.addIcon("dashboard","Dashboard"),this.addIcon("paperclip","Paperclip"),this.addIcon("heart-empty","Heart Empty"),this.addIcon("link","Link"),this.addIcon("phone","Phone"),this.addIcon("pushpin","Pushpin"),this.addIcon("usd","Usd"),this.addIcon("gbp","Gbp"),this.addIcon("sort","Sort"),this.addIcon("sort-by-alphabet","Sort By Alphabet"),this.addIcon("sort-by-alphabet-alt","Sort By Alphabet Alt"),this.addIcon("sort-by-order","Sort By Order"),this.addIcon("sort-by-order-alt","Sort By Order Alt"),this.addIcon("sort-by-attributes","Sort By Attributes"),this.addIcon("sort-by-attributes-alt","Sort By Attributes Alt"),this.addIcon("unchecked","Unchecked"),this.addIcon("expand","Expand"),this.addIcon("collapse-down","Collapse Down"),this.addIcon("collapse-up","Collapse Up"),this.addIcon("log-in","Log In"),this.addIcon("flash","Flash"),this.addIcon("log-out","Log Out"),this.addIcon("new-window","New Window"),this.addIcon("record","Record"),this.addIcon("save","Save"),this.addIcon("open","Open"),this.addIcon("saved","Saved"),this.addIcon("import","Import"),this.addIcon("export","Export"),this.addIcon("send","Send"),this.addIcon("floppy-disk","Floppy Disk"),this.addIcon("floppy-saved","Floppy Saved"),this.addIcon("floppy-remove","Floppy Remove"),this.addIcon("floppy-save","Floppy Save"),this.addIcon("floppy-open","Floppy Open"),this.addIcon("credit-card","Credit Card"),this.addIcon("transfer","Transfer"),this.addIcon("cutlery","Cutlery"),this.addIcon("header","Header"),this.addIcon("compressed","Compressed"),this.addIcon("earphone","Earphone"),this.addIcon("phone-alt","Phone Alt"),this.addIcon("tower","Tower"),this.addIcon("stats","Stats"),this.addIcon("sd-video","Sd Video"),this.addIcon("hd-video","Hd Video"),this.addIcon("subtitles","Subtitles"),this.addIcon("sound-stereo","Sound Stereo"),this.addIcon("sound-dolby","Sound Dolby"),this.addIcon("sound-5-1","Sound 5 1"),this.addIcon("sound-6-1","Sound 6 1"),this.addIcon("sound-7-1","Sound 7 1"),this.addIcon("copyright-mark","Copyright Mark"),this.addIcon("registration-mark","Registration Mark"),this.addIcon("cloud-download","Cloud Download"),this.addIcon("cloud-upload","Cloud Upload"),this.addIcon("tree-conifer","Tree Conifer"),this.addIcon("tree-deciduous","Tree Deciduous"),this.addIcon("cd","Cd"),this.addIcon("save-file","Save File"),this.addIcon("open-file","Open File"),this.addIcon("level-up","Level Up"),this.addIcon("copy","Copy"),this.addIcon("paste","Paste"),this.addIcon("alert","Alert"),this.addIcon("equalizer","Equalizer"),this.addIcon("king","King"),this.addIcon("queen","Queen"),this.addIcon("pawn","Pawn"),this.addIcon("bishop","Bishop"),this.addIcon("knight","Knight"),this.addIcon("baby-formula","Baby Formula"),this.addIcon("tent","Tent"),this.addIcon("blackboard","Blackboard"),this.addIcon("bed","Bed"),this.addIcon("apple","Apple"),this.addIcon("erase","Erase"),this.addIcon("hourglass","Hourglass"),this.addIcon("lamp","Lamp"),this.addIcon("duplicate","Duplicate"),this.addIcon("piggy-bank","Piggy Bank"),this.addIcon("scissors","Scissors"),this.addIcon("bitcoin","Bitcoin"),this.addIcon("yen","Yen"),this.addIcon("ruble","Ruble"),this.addIcon("scale","Scale"),this.addIcon("ice-lolly","Ice Lolly"),this.addIcon("ice-lolly-tasted","Ice Lolly Tasted"),this.addIcon("education","Education"),this.addIcon("option-horizontal","Option Horizontal"),this.addIcon("option-vertical","Option Vertical"),this.addIcon("menu-hamburger","Menu Hamburger"),this.addIcon("modal-window","Modal Window"),this.addIcon("oil","Oil"),this.addIcon("grain","Grain"),this.addIcon("sunglasses","Sunglasses"),this.addIcon("text-size","Text Size"),this.addIcon("text-color","Text Color"),this.addIcon("text-background","Text Background"),this.addIcon("object-align-top","Object Align Top"),this.addIcon("object-align-bottom","Object Align Bottom"),this.addIcon("object-align-horizontal","Object Align Horizontal"),this.addIcon("object-align-left","Object Align Left"),this.addIcon("object-align-vertical","Object Align Vertical"),this.addIcon("object-align-right","Object Align Right"),this.addIcon("triangle-right","Triangle Right"),this.addIcon("triangle-left","Triangle Left"),this.addIcon("triangle-bottom","Triangle Bottom"),this.addIcon("triangle-top","Triangle Top"),this.addIcon("console","Console"),this.addIcon("superscript","Superscript"),this.addIcon("subscript","Subscript"),this.addIcon("menu-left","Menu Left"),this.addIcon("menu-right","Menu Right"),this.addIcon("menu-down","Menu Down"),this.addIcon("menu-up","Menu Up")},t.prototype.addIcon=function(e,t){this.icons[e]={name:e,label:t}},t.prototype.render=function(){for(var e=this,t=[],n=0,o=Object.keys(this.icons);n<o.length;n++){var r=o[n],a="glyphicon glyphicon-"+this.icons[r].name+" icon-picker-icon";t.push(i.createElement("li",{onClick:function(t){e.onchange(t)}},i.createElement("span",{className:a}),this.icons[r].name))}return i.createElement("div",{className:"btn-group"},i.createElement("button",{type:"button",className:"btn btn-default dropdown-toggle","data-toggle":"dropdown"},i.createElement("span",{className:"glyphicon glyphicon-"+this.selectedItem}),i.createElement("span",{className:"caret"})),i.createElement("ul",{className:"dropdown-menu",role:"menu"},t))},t}(i.Component);t.default=a},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=n(6),c=s(n(0)),u=function(e){function t(t){var n=e.call(this,t)||this;return n.version="1.0.0",n.count=0,n.flowMoved=n.flowMoved.bind(n),n.flowWillMove=n.flowWillMove.bind(n),n.setSelectedTab=n.setSelectedTab.bind(n),n.getSelectedTab=n.getSelectedTab.bind(n),n}return r(t,e),t.prototype.findParentTabs=function(e){getComputedStyle(e);return e.classList.contains("mw-group")?e:(e=e.parentElement,this.findParentTabs(e))},t.prototype.flowWillMove=function(e,t){return i(this,void 0,void 0,(function(){return a(this,(function(e){return this.selectedTab=this.getSelectedTab(),localStorage.setItem(this.flowKey+"_"+this.componentId+"_tab",this.selectedTab),[2]}))}))},t.prototype.flowMoved=function(e,t){return i(this,void 0,void 0,(function(){var n,o,r;return a(this,(function(i){return n=this,"FORWARD"===e.invokeType&&(this.loadingState!==l.eLoadingState.ready?window.setTimeout((function(){n.flowMoved(e,t)}),500):(o=manywho.model.getContainer(this.parentId,this.flowKey))&&(r=document.getElementById(o.id),this.tabsElement=this.findParentTabs(r),this.selectedTab=localStorage.getItem(this.flowKey+"_"+this.componentId+"_tab"),window.setTimeout(this.setSelectedTab,100))),[2]}))}))},t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){var t,n;return a(this,(function(o){switch(o.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return o.sent(),t=manywho.model.getContainer(this.parentId,this.flowKey),n=document.getElementById(t.id),this.tabsElement=this.findParentTabs(n),this.selectedTab=localStorage.getItem(this.flowKey+"_"+this.componentId+"_tab"),manywho.eventManager.addDoneListener(this.flowMoved,this.componentId),manywho.eventManager.addBeforeSendListener(this.flowWillMove,this.componentId),window.setTimeout(this.setSelectedTab,100),[2]}}))}))},t.prototype.componentWillUnmount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentWillUnmount.call(this)];case 1:return t.sent(),manywho.eventManager.removeDoneListener(this.componentId),manywho.eventManager.removeBeforeSendListener(this.componentId),[2]}}))}))},t.prototype.setSelectedTab=function(){if(this.selectedTab&&this.tabsElement)for(var e=0;e<this.tabsElement.children[0].children.length;e++)if(this.tabsElement.children[0].children[e].classList.contains("nav-tabs"))for(var t=0;t<this.tabsElement.children[0].children[e].children.length;t++)if(this.tabsElement.children[0].children[e].children[t].children[0].id===this.selectedTab){var n=document.createEvent("Events");n.initEvent("click",!0,!1),this.tabsElement.children[0].children[e].children[t].children[0].dispatchEvent(n)}},t.prototype.getSelectedTab=function(){if(this.tabsElement)for(var e=0;e<this.tabsElement.children[0].children.length;e++)if(this.tabsElement.children[0].children[e].classList.contains("nav-tabs"))for(var t=0;t<this.tabsElement.children[0].children[e].children.length;t++)if(this.tabsElement.children[0].children[e].children[t].classList.contains("active"))return this.tabsElement.children[0].children[e].children[t].children[0].id},t.prototype.render=function(){return c.default.createElement("div",null)},t}(l.FlowComponent);t.default=u,manywho.component.register("TabKeeper",u)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dGaWVsZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dPYmplY3REYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd09iamVjdERhdGFBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dCYXNlQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd0F0dHJpYnV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dDb21wb25lbnRNb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dEaXNwbGF5Q29sdW1uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd09iamVjdERhdGFQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dPdXRjb21lLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL1Njcm9sbEtlZXBlci9TY3JvbGxLZWVwZXIudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd0NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0V2ZW50TWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLnRocm90dGxlL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zsb3ctY29tcG9uZW50LW1vZGVsL2xpYi9GbG93UGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL01vZGFsRGlhbG9nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvSWNvblBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVGFiS2VlcGVyL1RhYktlZXBlci50c3giXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJSZWFjdCIsIkZsb3dGaWVsZCIsImVDb250ZW50VHlwZSIsIkZsb3dPYmplY3REYXRhXzEiLCJGbG93T2JqZWN0RGF0YUFycmF5XzEiLCJmaWVsZCIsInRoaXMiLCJDb250ZW50VHlwZSIsInVua25vd24iLCJEZXZlbG9wZXJOYW1lIiwiVHlwZUVsZW1lbnREZXZlbG9wZXJOYW1lIiwiVHlwZUVsZW1lbnRJZCIsIlR5cGVFbGVtZW50UHJvcGVydHlEZXZlbG9wZXJOYW1lIiwiVHlwZUVsZW1lbnRQcm9wZXJ0eUlkIiwiVmFsdWVFbGVtZW50SWQiLCJjb250ZW50VHlwZSIsImRldmVsb3Blck5hbWUiLCJ0eXBlRWxlbWVudERldmVsb3Blck5hbWUiLCJ0eXBlRWxlbWVudElkIiwidHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWUiLCJ0eXBlRWxlbWVudFByb3BlcnR5SWQiLCJ2YWx1ZUVsZW1lbnRJZCIsIkNvbnRlbnRPYmplY3QiLCJWYWx1ZSIsIm9iamVjdERhdGEiLCJGbG93T2JqZWN0RGF0YSIsInVuZGVmaW5lZCIsIkNvbnRlbnRMaXN0IiwiRmxvd09iamVjdERhdGFBcnJheSIsImNvbnRlbnRWYWx1ZSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImlGbG93RmllbGQiLCJvZCIsInB1c2giLCJpT2JqZWN0RGF0YSIsImlGbG93T2JqZWN0RGF0YUFycmF5IiwiRmxvd09iamVjdERhdGFQcm9wZXJ0eV8xIiwiZGF0YSIsIkV4dGVybmFsSWQiLCJJbnRlcm5hbElkIiwiSXNTZWxlY3RlZCIsIk9yZGVyIiwiUHJvcGVydGllcyIsImludGVybmFsSWQiLCJleHRlcm5hbElkIiwib3JkZXIiLCJpc1NlbGVjdGVkIiwicHJvcGVydGllcyIsImxlbmd0aCIsIl9pIiwiX2EiLCJGbG93T2JqZWN0RGF0YVByb3BlcnR5IiwiY29uc29sZSIsImxvZyIsIm5ld0luc3RhbmNlIiwibWFueXdobyIsInV0aWxzIiwiZ3VpZCIsImFkZFByb3BlcnR5IiwibmV3UHJvcGVydHkiLCJyZW1vdmVQcm9wZXJ0eSIsImNsb25lIiwibmV3VHlwZU5hbWUiLCJfdGhpcyIsImtleXMiLCJmb3JFYWNoIiwibmV3UHJvcCIsInNlbGVjdGVkIiwicHJvcHMiLCJpRmxvd09iamVjdERhdGFQcm9wZXJ0eSIsIm91dHB1dCIsImVTb3J0T3JkZXIiLCJGbG93RmllbGRfMSIsImFycmF5IiwiSXRlbXMiLCJpdGVtIiwic29ydCIsImZpZWxkTmFtZSIsImFzY2VuZGluZyIsImEiLCJiIiwidmFsQSIsInZhbEIiLCJDb250ZW50TnVtYmVyIiwicGFyc2VGbG9hdCIsIkNvbnRlbnREYXRlVGltZSIsIkRhdGUiLCJhZGRJdGVtIiwiY2xlYXJJdGVtcyIsIml0ZW1zIiwib2JqIiwiZ2V0SXRlbVdpdGhQcm9wZXJ0eU5hbWUiLCJmaW5kUHJvcGVydHkiLCJ3aXRoVmFsdWUiLCJyZXR1cm5Qcm9wZXJ0eSIsImNvbXBhcmVUbyIsIkNvbnRlbnRTdHJpbmciLCJ0b0xvd2VyQ2FzZSIsIkNvbnRlbnRCb29sZWFuIiwiU3RyaW5nIiwiZ2V0U2VsZWN0ZWRJdGVtcyIsInJlc3VsdHMiLCJnZXRJdGVtV2l0aFByb3BlcnR5VmFsdWUiLCJnZXRJbmRleE9mSXRlbVdpdGhQcm9wZXJ0eVZhbHVlIiwicG9zIiwicmVtb3ZlSXRlbVdpdGhQcm9wZXJ0eVZhbHVlIiwibW9kaWZpZWRDb3VudCIsInNwbGljZSIsInJlbW92ZUl0ZW1BdEluZGV4IiwiaW5kZXgiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsIl9fIiwiY29uc3RydWN0b3IiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIml0ZXJhdG9yIiwidiIsIm9wIiwiVHlwZUVycm9yIiwicG9wIiwiRmxvd0Jhc2VDb21wb25lbnQiLCJlTG9hZGluZ1N0YXRlIiwiRmxvd0F0dHJpYnV0ZV8xIiwiRmxvd0Rpc3BsYXlDb2x1bW5fMSIsIkZsb3dPdXRjb21lXzEiLCJ0aHJvdHRsZSIsIl9zdXBlciIsIkZpZWxkcyIsIkF0dHJpYnV0ZXMiLCJPdXRjb21lcyIsInNlbmRDb2xsYWJvcmF0aW9uTWVzc2FnZSIsIl9zZW5kQ29sbGFib3JhdGlvbk1lc3NhZ2UiLCJMb2FkaW5nU3RhdGUiLCJpbml0aXRpYWxpemluZyIsImxvYWRBbGxWYWx1ZXMiLCJkb250TG9hZEFsbFZhbHVlcyIsInVwZGF0ZVZhbHVlcyIsInRyaWdnZXJPdXRjb21lIiwiQ29tcG9uZW50SWQiLCJpZCIsIlBhcmVudElkIiwicGFyZW50SWQiLCJGbG93S2V5IiwiZmxvd0tleSIsImxvYWRNb2RlbCIsImxvYWRBdHRyaWJ1dGVzIiwibG9hZE91dGNvbWVzIiwicmVjZWl2ZU1lc3NhZ2UiLCJnZXRTdGF0ZVZhbHVlIiwic2V0U3RhdGVWYWx1ZSIsImdldFN0YXRlVmFsdWVUeXBlIiwib25CZWZvcmVTZW5kIiwib25Eb25lIiwiY2FsY3VsYXRlVmFsdWUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiYmFzZVVybCIsInNldHRpbmdzIiwiZ2xvYmFsIiwibG9jYXRpb24iLCJvcmlnaW4iLCJTdGF0ZUlkIiwiZXh0cmFjdFN0YXRlSWQiLCJUZW5hbnRJZCIsImV4dHJhY3RUZW5hbnRJZCIsImludm9rZXVybCIsInVybCIsInVzZXJ1cmwiLCJ2YWx1ZXVybCIsImluaXRpdGlhbGl6ZWQiLCJyZWFkeSIsIk1vZGVsIiwiVXNlciIsImhyZWYiLCJJc0Rlc2lnblRpbWUiLCJKU09OIiwicGFyc2UiLCJzZXNzaW9uU3RvcmFnZSIsImZsb3dVc2VyIiwiYXV0aGVudGljYXRpb25Ub2tlbiIsImdldEF0dHJpYnV0ZSIsImF0dHJpYnV0ZU5hbWUiLCJkZWZhdWx0VmFsdWUiLCJhdHRyaWJ1dGVzIiwieGhyIiwicmVxdWVzdCIsIm9jIiwiZ2V0T3V0Y29tZUJ5SWQiLCJtYXBFbGVtZW50SW52b2tlUmVxdWVzdCIsInNlbGVjdGVkT3V0Y29tZUlkIiwib2N0IiwiZXZlbnRNYW5hZ2VyIiwib3V0Y29tZUJlaW5nVHJpZ2dlcmVkIiwic3RhcnRzV2l0aCIsImVuZHNXaXRoIiwic3RyaXBwZWQiLCJyZXBsYWNlIiwidmFsIiwic3RyaXBwZWRCaXRzIiwic3BsaXQiLCJmaWVsZHMiLCJlbGUiLCJvdXRjb21lXzEiLCJpbnZva2VUeXBlIiwibW9kZWwiLCJwYXJzZUVuZ2luZVJlc3BvbnNlIiwiYXR0ciIsInRhcmdldFVybCIsIl9iIiwiY2xvc2UiLCJBdXRvT3BlblVybCIsIm9wZW4iLCJhbGVydCIsIkF1dG9OYXZVcmwiLCJwcmludCIsImNvbXBvbmVudERpZE1vdW50IiwibW91bnRpbmciLCJhZGREb25lTGlzdGVuZXIiLCJjb21wb25lbnRJZCIsImFkZEJlZm9yZVNlbmRMaXN0ZW5lciIsInByZXNlcnZlU3RhdGUiLCJtb3VudGVkIiwicmVtb3ZlTG9hZGluZ0luZGljYXRvciIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVtb3ZlQmVmb3JlU2VuZExpc3RlbmVyIiwicmVtb3ZlRG9uZUxpc3RlbmVyIiwibG9hZE91dGNvbWUiLCJvdXRjb21lSWQiLCJvdXRjb21lIiwiZ2V0T3V0Y29tZSIsIkZsb3dPdXRjb21lIiwib3V0cyIsImdldE91dGNvbWVzIiwib3V0c18xIiwib3V0c18yIiwib3V0Y29tZXMiLCJnZXRDb21wb25lbnQiLCJhdHRycyIsIkZsb3dBdHRyaWJ1dGUiLCJjb250ZW50IiwiZGF0YVNvdXJjZSIsImRpc3BsYXlDb2x1bW5zIiwiZW5hYmxlZCIsImlzRW5hYmxlZCIsImhlaWdodCIsImhlbHBJbmZvIiwiaGludEluZm8iLCJoaW50VmFsdWUiLCJqb2luVXJpIiwiam9pblVSSSIsIm1heFNpemUiLCJtdWx0aVNlbGVjdCIsImlzTXVsdGlTZWxlY3QiLCJyZWFkT25seSIsImlzRWRpdGFibGUiLCJyZXF1aXJlZCIsImlzUmVxdWlyZWQiLCJzaXplIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJ2aXNpYmxlIiwiaXNWaXNpYmxlIiwid2lkdGgiLCJkcyIsImRzXzEiLCJjb2xzIiwiY29sdW1ucyIsImNvbHNfMSIsImNvbCIsIkZsb3dEaXNwbGF5Q29sdW1uIiwibG9hZFZhbHVlIiwidmFsdWVOYW1lIiwibG9hZGluZyIsImNhbGxSZXF1ZXN0T2xkIiwiZ2V0UmVzdWx0Qm9keVRleHQiLCJyZXNwb25zZSIsInRleHQiLCJzdWJzdHIiLCJjYWxsUmVxdWVzdCIsIm1ldGhvZCIsImhlYWRlcnMiLCJ0ZW5hbnRJZCIsImNyZWRlbnRpYWxzIiwiZmV0Y2giLCJqc29uIiwiZXJyb3JUZXh0Iiwic3RhdHVzIiwiY29ubmVjdGlvbiIsInN0YXRlIiwiZ2V0QXV0aGVudGljYXRpb25Ub2tlbiIsInVzZXJ2YWwiLCJ1IiwibWFwIiwiZGlyZWN0b3J5SWQiLCJkaXJlY3RvcnlOYW1lIiwiZW1haWwiLCJmaXJzdE5hbWUiLCJncm91cElkIiwiZ3JvdXBOYW1lIiwiaXBBZGRyZXNzIiwibGFuZ3VhZ2UiLCJsYXN0TmFtZSIsInJvbGVJZCIsInJvbGVOYW1lIiwidXNlck5hbWUiLCJmbG93U3RhdGUiLCJmbG93TW9kZWwiLCJzZWxlY3RlZE1vZGVsSXRlbXMiLCJjdCIsImlnbm9yZVN0YXRlIiwib2xkU3RhdGUiLCJuZXdTdGF0ZSIsIm9iamVjdERhdGFBcnJheSIsImxvYWRpbmdTdGF0ZSIsInNhdmluZyIsInN0cmluZ2lmeSIsInNldENvbXBvbmVudCIsInRvSVNPU3RyaW5nIiwiY29sbGFib3JhdGlvbiIsImlzSW5pdGlhbGl6ZWQiLCJldmVudEhhbmRsZWQiLCJ2YWx1ZXMiLCJ1cGRhdGVGaWVsZHMiLCJtZXNzYWdlIiwib3V0Y29tZU5hbWUiLCJtb3ZpbmciLCJpRmxvd091dGNvbWUiLCJjb21wb25lbnQiLCJvbk91dGNvbWUiLCJtb3ZlVG8iLCJmbG93RWxlbWVudElkIiwiaW5mbyIsInJlc3AiLCJzdGF0ZUlkIiwiZ2V0U3RhdGUiLCJjdXJyZW50TWFwRWxlbWVudElkIiwicGFnZVJlcXVlc3QiLCJwYWdlQ29tcG9uZW50SW5wdXRSZXNwb25zZXMiLCJwYWdlQ29tcG9uZW50SWQiLCJzZWxlY3RlZE1hcEVsZW1lbnRJZCIsInN0YXRlVG9rZW4iLCJ0b2tlbiIsImVuZ2luZSIsInJlbmRlciIsIm5vdyIsInRpbWVzdGFtcCIsImdldEhvdXJzIiwic2xpY2UiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImpvaW4iLCJsYXVuY2hGbG93U2lsZW50IiwidGVuYW50IiwiZmxvd0lkIiwicGxheWVyIiwiaW5wdXRzIiwibGF1bmNoRmxvd1RhYiIsImNvbXBvbmVudERpZFVwZGF0ZSIsImFjdGlvbiIsInRvVXBwZXJDYXNlIiwibXNnIiwiaGFuZGxlTWVzc2FnZSIsIkNvbXBvbmVudCIsIk5hbWUiLCJfX2NyZWF0ZUJpbmRpbmciLCJrIiwiazIiLCJfX2V4cG9ydFN0YXIiLCJjb2x1bW4iLCJDb2x1bW4iLCJDb21wb25lbnRUeXBlIiwiY29tcG9uZW50VHlwZSIsIkNvbnRlbnRGb3JtYXQiLCJjb250ZW50Rm9ybWF0IiwiRGlzcGxheU9yZGVyIiwiTGFiZWwiLCJSZWFkT25seSIsIlR5cGVFbGVtZW10UHJvcGVydHlUb0Rpc3BsYXlJZCIsInR5cGVFbGVtZW10UHJvcGVydHlUb0Rpc3BsYXlJZCIsIlZpc2libGUiLCJpc0Rpc3BsYXlWYWx1ZSIsImlGbG93RGlzcGxheUNvbHVtbiIsImN2Iiwib2JqZCIsImlzTmFOIiwiZHQiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsImVQYWdlQWN0aW9uVHlwZSIsImVQYWdlQWN0aW9uQmluZGluZ1R5cGUiLCJJZCIsIklzQnVsa0FjdGlvbiIsImlzQnVsa0FjdGlvbiIsIklzT3V0IiwiaXNPdXQiLCJQYWdlQWN0aW9uQmluZGluZ1R5cGUiLCJwYWdlQWN0aW9uQmluZGluZ1R5cGUiLCJQYWdlQWN0aW9uVHlwZSIsInBhZ2VBY3Rpb25UeXBlIiwiUGFnZU9iamVjdEJpbmRpbmdJZCIsInBhZ2VPYmplY3RCaW5kaW5nSWQiLCJPdXRjb21lIiwidmVyc2lvbiIsImNvdW50Iiwic2Nyb2xsVG9wIiwidFNjcm9sbFRvcCIsInNjcm9sbExvY2siLCJzY3JvbGxNb3ZlIiwiZmxvd01vdmVkIiwiZmxvd1dpbGxNb3ZlIiwic2V0U2Nyb2xsUG9zIiwic2Nyb2xsVG9Ub3AiLCJmaW5kUGFyZW50U2Nyb2xsZXIiLCJlbGVtZW50Iiwic3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInRhZ05hbWUiLCJwYXJlbnRFbGVtZW50IiwicGFyZW50U2Nyb2xsZXIiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwidG9TdHJpbmciLCJtZSIsInNldFRpbWVvdXQiLCJnZXRDb250YWluZXIiLCJ0aGlzRWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRJdGVtIiwicGFyZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInBhc3NpdmUiLCJyZXBlYXQiLCJGbG93Q29tcG9uZW50IiwicmVnaXN0ZXIiLCJTY3JvbGxLZWVwZXIiLCJiZWZvcmVTZW5kTGlzdGVuZXJzIiwiZG9uZUxpc3RlbmVycyIsImZhaWxMaXN0ZW5lcnMiLCJoaXN0b3J5IiwiYmVmb3JlU2VuZCIsImZhaWwiLCJoYW5kbGVyIiwiYWRkRmFpbExpc3RlbmVyIiwicmVtb3ZlRmFpbExpc3RlbmVyIiwiaW5pdGlhbGl6ZSIsImludm9rZSIsInJlVHJpbSIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwicGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJzZWxmIiwicm9vdCIsIkZ1bmN0aW9uIiwib2JqZWN0VG9TdHJpbmciLCJuYXRpdmVNYXgiLCJNYXRoIiwibWF4IiwibmF0aXZlTWluIiwibWluIiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsIm9wdGlvbnMiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJ0cmFpbGluZyIsImludm9rZUZ1bmMiLCJ0aW1lIiwiYXJncyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImFyZ3VtZW50cyIsInRvTnVtYmVyIiwiaXNPYmplY3QiLCJjYW5jZWwiLCJjbGVhclRpbWVvdXQiLCJmbHVzaCIsInR5cGUiLCJpc09iamVjdExpa2UiLCJpc1N5bWJvbCIsIm90aGVyIiwidmFsdWVPZiIsImlzQmluYXJ5IiwidGVzdCIsIkZsb3dQYWdlIiwiTW9kYWxEaWFsb2ciLCJEcmFnRXZlbnQiLCJlRHJhZ0V2ZW50VHlwZSIsIm1vZGFsRGlhbG9nQnV0dG9uIiwic291cmNlRWxlbWVudCIsInRhcmdldEVsZW1lbnQiLCJtb3VzZVgiLCJtb3VzZVkiLCJtb3VzZU9mZnNldFgiLCJtb3VzZU9mZnNldFkiLCJzdGFydCIsImV2dCIsImRyYWciLCJlbmQiLCJ0YXJnZXQiLCJkcmFnRXZlbnQiLCJ0b3AiLCJsZWZ0IiwiaGFuZGxlS2V5VXAiLCJoYW5kbGVPdXRzaWRlQ2xpY2siLCJvbkNsb3NlUmVxdWVzdCIsInN0b3BFdmVudEJ1YmJsZSIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicmV0dXJuVmFsdWUiLCJkaWFsb2ciLCJwYXJlbnRYQ2VudGVyIiwib2Zmc2V0UGFyZW50IiwiY2xpZW50V2lkdGgiLCJwYXJlbnRZQ2VudGVyIiwiY2xpZW50SGVpZ2h0IiwiZGlhbG9nWE9mZnNldCIsImRpYWxvZ1lPZmZzZXQiLCJmb3JjZVVwZGF0ZSIsImNsYXNzTGlzdCIsImFkZCIsIjI3Iiwia2V5Q29kZSIsImNvbnRhaW5zIiwiYnV0dG9ucyIsIl9sb29wXzEiLCJidXR0b24iLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwidGl0bGUiLCJvbk1vdXNlRG93biIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZVVwIiwib25Db250ZXh0TWVudSIsInJlZiIsIm5vZGUiLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsImZsZXhHcm93IiwibWFyZ2luTGVmdCIsImN1cnNvciIsImNvbG9yIiwibWFyZ2luUmlnaHQiLCJmb250U2l6ZSIsIm9uQ2xvc2UiLCJjaGlsZHJlbiIsIm1vdmVNZSIsImNsaWVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRZIiwiY2xpZW50WCIsIkljb25QaWNrZXIiLCJpY29ucyIsInNlbGVjdGVkSXRlbSIsIm9uQ2hhbmdlVmFsdWUiLCJvbmNoYW5nZSIsImFkZEljb24iLCJhZGRJY29ucyIsImlubmVyVGV4dCIsIm9uQ2hhbmdlIiwib3B0IiwiY2xzXzEiLCJvbkNsaWNrIiwicm9sZSIsImRlZmF1bHQiLCJzZXRTZWxlY3RlZFRhYiIsImdldFNlbGVjdGVkVGFiIiwiZmluZFBhcmVudFRhYnMiLCJzZWxlY3RlZFRhYiIsInRhYnNFbGVtZW50IiwidGFiRWxlbWVudHNQb3MiLCJ0YWJQb3MiLCJldk9iaiIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIlRhYktlZXBlciJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9C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QixHQUFnQm5ELFVBQVVJLFNBQVMsWUFDeEUsSUFBSSxJQUFJZ0QsRUFBUyxFQUFJQSxFQUFTdG1CLEtBQUtvbUIsWUFBWXhCLFNBQVMsR0FBR0EsU0FBU3lCLEdBQWdCekIsU0FBU2ppQixPQUFTMmpCLElBQ2xHLEdBQUd0bUIsS0FBS29tQixZQUFZeEIsU0FBUyxHQUFHQSxTQUFTeUIsR0FBZ0J6QixTQUFTMEIsR0FBUXBELFVBQVVJLFNBQVMsVUFDekYsT0FBT3RqQixLQUFLb21CLFlBQVl4QixTQUFTLEdBQUdBLFNBQVN5QixHQUFnQnpCLFNBQVMwQixHQUFRMUIsU0FBUyxHQUFHeGEsSUFTbEgsWUFBQTJNLE9BQUEsV0FDSSxPQUFRLHFDQUVoQixFQWpIQSxDQUF1QyxFQUFBMkYsZSxZQW1IdkN4WixRQUFRNlMsVUFBVTRHLFNBQVMsWUFBYWdLIiwiZmlsZSI6ImtlZXBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTApO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkZsb3dGaWVsZCA9IGV4cG9ydHMuZUNvbnRlbnRUeXBlID0gdm9pZCAwO1xyXG52YXIgRmxvd09iamVjdERhdGFfMSA9IHJlcXVpcmUoXCIuL0Zsb3dPYmplY3REYXRhXCIpO1xyXG52YXIgRmxvd09iamVjdERhdGFBcnJheV8xID0gcmVxdWlyZShcIi4vRmxvd09iamVjdERhdGFBcnJheVwiKTtcclxudmFyIGVDb250ZW50VHlwZTtcclxuKGZ1bmN0aW9uIChlQ29udGVudFR5cGUpIHtcclxuICAgIGVDb250ZW50VHlwZVtlQ29udGVudFR5cGVbXCJ1bmtub3duXCJdID0gMF0gPSBcInVua25vd25cIjtcclxuICAgIGVDb250ZW50VHlwZVtlQ29udGVudFR5cGVbXCJDb250ZW50U3RyaW5nXCJdID0gMV0gPSBcIkNvbnRlbnRTdHJpbmdcIjtcclxuICAgIGVDb250ZW50VHlwZVtlQ29udGVudFR5cGVbXCJDb250ZW50TnVtYmVyXCJdID0gMl0gPSBcIkNvbnRlbnROdW1iZXJcIjtcclxuICAgIGVDb250ZW50VHlwZVtlQ29udGVudFR5cGVbXCJDb250ZW50T2JqZWN0XCJdID0gM10gPSBcIkNvbnRlbnRPYmplY3RcIjtcclxuICAgIGVDb250ZW50VHlwZVtlQ29udGVudFR5cGVbXCJDb250ZW50Qm9vbGVhblwiXSA9IDRdID0gXCJDb250ZW50Qm9vbGVhblwiO1xyXG4gICAgZUNvbnRlbnRUeXBlW2VDb250ZW50VHlwZVtcIkNvbnRlbnRMaXN0XCJdID0gNV0gPSBcIkNvbnRlbnRMaXN0XCI7XHJcbiAgICBlQ29udGVudFR5cGVbZUNvbnRlbnRUeXBlW1wiQ29udGVudFBhc3N3b3JkXCJdID0gNl0gPSBcIkNvbnRlbnRQYXNzd29yZFwiO1xyXG4gICAgZUNvbnRlbnRUeXBlW2VDb250ZW50VHlwZVtcIkNvbnRlbnRDb250ZW50XCJdID0gN10gPSBcIkNvbnRlbnRDb250ZW50XCI7XHJcbiAgICBlQ29udGVudFR5cGVbZUNvbnRlbnRUeXBlW1wiQ29udGVudERhdGVUaW1lXCJdID0gOF0gPSBcIkNvbnRlbnREYXRlVGltZVwiO1xyXG4gICAgZUNvbnRlbnRUeXBlW2VDb250ZW50VHlwZVtcIkNvbnRlbnRFbmNyeXB0ZWRcIl0gPSA5XSA9IFwiQ29udGVudEVuY3J5cHRlZFwiO1xyXG59KShlQ29udGVudFR5cGUgPSBleHBvcnRzLmVDb250ZW50VHlwZSB8fCAoZXhwb3J0cy5lQ29udGVudFR5cGUgPSB7fSkpO1xyXG52YXIgRmxvd0ZpZWxkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmxvd0ZpZWxkKGZpZWxkKSB7XHJcbiAgICAgICAgdGhpcy5Db250ZW50VHlwZSA9IGVDb250ZW50VHlwZS51bmtub3duO1xyXG4gICAgICAgIHRoaXMuRGV2ZWxvcGVyTmFtZSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5UeXBlRWxlbWVudERldmVsb3Blck5hbWUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuVHlwZUVsZW1lbnRJZCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5RGV2ZWxvcGVyTmFtZSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuVmFsdWVFbGVtZW50SWQgPSBcIlwiO1xyXG4gICAgICAgIGlmIChmaWVsZCkge1xyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnRUeXBlID0gZUNvbnRlbnRUeXBlW2ZpZWxkLmNvbnRlbnRUeXBlXTtcclxuICAgICAgICAgICAgdGhpcy5EZXZlbG9wZXJOYW1lID0gZmllbGQuZGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICAgICAgdGhpcy5UeXBlRWxlbWVudERldmVsb3Blck5hbWUgPSBmaWVsZC50eXBlRWxlbWVudERldmVsb3Blck5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRJZCA9IGZpZWxkLnR5cGVFbGVtZW50SWQ7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWUgPSBmaWVsZC50eXBlRWxlbWVudFByb3BlcnR5RGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICAgICAgdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQgPSBmaWVsZC50eXBlRWxlbWVudFByb3BlcnR5SWQ7XHJcbiAgICAgICAgICAgIHRoaXMuVmFsdWVFbGVtZW50SWQgPSBmaWVsZC52YWx1ZUVsZW1lbnRJZDtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLkNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50T2JqZWN0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuVmFsdWUgPSBmaWVsZC5vYmplY3REYXRhID8gbmV3IEZsb3dPYmplY3REYXRhXzEuRmxvd09iamVjdERhdGEoZmllbGQub2JqZWN0RGF0YSkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50TGlzdDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlZhbHVlID0gZmllbGQub2JqZWN0RGF0YSAmJiBmaWVsZC5vYmplY3REYXRhWzBdID8gbmV3IEZsb3dPYmplY3REYXRhQXJyYXlfMS5GbG93T2JqZWN0RGF0YUFycmF5KGZpZWxkLm9iamVjdERhdGEpIDogbmV3IEZsb3dPYmplY3REYXRhQXJyYXlfMS5GbG93T2JqZWN0RGF0YUFycmF5KFtdKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5WYWx1ZSA9IGZpZWxkLmNvbnRlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RmllbGQucHJvdG90eXBlLCBcImNvbnRlbnRUeXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ29udGVudFR5cGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dGaWVsZC5wcm90b3R5cGUsIFwiZGV2ZWxvcGVyTmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dGaWVsZC5wcm90b3R5cGUsIFwidHlwZUVsZW1lbnREZXZlbG9wZXJOYW1lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVHlwZUVsZW1lbnREZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RmllbGQucHJvdG90eXBlLCBcInR5cGVFbGVtZW50SWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5UeXBlRWxlbWVudElkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RmllbGQucHJvdG90eXBlLCBcInR5cGVFbGVtZW50UHJvcGVydHlEZXZlbG9wZXJOYW1lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dGaWVsZC5wcm90b3R5cGUsIFwidHlwZUVsZW1lbnRQcm9wZXJ0eUlkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RmllbGQucHJvdG90eXBlLCBcInZhbHVlRWxlbWVudElkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVmFsdWVFbGVtZW50SWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dGaWVsZC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5WYWx1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBGbG93RmllbGQucHJvdG90eXBlLmlGbG93RmllbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvbnRlbnRWYWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgdmFyIG9iamVjdERhdGEgPSBbXTtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuQ29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudE9iamVjdDpcclxuICAgICAgICAgICAgICAgIHZhciBvZCA9IHRoaXMuVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBvYmplY3REYXRhLnB1c2gob2QuaU9iamVjdERhdGEoKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudExpc3Q6XHJcbiAgICAgICAgICAgICAgICB2YXIgb2RhID0gdGhpcy5WYWx1ZTtcclxuICAgICAgICAgICAgICAgIG9iamVjdERhdGEgPSBvZGEuaUZsb3dPYmplY3REYXRhQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY29udGVudFZhbHVlID0gdGhpcy5WYWx1ZSA/IHRoaXMuVmFsdWUgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvdXRwdXQgPSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBlQ29udGVudFR5cGVbdGhpcy5Db250ZW50VHlwZV0sXHJcbiAgICAgICAgICAgIGNvbnRlbnRWYWx1ZTogY29udGVudFZhbHVlLFxyXG4gICAgICAgICAgICBkZXZlbG9wZXJOYW1lOiB0aGlzLkRldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgIG9iamVjdERhdGE6IG9iamVjdERhdGEsXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50RGV2ZWxvcGVyTmFtZTogdGhpcy5UeXBlRWxlbWVudERldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50SWQ6IHRoaXMuVHlwZUVsZW1lbnRJZCxcclxuICAgICAgICAgICAgdHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWU6IHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50UHJvcGVydHlJZDogdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQsXHJcbiAgICAgICAgICAgIHZhbHVlRWxlbWVudElkOiB0aGlzLlZhbHVlRWxlbWVudElkLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd0ZpZWxkO1xyXG59KCkpO1xyXG5leHBvcnRzLkZsb3dGaWVsZCA9IEZsb3dGaWVsZDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93T2JqZWN0RGF0YSA9IHZvaWQgMDtcclxudmFyIEZsb3dPYmplY3REYXRhUHJvcGVydHlfMSA9IHJlcXVpcmUoXCIuL0Zsb3dPYmplY3REYXRhUHJvcGVydHlcIik7XHJcbnZhciBGbG93T2JqZWN0RGF0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZsb3dPYmplY3REYXRhKGRhdGEpIHtcclxuICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuRXh0ZXJuYWxJZCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5JbnRlcm5hbElkID0gXCJcIjtcclxuICAgICAgICB0aGlzLklzU2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLk9yZGVyID0gMDtcclxuICAgICAgICB0aGlzLlR5cGVFbGVtZW50SWQgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuUHJvcGVydGllcyA9IHt9O1xyXG4gICAgICAgIGlmIChkYXRhICYmIGRhdGFbMF0pIHtcclxuICAgICAgICAgICAgdmFyIG9iamVjdERhdGEgPSBkYXRhWzBdO1xyXG4gICAgICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBvYmplY3REYXRhLmRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMuSW50ZXJuYWxJZCA9IG9iamVjdERhdGEuaW50ZXJuYWxJZDtcclxuICAgICAgICAgICAgdGhpcy5FeHRlcm5hbElkID0gb2JqZWN0RGF0YS5leHRlcm5hbElkO1xyXG4gICAgICAgICAgICB0aGlzLk9yZGVyID0gb2JqZWN0RGF0YS5vcmRlcjtcclxuICAgICAgICAgICAgdGhpcy5Jc1NlbGVjdGVkID0gb2JqZWN0RGF0YS5pc1NlbGVjdGVkO1xyXG4gICAgICAgICAgICB0aGlzLlR5cGVFbGVtZW50SWQgPSBvYmplY3REYXRhLnR5cGVFbGVtZW50SWQ7XHJcbiAgICAgICAgICAgIGlmIChvYmplY3REYXRhLnByb3BlcnRpZXMgJiYgb2JqZWN0RGF0YS5wcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBvYmplY3REYXRhLnByb3BlcnRpZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuUHJvcGVydGllc1twcm9wZXJ0eS5kZXZlbG9wZXJOYW1lXSA9IG5ldyBGbG93T2JqZWN0RGF0YVByb3BlcnR5XzEuRmxvd09iamVjdERhdGFQcm9wZXJ0eShwcm9wZXJ0eSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibnVsbCBkYXRhXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUsIFwiZGV2ZWxvcGVyTmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChkZXZlbG9wZXJOYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuRGV2ZWxvcGVyTmFtZSA9IGRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhLnByb3RvdHlwZSwgXCJleHRlcm5hbElkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuRXh0ZXJuYWxJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGV4dGVybmFsSWQpIHtcclxuICAgICAgICAgICAgdGhpcy5FeHRlcm5hbElkID0gZXh0ZXJuYWxJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd09iamVjdERhdGEucHJvdG90eXBlLCBcImludGVybmFsSWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5JbnRlcm5hbElkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoaW50ZXJuYWxJZCkge1xyXG4gICAgICAgICAgICB0aGlzLkludGVybmFsSWQgPSBpbnRlcm5hbElkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUsIFwiaXNTZWxlY3RlZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLklzU2VsZWN0ZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuSXNTZWxlY3RlZCA9IGlzU2VsZWN0ZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhLnByb3RvdHlwZSwgXCJvcmRlclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLk9yZGVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAob3JkZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5PcmRlciA9IG9yZGVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUsIFwidHlwZUVsZW1lbnRJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlR5cGVFbGVtZW50SWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0eXBlRWxlbWVudElkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRJZCA9IHR5cGVFbGVtZW50SWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhLnByb3RvdHlwZSwgXCJwcm9wZXJ0aWVzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUHJvcGVydGllcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBGbG93T2JqZWN0RGF0YS5uZXdJbnN0YW5jZSA9IGZ1bmN0aW9uIChkZXZlbG9wZXJOYW1lKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgIGRldmVsb3Blck5hbWU6IGRldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgIGV4dGVybmFsSWQ6IFwiXCIsXHJcbiAgICAgICAgICAgIGludGVybmFsSWQ6IG1hbnl3aG8udXRpbHMuZ3VpZCgpLFxyXG4gICAgICAgICAgICBpc1NlbGVjdGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgb3JkZXI6IDAsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IFtdLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudElkOiBcIlwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gbmV3IHRoaXMoW2RhdGFdKTtcclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUuYWRkUHJvcGVydHkgPSBmdW5jdGlvbiAobmV3UHJvcGVydHkpIHtcclxuICAgICAgICB0aGlzLlByb3BlcnRpZXNbbmV3UHJvcGVydHkuZGV2ZWxvcGVyTmFtZV0gPSBuZXdQcm9wZXJ0eTtcclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUucmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuUHJvcGVydGllc1trZXldO1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIChuZXdUeXBlTmFtZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGNsb25lID0gRmxvd09iamVjdERhdGEubmV3SW5zdGFuY2UobmV3VHlwZU5hbWUgfHwgdGhpcy5EZXZlbG9wZXJOYW1lKTtcclxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgbmV3UHJvcCA9IF90aGlzLnByb3BlcnRpZXNba2V5XS5jbG9uZSgpO1xyXG4gICAgICAgICAgICBjbG9uZS5wcm9wZXJ0aWVzW2tleV0gPSBuZXdQcm9wO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjbG9uZTtcclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUuaU9iamVjdERhdGEgPSBmdW5jdGlvbiAoc2VsZWN0ZWQpIHtcclxuICAgICAgICB2YXIgcHJvcHMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXModGhpcy5wcm9wZXJ0aWVzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IF9hW19pXTtcclxuICAgICAgICAgICAgcHJvcHMucHVzaCh0aGlzLnByb3BlcnRpZXNba2V5XS5pRmxvd09iamVjdERhdGFQcm9wZXJ0eSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9iamVjdERhdGEgPSB7XHJcbiAgICAgICAgICAgIGRldmVsb3Blck5hbWU6IHRoaXMuZGV2ZWxvcGVyTmFtZSxcclxuICAgICAgICAgICAgZXh0ZXJuYWxJZDogdGhpcy5leHRlcm5hbElkLFxyXG4gICAgICAgICAgICBpbnRlcm5hbElkOiB0aGlzLmludGVybmFsSWQsXHJcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IHNlbGVjdGVkIHx8IHRoaXMuaXNTZWxlY3RlZCxcclxuICAgICAgICAgICAgb3JkZXI6IHRoaXMub3JkZXIsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHByb3BzLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudElkOiB0aGlzLlR5cGVFbGVtZW50SWRcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBvYmplY3REYXRhO1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhLnByb3RvdHlwZS5pRmxvd09iamVjdERhdGFBcnJheSA9IGZ1bmN0aW9uIChzZWxlY3RlZCkge1xyXG4gICAgICAgIHZhciBvdXRwdXQgPSBbXTtcclxuICAgICAgICBvdXRwdXQucHVzaCh0aGlzLmlPYmplY3REYXRhKHNlbGVjdGVkKSk7XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd09iamVjdERhdGE7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmxvd09iamVjdERhdGEgPSBGbG93T2JqZWN0RGF0YTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93T2JqZWN0RGF0YUFycmF5ID0gZXhwb3J0cy5lU29ydE9yZGVyID0gdm9pZCAwO1xyXG52YXIgRmxvd0ZpZWxkXzEgPSByZXF1aXJlKFwiLi9GbG93RmllbGRcIik7XHJcbnZhciBGbG93T2JqZWN0RGF0YV8xID0gcmVxdWlyZShcIi4vRmxvd09iamVjdERhdGFcIik7XHJcbnZhciBlU29ydE9yZGVyO1xyXG4oZnVuY3Rpb24gKGVTb3J0T3JkZXIpIHtcclxuICAgIGVTb3J0T3JkZXJbZVNvcnRPcmRlcltcImFzY2VuZGluZ1wiXSA9IDBdID0gXCJhc2NlbmRpbmdcIjtcclxuICAgIGVTb3J0T3JkZXJbZVNvcnRPcmRlcltcImRlc2NlbmRpbmdcIl0gPSAxXSA9IFwiZGVzY2VuZGluZ1wiO1xyXG59KShlU29ydE9yZGVyID0gZXhwb3J0cy5lU29ydE9yZGVyIHx8IChleHBvcnRzLmVTb3J0T3JkZXIgPSB7fSkpO1xyXG52YXIgRmxvd09iamVjdERhdGFBcnJheSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZsb3dPYmplY3REYXRhQXJyYXkoYXJyYXkpIHtcclxuICAgICAgICB0aGlzLkl0ZW1zID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGFycmF5IHx8IFtdOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IF9hW19pXTtcclxuICAgICAgICAgICAgdGhpcy5JdGVtcy5wdXNoKG5ldyBGbG93T2JqZWN0RGF0YV8xLkZsb3dPYmplY3REYXRhKFtpdGVtXSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YUFycmF5LnByb3RvdHlwZSwgXCJpdGVtc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkl0ZW1zO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEZsb3dPYmplY3REYXRhQXJyYXkucHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbiAob3JkZXIsIGZpZWxkTmFtZSkge1xyXG4gICAgICAgIGlmIChvcmRlciA9PT0gZVNvcnRPcmRlci5hc2NlbmRpbmcpIHtcclxuICAgICAgICAgICAgaWYgKGZpZWxkTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuSXRlbXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxBO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxCO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoYS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0uY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE51bWJlcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbEEgPSBwYXJzZUZsb2F0KGEucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbEIgPSBwYXJzZUZsb2F0KGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50RGF0ZVRpbWU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxBID0gbmV3IERhdGUoYS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsQiA9IG5ldyBEYXRlKGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsQSA9IGEucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsQiA9IGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHZhbEEgPCB2YWxCOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHZhbEEgPiB2YWxCOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkl0ZW1zLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGZpZWxkTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuSXRlbXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhICYmIGIgJiYgYS5wcm9wZXJ0aWVzICYmIGIucHJvcGVydGllcyAmJiBhLnByb3BlcnRpZXNbZmllbGROYW1lXSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiLnByb3BlcnRpZXNbZmllbGROYW1lXSAmJiBhLnByb3BlcnRpZXNbZmllbGROYW1lXS52YWx1ZSAmJiBiLnByb3BlcnRpZXNbZmllbGROYW1lXS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgYS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWUgPCBiLnByb3BlcnRpZXNbZmllbGROYW1lXS52YWx1ZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBhLnByb3BlcnRpZXNbZmllbGROYW1lXS52YWx1ZSA+IGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5JdGVtcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuYWRkSXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgdGhpcy5JdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhQXJyYXkucHJvdG90eXBlLmNsZWFySXRlbXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5JdGVtcyA9IFtdO1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhQXJyYXkucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjbG9uZSA9IG5ldyBGbG93T2JqZWN0RGF0YUFycmF5KCk7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgY2xvbmUuYWRkSXRlbShvYmouY2xvbmUoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGNsb25lO1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhQXJyYXkucHJvdG90eXBlLmlGbG93T2JqZWN0RGF0YUFycmF5ID0gZnVuY3Rpb24gKHNlbGVjdGVkKSB7XHJcbiAgICAgICAgdmFyIG91dHB1dCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLkl0ZW1zOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgb2QgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKG9kLmlPYmplY3REYXRhKHNlbGVjdGVkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuZ2V0SXRlbVdpdGhQcm9wZXJ0eU5hbWUgPSBmdW5jdGlvbiAoZmluZFByb3BlcnR5LCB3aXRoVmFsdWUsIHJldHVyblByb3BlcnR5KSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuSXRlbXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0gJiYgaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0udmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBjb21wYXJlVG8gPSB3aXRoVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLmNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudFN0cmluZzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBjb21wYXJlVG8udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE51bWJlcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gcGFyc2VGbG9hdChjb21wYXJlVG8udG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRCb29sZWFuOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gY29tcGFyZVRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ucHJvcGVydGllc1tyZXR1cm5Qcm9wZXJ0eV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuZ2V0U2VsZWN0ZWRJdGVtcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVzdWx0cyA9IG5ldyBGbG93T2JqZWN0RGF0YUFycmF5KCk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuSXRlbXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5pc1NlbGVjdGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRzLmFkZEl0ZW0oaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuZ2V0SXRlbVdpdGhQcm9wZXJ0eVZhbHVlID0gZnVuY3Rpb24gKGZpbmRQcm9wZXJ0eSwgd2l0aFZhbHVlKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuSXRlbXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0gJiYgaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0udmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBjb21wYXJlVG8gPSB3aXRoVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLmNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudFN0cmluZzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE51bWJlcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gcGFyc2VGbG9hdChuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRCb29sZWFuOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gY29tcGFyZVRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuZ2V0SW5kZXhPZkl0ZW1XaXRoUHJvcGVydHlWYWx1ZSA9IGZ1bmN0aW9uIChmaW5kUHJvcGVydHksIHdpdGhWYWx1ZSkge1xyXG4gICAgICAgIGZvciAodmFyIHBvcyA9IDA7IHBvcyA8IHRoaXMuaXRlbXMubGVuZ3RoOyBwb3MrKykge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbcG9zXTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldICYmIGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLnZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29tcGFyZVRvID0gd2l0aFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRTdHJpbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gY29tcGFyZVRvLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnROdW1iZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IHBhcnNlRmxvYXQobmV3IFN0cmluZyhjb21wYXJlVG8pLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50Qm9vbGVhbjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gbmV3IFN0cmluZyhjb21wYXJlVG8pLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IGNvbXBhcmVUbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhQXJyYXkucHJvdG90eXBlLnJlbW92ZUl0ZW1XaXRoUHJvcGVydHlWYWx1ZSA9IGZ1bmN0aW9uIChmaW5kUHJvcGVydHksIHdpdGhWYWx1ZSkge1xyXG4gICAgICAgIHZhciBtb2RpZmllZENvdW50ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBwb3MgPSAwOyBwb3MgPCB0aGlzLml0ZW1zLmxlbmd0aDsgcG9zKyspIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLml0ZW1zW3Bvc107XHJcbiAgICAgICAgICAgIGlmIChpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XSAmJiBpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS52YWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBhcmVUbyA9IHdpdGhWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0uY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50U3RyaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IGNvbXBhcmVUby50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBwYXJzZUZsb2F0KG5ldyBTdHJpbmcoY29tcGFyZVRvKS50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudEJvb2xlYW46XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IG5ldyBTdHJpbmcoY29tcGFyZVRvKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBjb21wYXJlVG8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnNwbGljZShwb3MsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkQ291bnQrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbW9kaWZpZWRDb3VudDtcclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YUFycmF5LnByb3RvdHlwZS5yZW1vdmVJdGVtQXRJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIHZhciBtb2RpZmllZENvdW50ID0gMDtcclxuICAgICAgICBpZiAodGhpcy5pdGVtc1tpbmRleF0pIHtcclxuICAgICAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICBtb2RpZmllZENvdW50ID0gaW5kZXg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtb2RpZmllZENvdW50O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGbG93T2JqZWN0RGF0YUFycmF5O1xyXG59KCkpO1xyXG5leHBvcnRzLkZsb3dPYmplY3REYXRhQXJyYXkgPSBGbG93T2JqZWN0RGF0YUFycmF5O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93QmFzZUNvbXBvbmVudCA9IGV4cG9ydHMuZUxvYWRpbmdTdGF0ZSA9IHZvaWQgMDtcclxudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xyXG5yZXF1aXJlKFwiLi9FdmVudE1hbmFnZXJcIik7XHJcbnZhciBGbG93QXR0cmlidXRlXzEgPSByZXF1aXJlKFwiLi9GbG93QXR0cmlidXRlXCIpO1xyXG52YXIgRmxvd0Rpc3BsYXlDb2x1bW5fMSA9IHJlcXVpcmUoXCIuL0Zsb3dEaXNwbGF5Q29sdW1uXCIpO1xyXG52YXIgRmxvd0ZpZWxkXzEgPSByZXF1aXJlKFwiLi9GbG93RmllbGRcIik7XHJcbnZhciBGbG93T2JqZWN0RGF0YV8xID0gcmVxdWlyZShcIi4vRmxvd09iamVjdERhdGFcIik7XHJcbnZhciBGbG93T2JqZWN0RGF0YUFycmF5XzEgPSByZXF1aXJlKFwiLi9GbG93T2JqZWN0RGF0YUFycmF5XCIpO1xyXG52YXIgRmxvd091dGNvbWVfMSA9IHJlcXVpcmUoXCIuL0Zsb3dPdXRjb21lXCIpO1xyXG52YXIgdGhyb3R0bGUgPSByZXF1aXJlKCdsb2Rhc2gudGhyb3R0bGUnKTtcclxudmFyIGVMb2FkaW5nU3RhdGU7XHJcbihmdW5jdGlvbiAoZUxvYWRpbmdTdGF0ZSkge1xyXG4gICAgZUxvYWRpbmdTdGF0ZVtlTG9hZGluZ1N0YXRlW1wicmVhZHlcIl0gPSAwXSA9IFwicmVhZHlcIjtcclxuICAgIGVMb2FkaW5nU3RhdGVbZUxvYWRpbmdTdGF0ZVtcImxvYWRpbmdcIl0gPSAxXSA9IFwibG9hZGluZ1wiO1xyXG4gICAgZUxvYWRpbmdTdGF0ZVtlTG9hZGluZ1N0YXRlW1wic2F2aW5nXCJdID0gMl0gPSBcInNhdmluZ1wiO1xyXG4gICAgZUxvYWRpbmdTdGF0ZVtlTG9hZGluZ1N0YXRlW1wibW92aW5nXCJdID0gM10gPSBcIm1vdmluZ1wiO1xyXG4gICAgZUxvYWRpbmdTdGF0ZVtlTG9hZGluZ1N0YXRlW1wiaW5pdGl0aWFsaXppbmdcIl0gPSA0XSA9IFwiaW5pdGl0aWFsaXppbmdcIjtcclxuICAgIGVMb2FkaW5nU3RhdGVbZUxvYWRpbmdTdGF0ZVtcImluaXRpdGlhbGl6ZWRcIl0gPSA1XSA9IFwiaW5pdGl0aWFsaXplZFwiO1xyXG4gICAgZUxvYWRpbmdTdGF0ZVtlTG9hZGluZ1N0YXRlW1wibW91bnRpbmdcIl0gPSA2XSA9IFwibW91bnRpbmdcIjtcclxuICAgIGVMb2FkaW5nU3RhdGVbZUxvYWRpbmdTdGF0ZVtcIm1vdW50ZWRcIl0gPSA3XSA9IFwibW91bnRlZFwiO1xyXG59KShlTG9hZGluZ1N0YXRlID0gZXhwb3J0cy5lTG9hZGluZ1N0YXRlIHx8IChleHBvcnRzLmVMb2FkaW5nU3RhdGUgPSB7fSkpO1xyXG4vL2V4cG9ydCB0eXBlIGVMb2FkaW5nU3RhdGUgPSBcInJlYWR5XCIgfCBcImxvYWRpbmdcIiB8IFwic2F2aW5nXCIgfCBcIm1vdmluZ1wiIHwgXCJpbml0aXRpYWxpemluZ1wiIHwgXCJpbml0aXRpYWxpemVkXCIgfCBcIm1vdW50aW5nXCIgfCBcIm1vdW50ZWRcIjtcclxudmFyIEZsb3dCYXNlQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEZsb3dCYXNlQ29tcG9uZW50LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRmxvd0Jhc2VDb21wb25lbnQocHJvcHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5GaWVsZHMgPSB7fTtcclxuICAgICAgICBfdGhpcy5BdHRyaWJ1dGVzID0ge307XHJcbiAgICAgICAgX3RoaXMuT3V0Y29tZXMgPSB7fTtcclxuICAgICAgICAvL3NlbmRzIGEgY29sbGFib3JhdGlvbiBtZXNzYWdlIGJ1dCBsaW1pdGVkIHRvIDEgY2FsbCBldmVyeSAxMDBtc1xyXG4gICAgICAgIF90aGlzLnNlbmRDb2xsYWJvcmF0aW9uTWVzc2FnZSA9IHRocm90dGxlKF90aGlzLl9zZW5kQ29sbGFib3JhdGlvbk1lc3NhZ2UsIDEwMCwgbnVsbCk7XHJcbiAgICAgICAgX3RoaXMuRmllbGRzID0ge307XHJcbiAgICAgICAgX3RoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5pbml0aXRpYWxpemluZztcclxuICAgICAgICBfdGhpcy5sb2FkQWxsVmFsdWVzID0gX3RoaXMubG9hZEFsbFZhbHVlcy5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5kb250TG9hZEFsbFZhbHVlcyA9IF90aGlzLmRvbnRMb2FkQWxsVmFsdWVzLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLnVwZGF0ZVZhbHVlcyA9IF90aGlzLnVwZGF0ZVZhbHVlcy5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy50cmlnZ2VyT3V0Y29tZSA9IF90aGlzLnRyaWdnZXJPdXRjb21lLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLkNvbXBvbmVudElkID0gX3RoaXMucHJvcHMuaWQ7XHJcbiAgICAgICAgX3RoaXMuUGFyZW50SWQgPSBfdGhpcy5wcm9wcy5wYXJlbnRJZDtcclxuICAgICAgICBfdGhpcy5GbG93S2V5ID0gX3RoaXMucHJvcHMuZmxvd0tleTtcclxuICAgICAgICBfdGhpcy5BdHRyaWJ1dGVzID0ge307XHJcbiAgICAgICAgX3RoaXMubG9hZE1vZGVsID0gX3RoaXMubG9hZE1vZGVsLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmxvYWRBdHRyaWJ1dGVzID0gX3RoaXMubG9hZEF0dHJpYnV0ZXMuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMubG9hZE91dGNvbWVzID0gX3RoaXMubG9hZE91dGNvbWVzLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLnJlY2VpdmVNZXNzYWdlID0gX3RoaXMucmVjZWl2ZU1lc3NhZ2UuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuZ2V0U3RhdGVWYWx1ZSA9IF90aGlzLmdldFN0YXRlVmFsdWUuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuc2V0U3RhdGVWYWx1ZSA9IF90aGlzLnNldFN0YXRlVmFsdWUuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuZ2V0U3RhdGVWYWx1ZVR5cGUgPSBfdGhpcy5nZXRTdGF0ZVZhbHVlVHlwZS5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5zZW5kQ29sbGFib3JhdGlvbk1lc3NhZ2UgPSBfdGhpcy5zZW5kQ29sbGFib3JhdGlvbk1lc3NhZ2UuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMub25CZWZvcmVTZW5kID0gX3RoaXMub25CZWZvcmVTZW5kLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLm9uRG9uZSA9IF90aGlzLm9uRG9uZS5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5jYWxjdWxhdGVWYWx1ZSA9IF90aGlzLmNhbGN1bGF0ZVZhbHVlLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgX3RoaXMucmVjZWl2ZU1lc3NhZ2UsIGZhbHNlKTtcclxuICAgICAgICBfdGhpcy5sb2FkTW9kZWwoKTtcclxuICAgICAgICBfdGhpcy5sb2FkQXR0cmlidXRlcygpO1xyXG4gICAgICAgIF90aGlzLmxvYWRPdXRjb21lcygpO1xyXG4gICAgICAgIHZhciBiYXNlVXJsID0gXCJcIjtcclxuICAgICAgICBpZiAoKCFtYW55d2hvLnNldHRpbmdzLmdsb2JhbCgncGxhdGZvcm0udXJpJykpICYmIChtYW55d2hvLnNldHRpbmdzLmdsb2JhbCgncGxhdGZvcm0udXJpJykubGVuZ3RoIDw9IDApKSB7XHJcbiAgICAgICAgICAgIGJhc2VVcmwgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luIHx8ICdodHRwczovL2Zsb3cubWFueXdoby5jb20nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfdGhpcy5TdGF0ZUlkID0gbWFueXdoby51dGlscy5leHRyYWN0U3RhdGVJZChfdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBfdGhpcy5UZW5hbnRJZCA9IG1hbnl3aG8udXRpbHMuZXh0cmFjdFRlbmFudElkKF90aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgIF90aGlzLmludm9rZXVybCA9IGJhc2VVcmwgKyBcIi9hcGkvcnVuLzEvc3RhdGUvXCIgKyBfdGhpcy5TdGF0ZUlkO1xyXG4gICAgICAgIF90aGlzLnVybCA9IGJhc2VVcmwgKyBcIi9hcGkvcnVuLzEvc3RhdGUvXCIgKyBfdGhpcy5TdGF0ZUlkICsgXCIvdmFsdWVzXCI7XHJcbiAgICAgICAgX3RoaXMudXNlcnVybCA9IGJhc2VVcmwgKyBcIi9hcGkvcnVuLzEvc3RhdGUvXCIgKyBfdGhpcy5TdGF0ZUlkICsgXCIvdmFsdWVzLzAzZGM0MWRkLTFjNmItNGIzMy1iZjYxLWNiZDFkMDc3OGZmZlwiO1xyXG4gICAgICAgIF90aGlzLnZhbHVldXJsID0gYmFzZVVybCArIFwiL2FwaS9ydW4vMS9zdGF0ZS9cIiArIF90aGlzLlN0YXRlSWQgKyBcIi92YWx1ZXMvbmFtZVwiO1xyXG4gICAgICAgIF90aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUuaW5pdGl0aWFsaXplZDtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcInRlbmFudElkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVGVuYW50SWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJzdGF0ZUlkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuU3RhdGVJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcImZsb3dLZXlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5GbG93S2V5O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiY29tcG9uZW50SWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Db21wb25lbnRJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcInBhcmVudElkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUGFyZW50SWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJpc1JlYWR5XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuTG9hZGluZ1N0YXRlID09PSBlTG9hZGluZ1N0YXRlLnJlYWR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwibG9hZGluZ1N0YXRlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuTG9hZGluZ1N0YXRlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwib3V0Y29tZXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5PdXRjb21lcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJpYnV0ZXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5BdHRyaWJ1dGVzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiZmllbGRzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuRmllbGRzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwibW9kZWxcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Nb2RlbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcInVzZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Vc2VyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiam9pblVSSVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcImlzRGVzaWduVGltZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLklzRGVzaWduVGltZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcImF1dGhlbnRpY2F0aW9uVG9rZW5cIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS5mbG93VXNlcikuYXV0aGVudGljYXRpb25Ub2tlbjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlID0gZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUsIGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXS52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWUgfHwgJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5vbkJlZm9yZVNlbmQgPSBmdW5jdGlvbiAoeGhyLCByZXF1ZXN0KSB7XHJcbiAgICAgICAgaWYgKHJlcXVlc3QpIHtcclxuICAgICAgICAgICAgdmFyIG9jID0gdGhpcy5nZXRPdXRjb21lQnlJZChyZXF1ZXN0Lm1hcEVsZW1lbnRJbnZva2VSZXF1ZXN0LnNlbGVjdGVkT3V0Y29tZUlkKTtcclxuICAgICAgICAgICAgdmFyIG9jdCA9IG1hbnl3aG8uZXZlbnRNYW5hZ2VyLm91dGNvbWVCZWluZ1RyaWdnZXJlZDtcclxuICAgICAgICAgICAgaWYgKG9jKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW9jdCB8fCBvY3QuaWQgIT09IG9jLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFueXdoby5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkID0gb2M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLm91dGNvbWVCZWluZ1RyaWdnZXJlZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gdGhpcyB0YWtlcyBhIHN0cmluZyBjb250YWluaW5nIGVpdGhlciBhIGxpdGVyYWwgdmFsdWUgb3IgdGhlIG5hbWUgb2YgYSBmaWVsZCBzdXJyb3VuZGVkIHdpdGgge3suLn19XHJcbiAgICAvLyBpZiBpdCdzIGxpdGVyYWwgaXQganVzdCByZXR1cm5zIG90aGVyd2lzZSBpdCBnZXRzIHRoZSB2YWx1ZS5cclxuICAgIC8vIGl0IGNhbiBnbyBkb3duIGxldmVscyBsaWtlIHZhbC5hdHRyaWJ1dGUuc3VidmFsIGV0Y1xyXG4gICAgLy8gTk9URTogdGhlcmUncyBhIGdvb2QgY2hhbmNlIHRpbWluZyB3aXNlIHRoYXQgdGhlcmUgYXJlIG5vIGZpZWxkcyB5ZXRcclxuICAgIC8vIHNvIHdlIGp1c3QgcmV0dXJuIHZhbHVlIGlmIGFueSBlcnJvcnMgYXJlIGVuY291bnRlcmVkIGxpa2UgdmFsID09PSBudWxsXHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuY2FsY3VsYXRlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAvLyBpcyBpdCByZXBsYWNlYWJsZT8gIHN0YXJ0cyBhbmQgZW5kcyB3aXRoIHt7fX1cclxuICAgICAgICBpZiAodmFsdWUuc3RhcnRzV2l0aCgne3snKSAmJiB2YWx1ZS5lbmRzV2l0aCgnfX0nKSkge1xyXG4gICAgICAgICAgICAvLyB2YWx1ZSBwb2ludHMgdG8gYSBmaWVsZCwgZ2V0IGl0J3MgdmFsdWVcclxuICAgICAgICAgICAgdmFyIHN0cmlwcGVkID0gdmFsdWUucmVwbGFjZSgne3snLCAnJyk7XHJcbiAgICAgICAgICAgIHN0cmlwcGVkID0gc3RyaXBwZWQucmVwbGFjZSgnfX0nLCAnJyk7XHJcbiAgICAgICAgICAgIHZhciB2YWwgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSAnJztcclxuICAgICAgICAgICAgLy8gaXQgY291bGQgYmUgYSBzdWIgZmllbGQgd2l0aCBwYXJlbnQuY2hpbGRcclxuICAgICAgICAgICAgdmFyIHN0cmlwcGVkQml0cyA9IHN0cmlwcGVkLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgIC8vIGxvb3Agb3ZlciBiaXRzXHJcbiAgICAgICAgICAgIGZvciAodmFyIHBvcyA9IDA7IHBvcyA8IHN0cmlwcGVkQml0cy5sZW5ndGg7IHBvcysrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBwb3MgMCB3aWxsIHNldCB2YWwgZm9yIGFueSBjaGlsZCBlbGVtZW50c1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYoIXRoaXMuZmllbGRzW3N0cmlwcGVkQml0c1twb3NdXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgIGF3YWl0IHRoaXMubG9hZFZhbHVlKHN0cmlwcGVkQml0c1twb3NdKTtcclxuICAgICAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgICAgICAgICB2YWwgPSB0aGlzLmZpZWxkc1tzdHJpcHBlZEJpdHNbcG9zXV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1RoZSBWYWx1ZSBbJyArIHN0cmlwcGVkQml0c1twb3NdICsgJ10gd2FzIG5vdCBmb3VuZCwgaGF2ZSB5b3UgaW5jbHVkZWQgaXQgaW4geW91ciBmbG93Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbC5Db250ZW50VHlwZSAhPT0gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRPYmplY3QgJiYgdmFsLkNvbnRlbnRUeXBlICE9PSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudExpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpZCBiaXRzIDAgZ2V0IGEgdmFsP1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZSA9IHZhbC52YWx1ZS5wcm9wZXJ0aWVzW3N0cmlwcGVkQml0c1twb3NdXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZS5jb250ZW50VHlwZSA9PT0gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRPYmplY3QgfHwgZWxlLmNvbnRlbnRUeXBlID09PSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudExpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSB2YWwudmFsdWUucHJvcGVydGllc1tzdHJpcHBlZEJpdHNbcG9zXV0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB2YWwudmFsdWUucHJvcGVydGllc1tzdHJpcHBlZEJpdHNbcG9zXV0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5vbkRvbmUgPSBmdW5jdGlvbiAoeGhyLCByZXF1ZXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgb3V0Y29tZV8xO1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAvL3RoaXMgaGFuZGxlcyB0aGUgbmV3IHN1YmZsb3cgY29uY2VwdC5cclxuICAgICAgICAgICAgICAgIC8vdGhlIGZsb3cgY291bGQgaGF2ZSBtb3ZlZCB0byBhIHN1YiBmbG93IGFuZCBpZiBzbyB3ZSBuZWVkIHRvIHJlbG9hZCBhbGwgZGF0YVxyXG4gICAgICAgICAgICAgICAgaWYgKHhoci5pbnZva2VUeXBlID09PSAnRk9SV0FSRCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYW55d2hvLm1vZGVsLnBhcnNlRW5naW5lUmVzcG9uc2UoeGhyLCB0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZE1vZGVsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkQXR0cmlidXRlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZE91dGNvbWVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9hd2FpdCB0aGlzLnByZXNlcnZlU3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChtYW55d2hvLmV2ZW50TWFuYWdlci5vdXRjb21lQmVpbmdUcmlnZ2VyZWQgJiYgbWFueXdoby5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBvdXRjb21lXzEgPSBtYW55d2hvLmV2ZW50TWFuYWdlci5vdXRjb21lQmVpbmdUcmlnZ2VyZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMobWFueXdoby5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0ciwgdGFyZ2V0VXJsLCBfYSwgdXJsLCB3bmQsIHVybCwgd25kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyID0gbWFueXdoby5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkLmF0dHJpYnV0ZXNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBhdHRyLm5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImF1dG9jbG9zZVwiOiByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhdXRvb3BlblwiOiByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhdXRvbmF2XCI6IHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImF1dG9tb3ZlXCI6IHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImF1dG9wcmludFwiOiByZXR1cm4gWzMgLypicmVhayovLCAxMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMTFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHIudmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0cnVlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDExXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFVybCA9IG91dGNvbWVfMS5hdHRyaWJ1dGVzLkF1dG9PcGVuVXJsIHx8IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGFyZ2V0VXJsICYmIHRhcmdldFVybC52YWx1ZS5sZW5ndGggPiAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY2FsY3VsYXRlVmFsdWUodGFyZ2V0VXJsLnZhbHVlKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHduZCA9IHdpbmRvdy5vcGVuKHVybCwgXCJfYmxhbmtcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJObyAnQXV0b09wZW5VcmwnIHNwZWNpZmllZCBpbiB0aGUgb3V0Y29tZSdzIGF0dHJpYnV0ZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMyAvKmJyZWFrKi8sIDExXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFVybCA9IG91dGNvbWVfMS5hdHRyaWJ1dGVzLkF1dG9OYXZVcmwgfHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0YXJnZXRVcmwgJiYgdGFyZ2V0VXJsLnZhbHVlLmxlbmd0aCA+IDApKSByZXR1cm4gWzMgLypicmVhayovLCA4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jYWxjdWxhdGVWYWx1ZSh0YXJnZXRVcmwudmFsdWUpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd25kID0gd2luZG93Lm9wZW4odXJsLCBcIl9ibGFua1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIk5vICdBdXRvTmF2VXJsJyBzcGVjaWZpZWQgaW4gdGhlIG91dGNvbWUncyBhdHRyaWJ1dGVzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5OiByZXR1cm4gWzMgLypicmVhayovLCAxMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDExXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pOyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vdHVybiBvZiBtb3ZpbmcgZmxhZ1xyXG4gICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLnJlYWR5O1xyXG4gICAgICAgICAgICAgICAgbWFueXdoby5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUubW91bnRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkIG91dGNvbWUgbWFuYWdlciBzdHVmZlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5hZGREb25lTGlzdGVuZXIodGhpcy5vbkRvbmUsIHRoaXMuY29tcG9uZW50SWQgKyBcIl9jb3JlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5hZGRCZWZvcmVTZW5kTGlzdGVuZXIodGhpcy5vbkJlZm9yZVNlbmQsIHRoaXMuY29tcG9uZW50SWQgKyBcIl9jb3JlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVzZXJ2ZSBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnByZXNlcnZlU3RhdGUoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVzZXJ2ZSBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3VudGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnV0aWxzLnJlbW92ZUxvYWRpbmdJbmRpY2F0b3IoJ2xvYWRlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUucHJlc2VydmVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3VudGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zZXRTdGF0ZVZhbHVlKHRoaXMuZ2V0U3RhdGVWYWx1ZSgpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZsb3dNb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMuQ29tcG9uZW50SWQsIHRoaXMuRmxvd0tleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZsb3dTdGF0ZSA9IG1hbnl3aG8uc3RhdGUuZ2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIHRoaXMuZmxvd0tleSkgfHwge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGZsb3dNb2RlbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGZsb3dNb2RlbC5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NvbnRlbnRPYmplY3QnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb2JqZWN0RGF0YTogYW55O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmxvd1N0YXRlLm9iamVjdERhdGEgJiYgZmxvd1N0YXRlLm9iamVjdERhdGFbMF0gJiYgZmxvd1N0YXRlLm9iamVjdERhdGFbMF0ucHJvcGVydGllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhID0gZmxvd1N0YXRlLm9iamVjdERhdGFbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmplY3REYXRhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb2Q6IEZsb3dPYmplY3REYXRhICA9IG5ldyBGbG93T2JqZWN0RGF0YShbb2JqZWN0RGF0YV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVZhbHVlKG9kLHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZihmbG93TW9kZWwub2JqZWN0RGF0YSAmJiBmbG93TW9kZWwub2JqZWN0RGF0YVswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgb2JqZWN0RGF0YSA9IGZsb3dNb2RlbC5vYmplY3REYXRhWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Vsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3VudGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vb2JqZWN0RGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqZWN0RGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xldCBvZDogRmxvd09iamVjdERhdGEgID0gbmV3IEZsb3dPYmplY3REYXRhKFtvYmplY3REYXRhXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYXdhaXQgdGhpcy5zZXRTdGF0ZVZhbHVlKG9kLHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NvbnRlbnRMaXN0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpc3REYXRhOiBhbnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmbG93U3RhdGUub2JqZWN0RGF0YSAmJiBmbG93U3RhdGUub2JqZWN0RGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0RGF0YSA9IGZsb3dTdGF0ZS5vYmplY3REYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdERhdGEgPSBmbG93TW9kZWwub2JqZWN0RGF0YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3REYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShsaXN0RGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldFN0YXRlVmFsdWUobmV3IEZsb3dPYmplY3REYXRhQXJyYXkobGlzdERhdGEpLHRydWUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVZhbHVlKGZsb3dNb2RlbC5jb250ZW50VmFsdWUsdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3VudGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLnJlbW92ZUJlZm9yZVNlbmRMaXN0ZW5lcih0aGlzLmNvbXBvbmVudElkICsgXCJfY29yZVwiKTtcclxuICAgICAgICAgICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLnJlbW92ZURvbmVMaXN0ZW5lcih0aGlzLmNvbXBvbmVudElkICsgXCJfY29yZVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5sb2FkT3V0Y29tZSA9IGZ1bmN0aW9uIChvdXRjb21lSWQpIHtcclxuICAgICAgICBpZiAob3V0Y29tZUlkKSB7XHJcbiAgICAgICAgICAgIHZhciBvdXRjb21lID0gbWFueXdoby5tb2RlbC5nZXRPdXRjb21lKG91dGNvbWVJZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgaWYgKG91dGNvbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuT3V0Y29tZXNbb3V0Y29tZS5kZXZlbG9wZXJOYW1lXSA9IG5ldyBGbG93T3V0Y29tZV8xLkZsb3dPdXRjb21lKG91dGNvbWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuT3V0Y29tZXNbb3V0Y29tZS5kZXZlbG9wZXJOYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUubG9hZE91dGNvbWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuT3V0Y29tZXMgPSB7fTtcclxuICAgICAgICAvLyBhZGQgdGhlIG91dGNvbWVzIGZyb20gdGhpcyBjb21wb25lbnRcclxuICAgICAgICB2YXIgb3V0cyA9IG1hbnl3aG8ubW9kZWwuZ2V0T3V0Y29tZXModGhpcy5wcm9wcy5pZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG91dHNfMSA9IG91dHM7IF9pIDwgb3V0c18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgb3V0Y29tZSA9IG91dHNfMVtfaV07XHJcbiAgICAgICAgICAgIHRoaXMuT3V0Y29tZXNbb3V0Y29tZS5kZXZlbG9wZXJOYW1lXSA9IG5ldyBGbG93T3V0Y29tZV8xLkZsb3dPdXRjb21lKG91dGNvbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhbmQgdGhlIG9uZXMgZnJvbSB0aGUgcGFyZW50IHBhZ2VcclxuICAgICAgICBvdXRzID0gbWFueXdoby5tb2RlbC5nZXRPdXRjb21lcygnJywgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBmb3IgKHZhciBfYSA9IDAsIG91dHNfMiA9IG91dHM7IF9hIDwgb3V0c18yLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICB2YXIgb3V0Y29tZSA9IG91dHNfMltfYV07XHJcbiAgICAgICAgICAgIHRoaXMuT3V0Y29tZXNbb3V0Y29tZS5kZXZlbG9wZXJOYW1lXSA9IG5ldyBGbG93T3V0Y29tZV8xLkZsb3dPdXRjb21lKG91dGNvbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuZ2V0T3V0Y29tZUJ5SWQgPSBmdW5jdGlvbiAob3V0Y29tZUlkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgb2M7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5vdXRjb21lcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5vdXRjb21lc1trZXldLmlkID09PSBvdXRjb21lSWQpIHtcclxuICAgICAgICAgICAgICAgIG9jID0gX3RoaXMub3V0Y29tZXNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICghb2MpIHtcclxuICAgICAgICAgICAgb2MgPSB0aGlzLmxvYWRPdXRjb21lKG91dGNvbWVJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvYztcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUubG9hZEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG1vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5Db21wb25lbnRJZCwgdGhpcy5GbG93S2V5KTtcclxuICAgICAgICBpZiAobW9kZWwpIHtcclxuICAgICAgICAgICAgLy8gYWRkIHRoZSBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIHZhciBhdHRycyA9IG1vZGVsLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgICAgIGlmIChhdHRycykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKGF0dHJzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQXR0cmlidXRlc1trZXldID0gbmV3IEZsb3dBdHRyaWJ1dGVfMS5GbG93QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmxvYWRNb2RlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLkNvbXBvbmVudElkLCB0aGlzLkZsb3dLZXkpO1xyXG4gICAgICAgIGlmIChtb2RlbCkge1xyXG4gICAgICAgICAgICB0aGlzLk1vZGVsID0ge1xyXG4gICAgICAgICAgICAgICAgY29udGVudFR5cGU6IG1vZGVsLmNvbnRlbnRUeXBlLFxyXG4gICAgICAgICAgICAgICAgY29udGVudDogbW9kZWwuY29udGVudCxcclxuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2U6IG5ldyBGbG93T2JqZWN0RGF0YUFycmF5XzEuRmxvd09iamVjdERhdGFBcnJheShbXSksXHJcbiAgICAgICAgICAgICAgICBkZXZlbG9wZXJOYW1lOiBtb2RlbC5kZXZlbG9wZXJOYW1lLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheUNvbHVtbnM6IFtdLFxyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogbW9kZWwuaXNFbmFibGVkLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBtb2RlbC5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBoZWxwSW5mbzogbW9kZWwuaGVscEluZm8sXHJcbiAgICAgICAgICAgICAgICBoaW50SW5mbzogbW9kZWwuaGludFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgam9pblVyaTogdGhpcy5qb2luVVJJLFxyXG4gICAgICAgICAgICAgICAgbGFiZWw6IG1vZGVsLmxhYmVsLFxyXG4gICAgICAgICAgICAgICAgbWF4U2l6ZTogbW9kZWwubWF4U2l6ZSxcclxuICAgICAgICAgICAgICAgIG11bHRpU2VsZWN0OiBtb2RlbC5pc011bHRpU2VsZWN0LFxyXG4gICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFtb2RlbC5pc0VkaXRhYmxlLFxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IG1vZGVsLmlzUmVxdWlyZWQsXHJcbiAgICAgICAgICAgICAgICBzaXplOiBtb2RlbC5zaXplLFxyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvbk1lc3NhZ2U6IG1vZGVsLnZhbGlkYXRpb25NZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgdmlzaWJsZTogbW9kZWwuaXNWaXNpYmxlLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IG1vZGVsLndpZHRoLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBnZXQgdGhlIGRhdGFzb3VyY2UgdmFsdWUgbmFtZVxyXG4gICAgICAgICAgICB2YXIgZHMgPSBtb2RlbC5vYmplY3REYXRhO1xyXG4gICAgICAgICAgICBpZiAoZHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgZHNfMSA9IGRzOyBfaSA8IGRzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9kID0gZHNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Nb2RlbC5kYXRhU291cmNlLmFkZEl0ZW0obmV3IEZsb3dPYmplY3REYXRhXzEuRmxvd09iamVjdERhdGEoW29kXSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBjb2xzID0gbW9kZWwuY29sdW1ucztcclxuICAgICAgICAgICAgaWYgKGNvbHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgY29sc18xID0gY29sczsgX2EgPCBjb2xzXzEubGVuZ3RoOyBfYSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbCA9IGNvbHNfMVtfYV07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Nb2RlbC5kaXNwbGF5Q29sdW1ucy5wdXNoKG5ldyBGbG93RGlzcGxheUNvbHVtbl8xLkZsb3dEaXNwbGF5Q29sdW1uKGNvbCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5sb2FkVmFsdWUgPSBmdW5jdGlvbiAodmFsdWVOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5sb2FkaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNhbGxSZXF1ZXN0T2xkKHRoaXMudmFsdWV1cmwgKyBcIi9cIiArIHZhbHVlTmFtZSwgJ0dFVCcsIHt9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkZpZWxkc1t2YWx1ZS5kZXZlbG9wZXJOYW1lXSA9IG5ldyBGbG93RmllbGRfMS5GbG93RmllbGQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5yZWFkeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMuRmllbGRzW3ZhbHVlLmRldmVsb3Blck5hbWVdXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmdldFJlc3VsdEJvZHlUZXh0ID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzcG9uc2UudGV4dCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0LnN0YXJ0c1dpdGgoXCJcXFwiXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5zdWJzdHIoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHQuZW5kc1dpdGgoXCJcXFwiXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5zdWJzdHIoMCwgdGV4dC5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5jYWxsUmVxdWVzdCA9IGZ1bmN0aW9uICh1cmwsIG1ldGhvZCwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdHMsIHJlcXVlc3Q7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Lm1ldGhvZCA9IG1ldGhvZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogdGhpcy5hdXRoZW50aWNhdGlvblRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJNYW55V2hvVGVuYW50XCI6IHRoaXMudGVuYW50SWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5jcmVkZW50aWFscyA9IFwic2FtZS1vcmlnaW5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJQT1NUXCIgfHwgbWV0aG9kID09PSBcIlBVVFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmJvZHkgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoKHVybCwgcmVxdWVzdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganNvbiwgZXJyb3JUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5nZXRSZXN1bHRCb2R5VGV4dChyZXNwb25zZSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5wYXJzZShqc29uKS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvYWRlZCBWYWx1ZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdHNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmdldFJlc3VsdEJvZHlUZXh0KHJlc3BvbnNlKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JUZXh0ID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuJ3QgbG9hZCB2YWx1ZXMgLSBcIiArIGVycm9yVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdHNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5jYWxsUmVxdWVzdE9sZCA9IGZ1bmN0aW9uICh1cmwsIG1ldGhvZCwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG91dHB1dCwgeGhyO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBtYW55d2hvLmNvbm5lY3Rpb24ucmVxdWVzdCh0aGlzLCBudWxsLCB1cmwsIG1ldGhvZCwgdGhpcy5UZW5hbnRJZCwgdGhpcy5TdGF0ZUlkLCBtYW55d2hvLnN0YXRlLmdldEF1dGhlbnRpY2F0aW9uVG9rZW4odGhpcy5GbG93S2V5KSwgZGF0YSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgeGhyXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmxvYWRBbGxWYWx1ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWVzLCB1c2VydmFsLCB1LCBwcm9wcztcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLmxvYWRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuRmllbGRzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY2FsbFJlcXVlc3RPbGQodGhpcy51cmwsICdHRVQnLCB7fSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAodmFsdWVzIHx8IFtdKS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5GaWVsZHNbdmFsdWUuZGV2ZWxvcGVyTmFtZV0gPSBuZXcgRmxvd0ZpZWxkXzEuRmxvd0ZpZWxkKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY2FsbFJlcXVlc3RPbGQodGhpcy51c2VydXJsLCAnR0VUJywge30pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJ2YWwgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFueXdoby5jb25uZWN0aW9uLnJlcXVlc3QodGhpcywgXCJcIiwgdGhpcy51c2VydXJsICwgJ0dFVCcsIHRoaXMuVGVuYW50SWQsIHRoaXMuU3RhdGVJZCwgbWFueXdoby5zdGF0ZS5nZXRBdXRoZW50aWNhdGlvblRva2VuKHRoaXMuRmxvd0tleSksIHt9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJ2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBuZXcgRmxvd0ZpZWxkXzEuRmxvd0ZpZWxkKHVzZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMgPSB1LnZhbHVlLnByb3BlcnRpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlVzZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0b3J5SWQ6IHByb3BzWydEaXJlY3RvcnkgSWQnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RvcnlOYW1lOiBwcm9wc1snRGlyZWN0b3J5IE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogcHJvcHNbJ0VtYWlsJ10udmFsdWUgfHwgJ21hcmsnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogcHJvcHNbJ0ZpcnN0IE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cElkOiBwcm9wc1snUHJpbWFyeSBHcm91cCBJZCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwTmFtZTogcHJvcHNbJ1ByaW1hcnkgR3JvdXAgTmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwcm9wc1snVXNlciBJRCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlwQWRkcmVzczogcHJvcHNbJ0lQIEFkZHJlc3MnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZTogcHJvcHNbJ0xhbmd1YWdlJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6IHByb3BzWydMYXN0IE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogcHJvcHNbJ0xvY2F0aW9uJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZUlkOiBwcm9wc1snUm9sZSBJZCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lOiBwcm9wc1snUm9sZSBOYW1lJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBwcm9wc1snU3RhdHVzJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck5hbWU6IHByb3BzWydVc2VybmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUucmVhZHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5kb250TG9hZEFsbFZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB1c2VydmFsLCB1LCBwcm9wcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLmxvYWRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY2FsbFJlcXVlc3RPbGQodGhpcy51c2VydXJsLCAnR0VUJywge30pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJ2YWwgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFueXdoby5jb25uZWN0aW9uLnJlcXVlc3QodGhpcywgXCJcIiwgdGhpcy51c2VydXJsICwgJ0dFVCcsIHRoaXMuVGVuYW50SWQsIHRoaXMuU3RhdGVJZCwgbWFueXdoby5zdGF0ZS5nZXRBdXRoZW50aWNhdGlvblRva2VuKHRoaXMuRmxvd0tleSksIHt9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJ2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBuZXcgRmxvd0ZpZWxkXzEuRmxvd0ZpZWxkKHVzZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMgPSB1LnZhbHVlLnByb3BlcnRpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlVzZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0b3J5SWQ6IHByb3BzWydEaXJlY3RvcnkgSWQnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RvcnlOYW1lOiBwcm9wc1snRGlyZWN0b3J5IE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogcHJvcHNbJ0VtYWlsJ10udmFsdWUgfHwgJ21hcmsnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogcHJvcHNbJ0ZpcnN0IE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cElkOiBwcm9wc1snUHJpbWFyeSBHcm91cCBJZCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwTmFtZTogcHJvcHNbJ1ByaW1hcnkgR3JvdXAgTmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwcm9wc1snVXNlciBJRCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlwQWRkcmVzczogcHJvcHNbJ0lQIEFkZHJlc3MnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZTogcHJvcHNbJ0xhbmd1YWdlJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6IHByb3BzWydMYXN0IE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogcHJvcHNbJ0xvY2F0aW9uJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZUlkOiBwcm9wc1snUm9sZSBJZCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lOiBwcm9wc1snUm9sZSBOYW1lJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBwcm9wc1snU3RhdHVzJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck5hbWU6IHByb3BzWydVc2VybmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUucmVhZHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5nZXRTdGF0ZVZhbHVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmbG93U3RhdGUgPSBtYW55d2hvLnN0YXRlLmdldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCB0aGlzLmZsb3dLZXkpIHx8IHt9O1xyXG4gICAgICAgIHZhciBmbG93TW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLkNvbXBvbmVudElkLCB0aGlzLkZsb3dLZXkpO1xyXG4gICAgICAgIGlmIChmbG93TW9kZWwpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChmbG93TW9kZWwuY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NvbnRlbnRPYmplY3QnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmbG93U3RhdGUub2JqZWN0RGF0YSAmJiBmbG93U3RhdGUub2JqZWN0RGF0YVswXSAmJiBmbG93U3RhdGUub2JqZWN0RGF0YVswXS5wcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG93T2JqZWN0RGF0YV8xLkZsb3dPYmplY3REYXRhKFtmbG93U3RhdGUub2JqZWN0RGF0YVswXV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkTW9kZWxJdGVtcyA9IHRoaXMubW9kZWwuZGF0YVNvdXJjZS5nZXRTZWxlY3RlZEl0ZW1zKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZE1vZGVsSXRlbXMuaXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkTW9kZWxJdGVtcy5pdGVtc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdDb250ZW50TGlzdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsb3dTdGF0ZS5vYmplY3REYXRhICYmIGZsb3dTdGF0ZS5vYmplY3REYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG93T2JqZWN0RGF0YUFycmF5XzEuRmxvd09iamVjdERhdGFBcnJheShmbG93U3RhdGUub2JqZWN0RGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRNb2RlbEl0ZW1zID0gdGhpcy5tb2RlbC5kYXRhU291cmNlLmdldFNlbGVjdGVkSXRlbXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkTW9kZWxJdGVtcy5pdGVtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRNb2RlbEl0ZW1zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZsb3dTdGF0ZS5jb250ZW50VmFsdWUgPyBmbG93U3RhdGUuY29udGVudFZhbHVlIDogXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmdldFN0YXRlVmFsdWVUeXBlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmbG93TW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLkNvbXBvbmVudElkLCB0aGlzLkZsb3dLZXkpO1xyXG4gICAgICAgIHZhciBjdCA9IGZsb3dNb2RlbC5jb250ZW50VHlwZTtcclxuICAgICAgICByZXR1cm4gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlW2N0XTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuc2V0U3RhdGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgaWdub3JlU3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvbGRTdGF0ZSwgZmxvd01vZGVsLCBmbG93U3RhdGUsIG5ld1N0YXRlLCBvYmplY3REYXRhLCBvYmplY3REYXRhQXJyYXk7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLkxvYWRpbmdTdGF0ZSA9PT0gZUxvYWRpbmdTdGF0ZS5tb3VudGluZyB8fCB0aGlzLkxvYWRpbmdTdGF0ZSA9PT0gZUxvYWRpbmdTdGF0ZS5yZWFkeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9sZFN0YXRlID0gdGhpcy5sb2FkaW5nU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLnNhdmluZztcclxuICAgICAgICAgICAgICAgICAgICBmbG93TW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLkNvbXBvbmVudElkLCB0aGlzLkZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZsb3dTdGF0ZSA9IG1hbnl3aG8uc3RhdGUuZ2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIHRoaXMuZmxvd0tleSkgfHwge307XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmbG93TW9kZWwuY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQ29udGVudE9iamVjdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmlzU2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdERhdGEgPSB2YWx1ZS5pRmxvd09iamVjdERhdGFBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdERhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iamVjdERhdGEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlID0geyBcIm9iamVjdERhdGFcIjogb2JqZWN0RGF0YSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZXdTdGF0ZSA9IHsgb2JqZWN0RGF0YSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby5zdGF0ZS5zZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgbmV3U3RhdGUsIHRoaXMuZmxvd0tleSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQ29udGVudExpc3QnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0RGF0YUFycmF5ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdERhdGFBcnJheSA9IHZhbHVlLmlGbG93T2JqZWN0RGF0YUFycmF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0RGF0YUFycmF5ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmplY3REYXRhQXJyYXkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlID0geyBcIm9iamVjdERhdGFcIjogb2JqZWN0RGF0YUFycmF5IH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCBuZXdTdGF0ZSwgdGhpcy5mbG93S2V5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdDb250ZW50RGF0ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHsgXCJjb250ZW50VmFsdWVcIjogdmFsdWUudG9JU09TdHJpbmcoKSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby5zdGF0ZS5zZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgbmV3U3RhdGUsIHRoaXMuZmxvd0tleSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Zsb3dTdGF0ZS5jb250ZW50VmFsdWUgPSAodmFsdWUgYXMgRGF0ZSkudG9JU09TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB7IFwiY29udGVudFZhbHVlXCI6IHZhbHVlIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCBuZXdTdGF0ZSwgdGhpcy5mbG93S2V5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZmxvd1N0YXRlLmNvbnRlbnRWYWx1ZSA9IHZhbHVlIGFzIHN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IG9sZFN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFueXdoby5jb21wb25lbnQuaGFuZGxlRXZlbnQodGhpcyxtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLkNvbXBvbmVudElkLHRoaXMuRmxvd0tleSksdGhpcy5GbG93S2V5LG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vYXdhaXQgbWFueXdoby5lbmdpbmUuc3luYyh0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYW55d2hvLmNvbGxhYm9yYXRpb24uaXNJbml0aWFsaXplZCh0aGlzLmZsb3dLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFueXdoby5jb2xsYWJvcmF0aW9uLnN5bmModGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy91cGRhdGVGaWVsZHMuZm9yRWFjaCgoZmllbGQ6IElGbG93RmllbGQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgbWFueXdoby5jb2xsYWJvcmF0aW9uLnB1c2godGhpcy5Db21wb25lbnRJZCx7XCJtZXNzYWdlXCI6IHtcImFjdGlvblwiOlwiUkVGUkVTSF9GSUVMRFwiLFwiZmllbGROYW1lXCI6IGZpZWxkLmRldmVsb3Blck5hbWUgfX0sdGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy99KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL21hbnl3aG8uY29tcG9uZW50LmhhbmRsZUV2ZW50KHRoaXMsbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgdGhpcy5mbG93S2V5KSx0aGlzLkZsb3dLZXksIHRoaXMuZXZlbnRIYW5kbGVkKTtcclxuICAgICAgICAgICAgICAgIC8vbWFueXdoby5lbmdpbmUuc3luYyh0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmV2ZW50SGFuZGxlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJwaW5nXCIpO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS51cGRhdGVWYWx1ZXMgPSBmdW5jdGlvbiAodmFsdWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdXBkYXRlRmllbGRzLCBfaSwgX2EsIGZpZWxkO1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUuc2F2aW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVGaWVsZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlcy5jb25zdHJ1Y3Rvci5uYW1lID09PSBGbG93RmllbGRfMS5GbG93RmllbGQubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRmllbGRzLnB1c2godmFsdWVzLmlGbG93RmllbGQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKF9pID0gMCwgX2EgPSB2YWx1ZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRmllbGRzLnB1c2goZmllbGQuaUZsb3dGaWVsZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNhbGxSZXF1ZXN0T2xkKHRoaXMudXJsLCAnUE9TVCcsIHVwZGF0ZUZpZWxkcyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2F3YWl0IG1hbnl3aG8uY29ubmVjdGlvbi5yZXF1ZXN0KHRoaXMsIG51bGwsIHRoaXMudXJsICwgJ1BPU1QnLCB0aGlzLlRlbmFudElkLCB0aGlzLlN0YXRlSWQsIG1hbnl3aG8uc3RhdGUuZ2V0QXV0aGVudGljYXRpb25Ub2tlbih0aGlzLkZsb3dLZXkpLCB1cGRhdGVGaWVsZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21hbnl3aG8uY29tcG9uZW50LmhhbmRsZUV2ZW50KHRoaXMsbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5Db21wb25lbnRJZCx0aGlzLkZsb3dLZXkpLHRoaXMuRmxvd0tleSxudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hd2FpdCBtYW55d2hvLmVuZ2luZS5zeW5jKHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYW55d2hvLmNvbGxhYm9yYXRpb24uaXNJbml0aWFsaXplZCh0aGlzLmZsb3dLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21hbnl3aG8uY29sbGFib3JhdGlvbi5zeW5jKHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVGaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLmNvbGxhYm9yYXRpb24ucHVzaChfdGhpcy5Db21wb25lbnRJZCwgeyBcIm1lc3NhZ2VcIjogeyBcImFjdGlvblwiOiBcIlJFRlJFU0hfRklFTERcIiwgXCJmaWVsZE5hbWVcIjogZmllbGQuZGV2ZWxvcGVyTmFtZSB9IH0sIF90aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLnJlYWR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuX3NlbmRDb2xsYWJvcmF0aW9uTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgaWYgKG1hbnl3aG8uY29sbGFib3JhdGlvbi5pc0luaXRpYWxpemVkKHRoaXMuZmxvd0tleSkpIHtcclxuICAgICAgICAgICAgLy9tYW55d2hvLmNvbGxhYm9yYXRpb24uc3luYyh0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICBtYW55d2hvLmNvbGxhYm9yYXRpb24ucHVzaCh0aGlzLkNvbXBvbmVudElkLCB7IFwibWVzc2FnZVwiOiBtZXNzYWdlIH0sIHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8vdHJpZ2dlcnMgdGhlIHNwZWNpZmllZCBvdXRjb21lLCBvcHRpb25hbGx5IHBhc3NlcyBhIGRhdGEgb2JqZWN0IFxyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLnRyaWdnZXJPdXRjb21lID0gZnVuY3Rpb24gKG91dGNvbWVOYW1lLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgb2M7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3Zpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vdXRjb21lc1tvdXRjb21lTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9jID0gdGhpcy5vdXRjb21lc1tvdXRjb21lTmFtZV0uaUZsb3dPdXRjb21lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvYykgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIG1hbnl3aG8uY29tcG9uZW50Lm9uT3V0Y29tZShvYywgZGF0YSwgdGhpcy5GbG93S2V5KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2coJ0NvdWxkIG5vdCBmaW5kIG91dGNvbWUgJyArIG91dGNvbWVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLy90cmlnZ2VycyB0aGUgc3BlY2lmaWVkIG91dGNvbWUsIG9wdGlvbmFsbHkgcGFzc2VzIGEgZGF0YSBvYmplY3QgXHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUubW92ZVRvID0gZnVuY3Rpb24gKGZsb3dFbGVtZW50SWQsIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBiYXNlVXJsLCBpbnZva2V1cmwsIGluZm8sIHJlcXVlc3QsIHJlc3A7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3Zpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VVcmwgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZva2V1cmwgPSBiYXNlVXJsICsgXCIvYXBpL3J1bi8xL3N0YXRlL1wiICsgdGhpcy5zdGF0ZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvID0gbWFueXdoby5zdGF0ZS5nZXRTdGF0ZSh0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuY3VycmVudE1hcEVsZW1lbnRJZCA9IGluZm8uY3VycmVudE1hcEVsZW1lbnRJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5pbnZva2VUeXBlID0gJ05BVklHQVRFJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5tYXBFbGVtZW50SW52b2tlUmVxdWVzdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Lm1hcEVsZW1lbnRJbnZva2VSZXF1ZXN0LnNlbGVjdGVkT3V0Y29tZUlkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5wYWdlUmVxdWVzdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VDb21wb25lbnRJbnB1dFJlc3BvbnNlczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgcGFnZUNvbXBvbmVudElkOiB0aGlzLmNvbXBvbmVudElkLCBjb250ZW50VmFsdWU6IG51bGwsIG9iamVjdERhdGE6IG51bGwgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc2VsZWN0ZWRNYXBFbGVtZW50SWQgPSBmbG93RWxlbWVudElkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnN0YXRlSWQgPSB0aGlzLnN0YXRlSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc3RhdGVUb2tlbiA9IGluZm8udG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIG1hbnl3aG8uY29ubmVjdGlvbi5yZXF1ZXN0KHRoaXMsIG51bGwsIGludm9rZXVybCwgJ1BPU1QnLCB0aGlzLnRlbmFudElkLCB0aGlzLnN0YXRlSWQsIG1hbnl3aG8uc3RhdGUuZ2V0QXV0aGVudGljYXRpb25Ub2tlbih0aGlzLmZsb3dLZXkpLCByZXF1ZXN0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLm1vZGVsLnBhcnNlRW5naW5lUmVzcG9uc2UocmVzcCwgdGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbWFueXdoby5lbmdpbmUucmVuZGVyKHRoaXMuZmxvd0tleSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcclxuICAgICAgICB2YXIgdGltZSA9IFsoJzAnICsgbm93LmdldEhvdXJzKCkpLnNsaWNlKC0yKSwgKCcwJyArIG5vdy5nZXRNaW51dGVzKCkpLnNsaWNlKC0yKSxcclxuICAgICAgICAgICAgKCcwJyArIG5vdy5nZXRTZWNvbmRzKCkpLnNsaWNlKC0yKV07XHJcbiAgICAgICAgdmFyIHRpbWVzdGFtcCA9ICdbJyArIHRpbWUuam9pbignOicpICsgJ10gJztcclxuICAgICAgICBjb25zb2xlLmxvZyh0aW1lc3RhbXAgKyBtZXNzYWdlKTtcclxuICAgIH07XHJcbiAgICAvL2hlbHBlciB0byBzaWxlbnRseSBsYXVuY2ggYSBmbG93XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUubGF1bmNoRmxvd1NpbGVudCA9IGZ1bmN0aW9uICh0ZW5hbnQsIGZsb3dJZCwgcGxheWVyLCBvYmplY3REYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYmFzZVVybCwgdXJsLCBkYXRhO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBiYXNlVXJsID0gbWFueXdoby5zZXR0aW5ncy5nbG9iYWwoJ3BsYXRmb3JtLnVyaScpIHx8ICdodHRwczovL2Zsb3cubWFueXdoby5jb20nO1xyXG4gICAgICAgICAgICAgICAgdXJsID0gYmFzZVVybCArIFwiL2FwaS9ydW4vMS9zdGF0ZVwiO1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZGF0YS5pZCA9IGZsb3dJZDtcclxuICAgICAgICAgICAgICAgIGRhdGEuZGV2ZWxvcGVyTmFtZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBkYXRhLmlucHV0cyA9IG9iamVjdERhdGEgPyBvYmplY3REYXRhLmlGbG93T2JqZWN0RGF0YUFycmF5KCkgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgbWFueXdoby5jb25uZWN0aW9uLnJlcXVlc3QodGhpcywgXCJcIiwgdXJsLCAnUE9TVCcsIHRoaXMuVGVuYW50SWQsIFwiXCIsIG1hbnl3aG8uc3RhdGUuZ2V0QXV0aGVudGljYXRpb25Ub2tlbih0aGlzLkZsb3dLZXkpLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vaGVscGVyIHRvIG9wZW4gYSBzcGVjaWZpYyBmbG93IGluIGEgbmV3IHRhYlxyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmxhdW5jaEZsb3dUYWIgPSBmdW5jdGlvbiAodGVuYW50LCBmbG93SWQsIHBsYXllciwgb2JqZWN0RGF0YSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGJhc2VVcmwsIHVybDtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgYmFzZVVybCA9IG1hbnl3aG8uc2V0dGluZ3MuZ2xvYmFsKCdwbGF0Zm9ybS51cmknKSB8fCAnaHR0cHM6Ly9mbG93LmJvb21pLmNvbSc7XHJcbiAgICAgICAgICAgICAgICB1cmwgPSBiYXNlVXJsICsgJy8nICsgdGVuYW50ICsgJy9wbGF5LycgKyBwbGF5ZXIgKyAnP2Zsb3ctaWQ9JyArIGZsb3dJZDtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCwgJ19uZXcnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vdGhpcyB3aWxsIGdldCB0cmlnZ2VyZWQgYnkgdGhlIGNvbGxhYm9yYXRpb24gZW5naW5lXHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHN0YXRlLCBtZXNzYWdlLCBfYTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBtYW55d2hvLnN0YXRlLmdldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCB0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gc3RhdGUubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkTW9kZWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbnl3aG8uc3RhdGUuc2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIHsgXCJtZXNzYWdlXCI6IHt9IH0sIHRoaXMuZmxvd0tleSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG1lc3NhZ2UgJiYgbWVzc2FnZS5hY3Rpb24pKSByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBtZXNzYWdlLmFjdGlvbi50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdSRUZSRVNIX0ZJRUxEUyc6IHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUkVGUkVTSF9GSUVMRCc6IHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2FkQWxsVmFsdWVzKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9hZFZhbHVlKG1lc3NhZ2UuZmllbGROYW1lKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzIgLypyZXR1cm4qLywgbWVzc2FnZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vdGhpcyBpcyB1c2VkIGJ5IG90aGVyIGNvbXBvbmVudHMgd2hvIG1pZ2h0IHdhbnQgdG8gc2VuZCBpbiBhIGdlbmVyaWMgd2luZG93IG1lc3NhZ2VcclxuICAgIC8vbm90aGluZyB0byBkbyB3aXRoIGNvbGxhYm9yYXRpb25cclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5yZWNlaXZlTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbXNnLCBfYTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtZXNzYWdlLmRhdGEpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBtZXNzYWdlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbXNnLmFjdGlvbikgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gbXNnLmFjdGlvbi50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdPVVRDT01FJzogcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdSRUZSRVNIX0ZJRUxEUyc6IHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUkVGUkVTSF9GSUVMRCc6IHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy50cmlnZ2VyT3V0Y29tZShtc2cuZGF0YSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA5XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9hZEFsbFZhbHVlcygpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmxvYWRWYWx1ZShtc2cuZmllbGROYW1lKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5oYW5kbGVNZXNzYWdlKG1zZyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA5XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6IHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVNZXNzYWdlID0gZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZsb3dCYXNlQ29tcG9uZW50O1xyXG59KFJlYWN0LkNvbXBvbmVudCkpO1xyXG5leHBvcnRzLkZsb3dCYXNlQ29tcG9uZW50ID0gRmxvd0Jhc2VDb21wb25lbnQ7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRmxvd0F0dHJpYnV0ZSA9IHZvaWQgMDtcclxudmFyIEZsb3dBdHRyaWJ1dGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGbG93QXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5OYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLlZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0F0dHJpYnV0ZS5wcm90b3R5cGUsIFwibmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLk5hbWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dBdHRyaWJ1dGUucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVmFsdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIEZsb3dBdHRyaWJ1dGU7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmxvd0F0dHJpYnV0ZSA9IEZsb3dBdHRyaWJ1dGU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSkpO1xyXG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRmxvd0NvbXBvbmVudFwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9GbG93UGFnZVwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Nb2RhbERpYWxvZ1wiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9JY29uUGlja2VyXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Zsb3dCYXNlQ29tcG9uZW50XCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Zsb3dBdHRyaWJ1dGVcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRmxvd0Rpc3BsYXlDb2x1bW5cIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRmxvd0ZpZWxkXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Zsb3dPYmplY3REYXRhXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Zsb3dPYmplY3REYXRhQXJyYXlcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRmxvd09iamVjdERhdGFQcm9wZXJ0eVwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9GbG93T3V0Y29tZVwiKSwgZXhwb3J0cyk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRmxvd0Rpc3BsYXlDb2x1bW4gPSB2b2lkIDA7XHJcbnZhciBGbG93RmllbGRfMSA9IHJlcXVpcmUoXCIuL0Zsb3dGaWVsZFwiKTtcclxudmFyIEZsb3dEaXNwbGF5Q29sdW1uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmxvd0Rpc3BsYXlDb2x1bW4oY29sdW1uKSB7XHJcbiAgICAgICAgdGhpcy5Db2x1bW4gPSBjb2x1bW47XHJcbiAgICAgICAgdGhpcy5Db21wb25lbnRUeXBlID0gY29sdW1uLmNvbXBvbmVudFR5cGU7XHJcbiAgICAgICAgdGhpcy5Db250ZW50Rm9ybWF0ID0gY29sdW1uLmNvbnRlbnRGb3JtYXQ7XHJcbiAgICAgICAgdGhpcy5Db250ZW50VHlwZSA9IEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZVtjb2x1bW4uY29udGVudFR5cGVdO1xyXG4gICAgICAgIHRoaXMuRGV2ZWxvcGVyTmFtZSA9IGNvbHVtbi5kZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIHRoaXMuRGlzcGxheU9yZGVyID0gY29sdW1uLm9yZGVyO1xyXG4gICAgICAgIHRoaXMuTGFiZWwgPSBjb2x1bW4ubGFiZWw7XHJcbiAgICAgICAgdGhpcy5SZWFkT25seSA9ICFjb2x1bW4uaXNFZGl0YWJsZTtcclxuICAgICAgICB0aGlzLlR5cGVFbGVtZW10UHJvcGVydHlUb0Rpc3BsYXlJZCA9IGNvbHVtbi50eXBlRWxlbWVtdFByb3BlcnR5VG9EaXNwbGF5SWQ7XHJcbiAgICAgICAgdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQgPSBjb2x1bW4udHlwZUVsZW1lbnRQcm9wZXJ0eUlkO1xyXG4gICAgICAgIHRoaXMuVmlzaWJsZSA9IGNvbHVtbi5pc0Rpc3BsYXlWYWx1ZTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RGlzcGxheUNvbHVtbi5wcm90b3R5cGUsIFwiY29tcG9uZW50VHlwZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkNvbXBvbmVudFR5cGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dEaXNwbGF5Q29sdW1uLnByb3RvdHlwZSwgXCJjb250ZW50Rm9ybWF0XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ29udGVudEZvcm1hdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLCBcImNvbnRlbnRUeXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ29udGVudFR5cGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dEaXNwbGF5Q29sdW1uLnByb3RvdHlwZSwgXCJkZXZlbG9wZXJOYW1lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuRGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLCBcInZpc2libGVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5WaXNpYmxlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RGlzcGxheUNvbHVtbi5wcm90b3R5cGUsIFwicmVhZE9ubHlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5SZWFkT25seTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLCBcImxhYmVsXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuTGFiZWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dEaXNwbGF5Q29sdW1uLnByb3RvdHlwZSwgXCJkaXNwbGF5T3JkZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5EaXNwbGF5T3JkZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dEaXNwbGF5Q29sdW1uLnByb3RvdHlwZSwgXCJ0eXBlRWxlbWVudFByb3BlcnR5SWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dEaXNwbGF5Q29sdW1uLnByb3RvdHlwZSwgXCJ0eXBlRWxlbWVtdFByb3BlcnR5VG9EaXNwbGF5SWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5UeXBlRWxlbWVtdFByb3BlcnR5VG9EaXNwbGF5SWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLmlGbG93RGlzcGxheUNvbHVtbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5Db2x1bW47XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZsb3dEaXNwbGF5Q29sdW1uO1xyXG59KCkpO1xyXG5leHBvcnRzLkZsb3dEaXNwbGF5Q29sdW1uID0gRmxvd0Rpc3BsYXlDb2x1bW47XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRmxvd09iamVjdERhdGFQcm9wZXJ0eSA9IHZvaWQgMDtcclxudmFyIEZsb3dGaWVsZF8xID0gcmVxdWlyZShcIi4vRmxvd0ZpZWxkXCIpO1xyXG52YXIgRmxvd09iamVjdERhdGFfMSA9IHJlcXVpcmUoXCIuL0Zsb3dPYmplY3REYXRhXCIpO1xyXG52YXIgRmxvd09iamVjdERhdGFBcnJheV8xID0gcmVxdWlyZShcIi4vRmxvd09iamVjdERhdGFBcnJheVwiKTtcclxudmFyIEZsb3dPYmplY3REYXRhUHJvcGVydHkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGbG93T2JqZWN0RGF0YVByb3BlcnR5KHByb3BlcnR5KSB7XHJcbiAgICAgICAgdGhpcy5Db250ZW50Rm9ybWF0ID0gXCJcIjtcclxuICAgICAgICB0aGlzLkNvbnRlbnRUeXBlID0gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLnVua25vd247XHJcbiAgICAgICAgdGhpcy5EZXZlbG9wZXJOYW1lID0gXCJcIjtcclxuICAgICAgICB0aGlzLlR5cGVFbGVtZW50SWQgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkID0gXCJcIjtcclxuICAgICAgICBpZiAocHJvcGVydHkpIHtcclxuICAgICAgICAgICAgdGhpcy5EZXZlbG9wZXJOYW1lID0gcHJvcGVydHkuZGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICAgICAgdGhpcy5Db250ZW50VHlwZSA9IEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZVtwcm9wZXJ0eS5jb250ZW50VHlwZV07XHJcbiAgICAgICAgICAgIHRoaXMuQ29udGVudEZvcm1hdCA9IHByb3BlcnR5LmNvbnRlbnRGb3JtYXQgPyBwcm9wZXJ0eS5jb250ZW50Rm9ybWF0IDogXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5UeXBlRWxlbWVudElkID0gcHJvcGVydHkudHlwZUVsZW1lbnRJZCA/IHByb3BlcnR5LnR5cGVFbGVtZW50SWQgOiBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlJZCA9IHByb3BlcnR5LnR5cGVFbGVtZW50UHJvcGVydHlJZDtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLkNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50T2JqZWN0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuVmFsdWUgPSBwcm9wZXJ0eS5vYmplY3REYXRhID8gbmV3IEZsb3dPYmplY3REYXRhXzEuRmxvd09iamVjdERhdGEocHJvcGVydHkub2JqZWN0RGF0YSkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TGlzdDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gcHJvcGVydHkub2JqZWN0RGF0YSA/IG5ldyBGbG93T2JqZWN0RGF0YUFycmF5XzEuRmxvd09iamVjdERhdGFBcnJheShwcm9wZXJ0eS5vYmplY3REYXRhKSA6IG5ldyBGbG93T2JqZWN0RGF0YUFycmF5XzEuRmxvd09iamVjdERhdGFBcnJheShbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBwcm9wZXJ0eS5jb250ZW50VmFsdWUgPyBwcm9wZXJ0eS5jb250ZW50VmFsdWUgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgRmxvd09iamVjdERhdGFQcm9wZXJ0eS5uZXdJbnN0YW5jZSA9IGZ1bmN0aW9uIChkZXZlbG9wZXJOYW1lLCBjb250ZW50VHlwZSwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgY3YgPSBcIlwiO1xyXG4gICAgICAgIHZhciBvYmpkID0gW107XHJcbiAgICAgICAgc3dpdGNoIChjb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50T2JqZWN0OlxyXG4gICAgICAgICAgICAgICAgdmFyIG9kID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBvYmpkLnB1c2gob2QuaU9iamVjdERhdGEoKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudExpc3Q6XHJcbiAgICAgICAgICAgICAgICB2YXIgb2RhID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBvYmpkID0gb2RhLmlGbG93T2JqZWN0RGF0YUFycmF5KCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGN2ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnRGb3JtYXQ6IFwiXCIsXHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBGbG93RmllbGRfMS5lQ29udGVudFR5cGVbY29udGVudFR5cGVdLFxyXG4gICAgICAgICAgICBjb250ZW50VmFsdWU6IGN2LFxyXG4gICAgICAgICAgICBkZXZlbG9wZXJOYW1lOiBkZXZlbG9wZXJOYW1lLFxyXG4gICAgICAgICAgICBvYmplY3REYXRhOiBvYmpkLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudElkOiBcIlwiLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudFByb3BlcnR5SWQ6IFwiXCIsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gbmV3IHRoaXMoZGF0YSk7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhUHJvcGVydHkucHJvdG90eXBlLCBcImNvbnRlbnRGb3JtYXRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Db250ZW50Rm9ybWF0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoY29udGVudEZvcm1hdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRGb3JtYXQgPSBjb250ZW50Rm9ybWF0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YVByb3BlcnR5LnByb3RvdHlwZSwgXCJjb250ZW50VHlwZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkNvbnRlbnRUeXBlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgdGhpcy5Db250ZW50VHlwZSA9IGNvbnRlbnRUeXBlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YVByb3BlcnR5LnByb3RvdHlwZSwgXCJkZXZlbG9wZXJOYW1lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuRGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGRldmVsb3Blck5hbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5EZXZlbG9wZXJOYW1lID0gZGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd09iamVjdERhdGFQcm9wZXJ0eS5wcm90b3R5cGUsIFwidHlwZUVsZW1lbnRJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlR5cGVFbGVtZW50SWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0eXBlRWxlbWVudElkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRJZCA9IHR5cGVFbGVtZW50SWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhUHJvcGVydHkucHJvdG90eXBlLCBcInR5cGVFbGVtZW50UHJvcGVydHlJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHR5cGVFbGVtZW50UHJvcGVydHlJZCkge1xyXG4gICAgICAgICAgICB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlJZCA9IHR5cGVFbGVtZW50UHJvcGVydHlJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd09iamVjdERhdGFQcm9wZXJ0eS5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnROdW1iZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5WYWx1ZSA/IHRoaXMuVmFsdWUgOiAnMCcpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudEJvb2xlYW46XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdHJpbmcodGhpcy5WYWx1ZSkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5WYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5WYWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEZsb3dPYmplY3REYXRhUHJvcGVydHkucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB2YWx1ZTtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudExpc3Q6XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBGbG93T2JqZWN0RGF0YUFycmF5XzEuRmxvd09iamVjdERhdGFBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZS5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuYWRkSXRlbShpdGVtLmNsb25lKGl0ZW0uZGV2ZWxvcGVyTmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE9iamVjdDpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy52YWx1ZS5jbG9uZSh0aGlzLnZhbHVlLmRldmVsb3Blck5hbWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjbG9uZSA9IEZsb3dPYmplY3REYXRhUHJvcGVydHkubmV3SW5zdGFuY2UodGhpcy5kZXZlbG9wZXJOYW1lLCB0aGlzLmNvbnRlbnRUeXBlLCB2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIGNsb25lO1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhUHJvcGVydHkucHJvdG90eXBlLmlGbG93T2JqZWN0RGF0YVByb3BlcnR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjb250ZW50VmFsdWUgPSBcIlwiO1xyXG4gICAgICAgIHZhciBvYmplY3REYXRhID0gW107XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLkNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRPYmplY3Q6XHJcbiAgICAgICAgICAgICAgICB2YXIgb2QgPSB0aGlzLlZhbHVlO1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgaXQgaGFzIG5vIGRldmVsb3Blck5hbWUgdGhlbiBza2lwIGl0XHJcbiAgICAgICAgICAgICAgICBpZiAob2QgJiYgb2QuZGV2ZWxvcGVyTmFtZSAmJiBvZC5kZXZlbG9wZXJOYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhLnB1c2gob2QuaU9iamVjdERhdGEoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudExpc3Q6XHJcbiAgICAgICAgICAgICAgICB2YXIgb2RhID0gdGhpcy5WYWx1ZTtcclxuICAgICAgICAgICAgICAgIG9iamVjdERhdGEgPSBvZGEuaUZsb3dPYmplY3REYXRhQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY29udGVudFZhbHVlID0gdGhpcy5WYWx1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3V0cHV0ID0ge1xyXG4gICAgICAgICAgICBjb250ZW50Rm9ybWF0OiB0aGlzLkNvbnRlbnRGb3JtYXQsXHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBGbG93RmllbGRfMS5lQ29udGVudFR5cGVbdGhpcy5Db250ZW50VHlwZV0sXHJcbiAgICAgICAgICAgIGNvbnRlbnRWYWx1ZTogY29udGVudFZhbHVlLFxyXG4gICAgICAgICAgICBkZXZlbG9wZXJOYW1lOiB0aGlzLkRldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgIG9iamVjdERhdGE6IG9iamVjdERhdGEsXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50SWQ6IHRoaXMuVHlwZUVsZW1lbnRJZCxcclxuICAgICAgICAgICAgdHlwZUVsZW1lbnRQcm9wZXJ0eUlkOiB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlJZCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhUHJvcGVydHkucHJvdG90eXBlLCBcImRpc3BsYXlTdHJpbmdcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbGFiZWwgPSAnJztcclxuICAgICAgICAgICAgaWYgKHRoaXMuVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5Db250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRTdHJpbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE51bWJlcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSB0aGlzLlZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50Qm9vbGVhbjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuVmFsdWUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gJ1RydWUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSAnRmFsc2UnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnREYXRlVGltZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBEYXRlLnBhcnNlKHRoaXMuVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHQgPSBuZXcgRGF0ZShkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYWJlbC5sZW5ndGggPD0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHQudG9Mb2NhbGVEYXRlU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHQudG9Mb2NhbGVTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZVt0aGlzLkNvbnRlbnRUeXBlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbCA9ICdVbmRlZmluZWQnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBsYWJlbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gRmxvd09iamVjdERhdGFQcm9wZXJ0eTtcclxufSgpKTtcclxuZXhwb3J0cy5GbG93T2JqZWN0RGF0YVByb3BlcnR5ID0gRmxvd09iamVjdERhdGFQcm9wZXJ0eTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93T3V0Y29tZSA9IGV4cG9ydHMuZVBhZ2VBY3Rpb25UeXBlID0gZXhwb3J0cy5lUGFnZUFjdGlvbkJpbmRpbmdUeXBlID0gdm9pZCAwO1xyXG52YXIgRmxvd0F0dHJpYnV0ZV8xID0gcmVxdWlyZShcIi4vRmxvd0F0dHJpYnV0ZVwiKTtcclxudmFyIGVQYWdlQWN0aW9uQmluZGluZ1R5cGU7XHJcbihmdW5jdGlvbiAoZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZSkge1xyXG4gICAgZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZVtcIlNhdmVcIl0gPSBcIlNBVkVcIjtcclxuICAgIGVQYWdlQWN0aW9uQmluZGluZ1R5cGVbXCJQYXJ0aWFsU2F2ZVwiXSA9IFwiUEFSVElBTF9TQVZFXCI7XHJcbiAgICBlUGFnZUFjdGlvbkJpbmRpbmdUeXBlW1wiTm9TYXZlXCJdID0gXCJOT19TQVZFXCI7XHJcbn0pKGVQYWdlQWN0aW9uQmluZGluZ1R5cGUgPSBleHBvcnRzLmVQYWdlQWN0aW9uQmluZGluZ1R5cGUgfHwgKGV4cG9ydHMuZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZSA9IHt9KSk7XHJcbnZhciBlUGFnZUFjdGlvblR5cGU7XHJcbihmdW5jdGlvbiAoZVBhZ2VBY3Rpb25UeXBlKSB7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJOZXdcIl0gPSBcIk5FV1wiO1xyXG4gICAgZVBhZ2VBY3Rpb25UeXBlW1wiUXVlcnlcIl0gPSBcIlFVRVJZXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJJbnNlcnRcIl0gPSBcIklOU0VSVFwiO1xyXG4gICAgZVBhZ2VBY3Rpb25UeXBlW1wiVXBkYXRlXCJdID0gXCJVUERBVEVcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIlVwc2VydFwiXSA9IFwiVVBTRVJUXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJEZWxldGVcIl0gPSBcIkRFTEVURVwiO1xyXG4gICAgZVBhZ2VBY3Rpb25UeXBlW1wiUmVtb3ZlXCJdID0gXCJSRU1PVkVcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkFkZFwiXSA9IFwiQUREXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJFZGl0XCJdID0gXCJFRElUXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJOZXh0XCJdID0gXCJORVhUXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJCYWNrXCJdID0gXCJCQUNLXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJEb25lXCJdID0gXCJET05FXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJTYXZlXCJdID0gXCJTQVZFXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJDYW5jZWxcIl0gPSBcIkNBTkNFTFwiO1xyXG4gICAgZVBhZ2VBY3Rpb25UeXBlW1wiQXBwbHlcIl0gPSBcIkFQUExZXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJJbXBvcnRcIl0gPSBcIklNUE9SVFwiO1xyXG4gICAgZVBhZ2VBY3Rpb25UeXBlW1wiQ2xvc2VcIl0gPSBcIkNMT1NFXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJPcGVuXCJdID0gXCJPUEVOXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJTdWJtaXRcIl0gPSBcIlNVQk1JVFwiO1xyXG4gICAgZVBhZ2VBY3Rpb25UeXBlW1wiRXNjYWxhdGVcIl0gPSBcIkVTQ0FMQVRFXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJSZWplY3RcIl0gPSBcIlJFSkVDVFwiO1xyXG4gICAgZVBhZ2VBY3Rpb25UeXBlW1wiRGVsZWdhdGVcIl0gPSBcIkRFTEVHQVRFXCI7XHJcbn0pKGVQYWdlQWN0aW9uVHlwZSA9IGV4cG9ydHMuZVBhZ2VBY3Rpb25UeXBlIHx8IChleHBvcnRzLmVQYWdlQWN0aW9uVHlwZSA9IHt9KSk7XHJcbnZhciBGbG93T3V0Y29tZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZsb3dPdXRjb21lKG91dGNvbWUpIHtcclxuICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBvdXRjb21lLmRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgdGhpcy5JZCA9IG91dGNvbWUuaWQ7XHJcbiAgICAgICAgdGhpcy5Jc0J1bGtBY3Rpb24gPSBvdXRjb21lLmlzQnVsa0FjdGlvbjtcclxuICAgICAgICB0aGlzLklzT3V0ID0gb3V0Y29tZS5pc091dDtcclxuICAgICAgICB0aGlzLkxhYmVsID0gb3V0Y29tZS5sYWJlbDtcclxuICAgICAgICB0aGlzLk9yZGVyID0gb3V0Y29tZS5vcmRlcjtcclxuICAgICAgICB0aGlzLlBhZ2VBY3Rpb25CaW5kaW5nVHlwZSA9IG91dGNvbWUucGFnZUFjdGlvbkJpbmRpbmdUeXBlO1xyXG4gICAgICAgIHRoaXMuUGFnZUFjdGlvblR5cGUgPSBvdXRjb21lLnBhZ2VBY3Rpb25UeXBlO1xyXG4gICAgICAgIHRoaXMuUGFnZU9iamVjdEJpbmRpbmdJZCA9IG91dGNvbWUucGFnZU9iamVjdEJpbmRpbmdJZDtcclxuICAgICAgICB0aGlzLkF0dHJpYnV0ZXMgPSB7fTtcclxuICAgICAgICBpZiAob3V0Y29tZS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhvdXRjb21lLmF0dHJpYnV0ZXMpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuQXR0cmlidXRlc1trZXldID0gbmV3IEZsb3dBdHRyaWJ1dGVfMS5GbG93QXR0cmlidXRlKGtleSwgb3V0Y29tZS5hdHRyaWJ1dGVzW2tleV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuT3V0Y29tZSA9IG91dGNvbWU7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd091dGNvbWUucHJvdG90eXBlLCBcImRldmVsb3Blck5hbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5EZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwiaWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5JZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd091dGNvbWUucHJvdG90eXBlLCBcImlzQnVsa0FjdGlvblwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLklzQnVsa0FjdGlvbjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd091dGNvbWUucHJvdG90eXBlLCBcImlzT3V0XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuSXNPdXQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPdXRjb21lLnByb3RvdHlwZSwgXCJsYWJlbFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkxhYmVsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwib3JkZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5PcmRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd091dGNvbWUucHJvdG90eXBlLCBcInBhZ2VBY3Rpb25CaW5kaW5nVHlwZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlBhZ2VBY3Rpb25CaW5kaW5nVHlwZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd091dGNvbWUucHJvdG90eXBlLCBcInBhZ2VBY3Rpb25UeXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUGFnZUFjdGlvblR5cGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPdXRjb21lLnByb3RvdHlwZSwgXCJwYWdlT2JqZWN0QmluZGluZ0lkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUGFnZU9iamVjdEJpbmRpbmdJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd091dGNvbWUucHJvdG90eXBlLCBcImF0dHJpYnV0ZXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5BdHRyaWJ1dGVzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEZsb3dPdXRjb21lLnByb3RvdHlwZS5pRmxvd091dGNvbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuT3V0Y29tZTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd091dGNvbWU7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmxvd091dGNvbWUgPSBGbG93T3V0Y29tZTtcclxuIiwiZXhwb3J0ICogZnJvbSAnLi9TY3JvbGxLZWVwZXIvU2Nyb2xsS2VlcGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9UYWJLZWVwZXIvVGFiS2VlcGVyJztcclxuIiwiaW1wb3J0IHsgZUxvYWRpbmdTdGF0ZSwgRmxvd0NvbXBvbmVudCB9IGZyb20gJ2Zsb3ctY29tcG9uZW50LW1vZGVsJztcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcblxyXG4vL2RlY2xhcmUgY29uc3QgbWFueXdobzogSU1hbnl3aG87XHJcbmRlY2xhcmUgY29uc3QgbWFueXdobzogYW55O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Nyb2xsS2VlcGVyIGV4dGVuZHMgRmxvd0NvbXBvbmVudCB7XHJcbiAgICB2ZXJzaW9uOiBzdHJpbmc9XCIxLjAuMFwiO1xyXG4gICAgY29udGV4dDogYW55O1xyXG4gICAgcGFyZW50U2Nyb2xsZXI6IGFueTtcclxuICAgIGNvdW50OiBudW1iZXIgPSAwO1xyXG4gICAgc2Nyb2xsVG9wOiBudW1iZXIgPSAwO1xyXG4gICAgdFNjcm9sbFRvcDogbnVtYmVyID0gMDtcclxuICAgIHNjcm9sbExvY2s6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgIFxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5zY3JvbGxNb3ZlID0gdGhpcy5zY3JvbGxNb3ZlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5mbG93TW92ZWQgPSB0aGlzLmZsb3dNb3ZlZC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZmxvd1dpbGxNb3ZlID0gdGhpcy5mbG93V2lsbE1vdmUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnNldFNjcm9sbFBvcyA9IHRoaXMuc2V0U2Nyb2xsUG9zLmJpbmQodGhpcyk7XHJcbiAgICAgICAgZGVsZXRlIG1hbnl3aG9bXCJjb21wb25lbnQuc2Nyb2xsVG9Ub3BcIl07XHJcbiAgICAgICAgbWFueXdoby5jb21wb25lbnQuc2Nyb2xsVG9Ub3AgPSBmdW5jdGlvbigpe307XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBtYW55d2hvO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbmRQYXJlbnRTY3JvbGxlcihlbGVtZW50OiBhbnkpIDogRWxlbWVudCB7XHJcbiAgICAgICAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcclxuICAgICAgICBpZihzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwib3ZlcmZsb3cteFwiKT09PVwiYXV0b1wiIHx8IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJvdmVyZmxvdy15XCIpPT09XCJhdXRvXCIgfHwgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShcIm92ZXJmbG93XCIpPT09XCJhdXRvXCIgfHwgZWxlbWVudC5pZD09PVwibWFueXdob1wiIHx8IGVsZW1lbnQudGFnTmFtZT09PVwiYm9keVwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluZFBhcmVudFNjcm9sbGVyKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzY3JvbGxNb3ZlKGU6IGFueSkge1xyXG4gICAgICAgIGlmKHRoaXMuc2Nyb2xsTG9jayA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGxUb3AgPSB0aGlzLnBhcmVudFNjcm9sbGVyLnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5mbG93S2V5ICsgXCJfXCIgKyB0aGlzLmNvbXBvbmVudElkICsgXCJfeVwiLHRoaXMuc2Nyb2xsVG9wLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnNjcm9sbFRvcCk7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cod2luZG93LnBhZ2VZT2Zmc2V0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZmxvd1dpbGxNb3ZlKHhocjogYW55LCByZXF1ZXN0OiBhbnkpIHtcclxuICAgICAgICB0aGlzLnNjcm9sbExvY2s9dHJ1ZTtcclxuICAgICAgICB0aGlzLnRTY3JvbGxUb3AgPSB0aGlzLnBhcmVudFNjcm9sbGVyLnNjcm9sbFRvcDtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmZsb3dLZXkgKyBcIl9cIiArIHRoaXMuY29tcG9uZW50SWQgKyBcIl95XCIsdGhpcy50U2Nyb2xsVG9wLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGZsb3dNb3ZlZCh4aHI6IGFueSwgcmVxdWVzdDogYW55KSB7XHJcbiAgICAgICAgbGV0IG1lOiBhbnkgPSB0aGlzO1xyXG4gICAgICAgIGlmKHhoci5pbnZva2VUeXBlPT09XCJGT1JXQVJEXCIpIHtcclxuICAgICAgICAgICAgaWYodGhpcy5sb2FkaW5nU3RhdGUgIT09IGVMb2FkaW5nU3RhdGUucmVhZHkpe1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7bWUuZmxvd01vdmVkKHhociwgcmVxdWVzdCl9LDUwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbExvY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGxldCBwYXJlbnQ6IGFueSA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29udGFpbmVyKHRoaXMucGFyZW50SWQsdGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgIGlmKHBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0aGlzRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhcmVudC5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRTY3JvbGxlciA9IHRoaXMuZmluZFBhcmVudFNjcm9sbGVyKHRoaXNFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRvcCA9IHBhcnNlRmxvYXQobG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5mbG93S2V5ICsgXCJfXCIgK3RoaXMuY29tcG9uZW50SWQgKyBcIl95XCIpIHx8IFwiMFwiKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQodGhpcy5zZXRTY3JvbGxQb3MsMTAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICAvL3dpbGwgZ2V0IHRoaXMgZnJvbSBhIGNvbXBvbmVudCBhdHRyaWJ1dGVcclxuICAgICAgICBhd2FpdCBzdXBlci5jb21wb25lbnREaWRNb3VudCgpO1xyXG4gICAgICAgIGxldCBwYXJlbnQ6IGFueSA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29udGFpbmVyKHRoaXMucGFyZW50SWQsdGhpcy5mbG93S2V5KTtcclxuICAgICAgICBsZXQgdGhpc0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwYXJlbnQuaWQpO1xyXG4gICAgICAgIHRoaXMucGFyZW50U2Nyb2xsZXIgPSB0aGlzLmZpbmRQYXJlbnRTY3JvbGxlcih0aGlzRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5zY3JvbGxUb3AgPSBwYXJzZUZsb2F0KGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuY29tcG9uZW50SWQgKyBcIl95XCIpIHx8IFwiMFwiKTsgXHJcbiAgICAgICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYWRkRG9uZUxpc3RlbmVyKHRoaXMuZmxvd01vdmVkLCB0aGlzLmNvbXBvbmVudElkKTtcclxuICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5hZGRCZWZvcmVTZW5kTGlzdGVuZXIodGhpcy5mbG93V2lsbE1vdmUsIHRoaXMuY29tcG9uZW50SWQpO1xyXG4gICAgICAgIC8vdGhpcy5wYXJlbnRTY3JvbGxlci5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMuc2Nyb2xsTW92ZSwge3Bhc3NpdmU6IGZhbHNlfSk7XHJcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQodGhpcy5zZXRTY3JvbGxQb3MsMTAwKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICBhd2FpdCBzdXBlci5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xyXG4gICAgICAgIHRoaXMucGFyZW50U2Nyb2xsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLnNjcm9sbE1vdmUsIHtwYXNzaXZlOiB0cnVlfSk7XHJcbiAgICAgICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIucmVtb3ZlRG9uZUxpc3RlbmVyKHRoaXMuY29tcG9uZW50SWQpO1xyXG4gICAgICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLnJlbW92ZUJlZm9yZVNlbmRMaXN0ZW5lcih0aGlzLmNvbXBvbmVudElkKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTY3JvbGxQb3MocmVwZWF0OiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIGxldCBtZSA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRTY3JvbGxlci5zY3JvbGxUb3AgPSB0aGlzLnNjcm9sbFRvcDsgIFxyXG4gICAgICAgIGlmKHJlcGVhdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe21lLnNldFNjcm9sbFBvcyhmYWxzZSl9LDMwMCk7IFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7ICAgICAgIFxyXG4gICAgICAgIHJldHVybiAoPGRpdj48L2Rpdj4pXHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG5cclxufVxyXG5cclxubWFueXdoby5jb21wb25lbnQucmVnaXN0ZXIoJ1Njcm9sbEtlZXBlcicsIFNjcm9sbEtlZXBlcik7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRmxvd0NvbXBvbmVudCA9IHZvaWQgMDtcclxudmFyIEZsb3dCYXNlQ29tcG9uZW50XzEgPSByZXF1aXJlKFwiLi9GbG93QmFzZUNvbXBvbmVudFwiKTtcclxudmFyIEZsb3dDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRmxvd0NvbXBvbmVudCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEZsb3dDb21wb25lbnQocHJvcHMpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICAvLyB0aGUgRmxvd1BhZ2UgYXV0b21hdGljYWxseSBnZXRzIHZhbHVlc1xyXG4gICAgRmxvd0NvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBfc3VwZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50LmNhbGwodGhpcyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmRvbnRMb2FkQWxsVmFsdWVzKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd0NvbXBvbmVudDtcclxufShGbG93QmFzZUNvbXBvbmVudF8xLkZsb3dCYXNlQ29tcG9uZW50KSk7XHJcbmV4cG9ydHMuRmxvd0NvbXBvbmVudCA9IEZsb3dDb21wb25lbnQ7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmlmICghbWFueXdoby5ldmVudE1hbmFnZXIpIHtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyID0ge307XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzID0ge307XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzID0ge307XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzID0ge307XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5vdXRjb21lQmVpbmdUcmlnZ2VyZWQ7XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5oaXN0b3J5ID0gW107XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kID0gZnVuY3Rpb24gKHhociwgcmVxdWVzdCkge1xyXG4gICAgICAgIC8vKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZExpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcjogYW55KSA9PiBsaXN0ZW5lcih4aHIsIHJlcXVlc3QpKTtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gbWFueXdoby5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZExpc3RlbmVycykge1xyXG4gICAgICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzW2tleV0oeGhyLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIuZG9uZSA9IGZ1bmN0aW9uICh4aHIsIHJlcXVlc3QpIHtcclxuICAgICAgICAvLyhtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmRvbmVMaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXI6IGFueSkgPT4gbGlzdGVuZXIoeGhyLCByZXF1ZXN0KSk7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmRvbmVMaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgbWFueXdoby5ldmVudE1hbmFnZXIuZG9uZUxpc3RlbmVyc1trZXldKHhociwgcmVxdWVzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmZhaWwgPSBmdW5jdGlvbiAoeGhyLCByZXF1ZXN0KSB7XHJcbiAgICAgICAgLy8obWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IGxpc3RlbmVyKHhociwgcmVxdWVzdCkpO1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBtYW55d2hvLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmZhaWxMaXN0ZW5lcnNba2V5XSh4aHIsIHJlcXVlc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5hZGRCZWZvcmVTZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiAoaGFuZGxlciwgY29tcG9uZW50SWQpIHtcclxuICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzW2NvbXBvbmVudElkXSA9IGhhbmRsZXI7XHJcbiAgICB9O1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIucmVtb3ZlQmVmb3JlU2VuZExpc3RlbmVyID0gZnVuY3Rpb24gKGNvbXBvbmVudElkKSB7XHJcbiAgICAgICAgZGVsZXRlIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmRMaXN0ZW5lcnNbY29tcG9uZW50SWRdO1xyXG4gICAgfTtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmFkZERvbmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChoYW5kbGVyLCBjb21wb25lbnRJZCkge1xyXG4gICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmRvbmVMaXN0ZW5lcnNbY29tcG9uZW50SWRdID0gaGFuZGxlcjtcclxuICAgIH07XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5yZW1vdmVEb25lTGlzdGVuZXIgPSBmdW5jdGlvbiAoY29tcG9uZW50SWQpIHtcclxuICAgICAgICBkZWxldGUgbWFueXdoby5ldmVudE1hbmFnZXIuZG9uZUxpc3RlbmVyc1tjb21wb25lbnRJZF07XHJcbiAgICB9O1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIuYWRkRmFpbExpc3RlbmVyID0gZnVuY3Rpb24gKGhhbmRsZXIsIGNvbXBvbmVudElkKSB7XHJcbiAgICAgICAgbWFueXdoby5ldmVudE1hbmFnZXIuZmFpbExpc3RlbmVyc1tjb21wb25lbnRJZF0gPSBoYW5kbGVyO1xyXG4gICAgfTtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLnJlbW92ZUZhaWxMaXN0ZW5lciA9IGZ1bmN0aW9uIChjb21wb25lbnRJZCkge1xyXG4gICAgICAgIGRlbGV0ZSBtYW55d2hvLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzW2NvbXBvbmVudElkXTtcclxuICAgIH07XHJcbiAgICBtYW55d2hvLnNldHRpbmdzLmluaXRpYWxpemUobnVsbCwge1xyXG4gICAgICAgIGludm9rZToge1xyXG4gICAgICAgICAgICBiZWZvcmVTZW5kOiBtYW55d2hvLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kLFxyXG4gICAgICAgICAgICBkb25lOiBtYW55d2hvLmV2ZW50TWFuYWdlci5kb25lLFxyXG4gICAgICAgICAgICBmYWlsOiBtYW55d2hvLmV2ZW50TWFuYWdlci5mYWlsLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxyXG4iLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHJlc3VsdCA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmcgPyBuYXRpdmVNaW4ocmVzdWx0LCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gKlxuICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG4gIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICB9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGhyb3R0bGU7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93UGFnZSA9IHZvaWQgMDtcclxudmFyIEZsb3dCYXNlQ29tcG9uZW50XzEgPSByZXF1aXJlKFwiLi9GbG93QmFzZUNvbXBvbmVudFwiKTtcclxudmFyIEZsb3dQYWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEZsb3dQYWdlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRmxvd1BhZ2UocHJvcHMpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICAvLyB0aGUgRmxvd1BhZ2UgYXV0b21hdGljYWxseSBnZXRzIHZhbHVlc1xyXG4gICAgRmxvd1BhZ2UucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgX3N1cGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudC5jYWxsKHRoaXMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zaW5jZSB3ZSBhcmUgYSBwYWdlIHdlIG5vdyBsb2FkIGFsbCB2YWx1ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2FkQWxsVmFsdWVzKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zaW5jZSB3ZSBhcmUgYSBwYWdlIHdlIG5vdyBsb2FkIGFsbCB2YWx1ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd1BhZ2U7XHJcbn0oRmxvd0Jhc2VDb21wb25lbnRfMS5GbG93QmFzZUNvbXBvbmVudCkpO1xyXG5leHBvcnRzLkZsb3dQYWdlID0gRmxvd1BhZ2U7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTW9kYWxEaWFsb2cgPSBleHBvcnRzLkRyYWdFdmVudCA9IGV4cG9ydHMuZURyYWdFdmVudFR5cGUgPSBleHBvcnRzLm1vZGFsRGlhbG9nQnV0dG9uID0gdm9pZCAwO1xyXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XHJcbnJlcXVpcmUoXCIuL01vZGFsRGlhbG9nLmNzc1wiKTtcclxudmFyIG1vZGFsRGlhbG9nQnV0dG9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gbW9kYWxEaWFsb2dCdXR0b24obGFiZWwsIGhhbmRsZXIpIHtcclxuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcclxuICAgIH1cclxuICAgIHJldHVybiBtb2RhbERpYWxvZ0J1dHRvbjtcclxufSgpKTtcclxuZXhwb3J0cy5tb2RhbERpYWxvZ0J1dHRvbiA9IG1vZGFsRGlhbG9nQnV0dG9uO1xyXG52YXIgZURyYWdFdmVudFR5cGU7XHJcbihmdW5jdGlvbiAoZURyYWdFdmVudFR5cGUpIHtcclxuICAgIGVEcmFnRXZlbnRUeXBlW2VEcmFnRXZlbnRUeXBlW1widW5rbm93blwiXSA9IDBdID0gXCJ1bmtub3duXCI7XHJcbiAgICBlRHJhZ0V2ZW50VHlwZVtlRHJhZ0V2ZW50VHlwZVtcImNhbnZhc1wiXSA9IDFdID0gXCJjYW52YXNcIjtcclxuICAgIGVEcmFnRXZlbnRUeXBlW2VEcmFnRXZlbnRUeXBlW1widGFibGVcIl0gPSAyXSA9IFwidGFibGVcIjtcclxuICAgIGVEcmFnRXZlbnRUeXBlW2VEcmFnRXZlbnRUeXBlW1wibGlua1wiXSA9IDNdID0gXCJsaW5rXCI7XHJcbiAgICBlRHJhZ0V2ZW50VHlwZVtlRHJhZ0V2ZW50VHlwZVtcImRpYWxvZ1wiXSA9IDRdID0gXCJkaWFsb2dcIjtcclxufSkoZURyYWdFdmVudFR5cGUgPSBleHBvcnRzLmVEcmFnRXZlbnRUeXBlIHx8IChleHBvcnRzLmVEcmFnRXZlbnRUeXBlID0ge30pKTtcclxudmFyIERyYWdFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERyYWdFdmVudCgpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSBlRHJhZ0V2ZW50VHlwZS51bmtub3duO1xyXG4gICAgICAgIHRoaXMuc291cmNlRWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1vdXNlWCA9IDA7XHJcbiAgICAgICAgdGhpcy5tb3VzZVkgPSAwO1xyXG4gICAgICAgIHRoaXMubW91c2VPZmZzZXRYID0gMDtcclxuICAgICAgICB0aGlzLm1vdXNlT2Zmc2V0WSA9IDA7XHJcbiAgICB9XHJcbiAgICBEcmFnRXZlbnQuc3RhcnQgPSBmdW5jdGlvbiAodHlwZSwgc291cmNlRWxlbWVudCwgbW91c2VYLCBtb3VzZVkpIHtcclxuICAgICAgICB2YXIgZXZ0ID0gbmV3IERyYWdFdmVudCgpO1xyXG4gICAgICAgIGV2dC50eXBlID0gdHlwZTtcclxuICAgICAgICBldnQuc291cmNlRWxlbWVudCA9IHNvdXJjZUVsZW1lbnQ7XHJcbiAgICAgICAgZXZ0LnRhcmdldEVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIGV2dC5tb3VzZVggPSBtb3VzZVg7XHJcbiAgICAgICAgZXZ0Lm1vdXNlWSA9IG1vdXNlWTtcclxuICAgICAgICBldnQubW91c2VPZmZzZXRYID0gbW91c2VYO1xyXG4gICAgICAgIGV2dC5tb3VzZU9mZnNldFkgPSBtb3VzZVk7XHJcbiAgICAgICAgcmV0dXJuIGV2dDtcclxuICAgIH07XHJcbiAgICBEcmFnRXZlbnQucHJvdG90eXBlLmRyYWcgPSBmdW5jdGlvbiAobW91c2VYLCBtb3VzZVkpIHtcclxuICAgICAgICB0aGlzLm1vdXNlWCA9IG1vdXNlWDtcclxuICAgICAgICB0aGlzLm1vdXNlWSA9IG1vdXNlWTtcclxuICAgIH07XHJcbiAgICBEcmFnRXZlbnQucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uICh0YXJnZXQsIG1vdXNlWCwgbW91c2VZKSB7XHJcbiAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50ID0gdGFyZ2V0O1xyXG4gICAgICAgIHRoaXMubW91c2VYID0gbW91c2VYO1xyXG4gICAgICAgIHRoaXMubW91c2VZID0gbW91c2VZO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IGVEcmFnRXZlbnRUeXBlLnVua25vd247XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERyYWdFdmVudDtcclxufSgpKTtcclxuZXhwb3J0cy5EcmFnRXZlbnQgPSBEcmFnRXZlbnQ7XHJcbi8vIERlY2xhcmF0aW9uIG9mIHRoZSBjb21wb25lbnQgYXMgUmVhY3QgQ2xhc3MgQ29tcG9uZW50XHJcbnZhciBNb2RhbERpYWxvZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhNb2RhbERpYWxvZywgX3N1cGVyKTtcclxuICAgIC8vIEluaXQgb2YgdGhlIGNvbXBvbmVudCBiZWZvcmUgaXQgaXMgbW91bnRlZC5cclxuICAgIGZ1bmN0aW9uIE1vZGFsRGlhbG9nKHByb3BzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZHJhZ0V2ZW50ID0gbmV3IERyYWdFdmVudCgpO1xyXG4gICAgICAgIF90aGlzLnRvcCA9IDA7XHJcbiAgICAgICAgX3RoaXMubGVmdCA9IDA7XHJcbiAgICAgICAgX3RoaXMuaGFuZGxlS2V5VXAgPSBfdGhpcy5oYW5kbGVLZXlVcC5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2sgPSBfdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2suYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMub25DbG9zZVJlcXVlc3QgPSBfdGhpcy5vbkNsb3NlUmVxdWVzdC5iaW5kKF90aGlzKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBNb2RhbERpYWxvZy5wcm90b3R5cGUuc3RvcEV2ZW50QnViYmxlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoZS5zdG9wUHJvcGFnYXRpb24pXHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XHJcbiAgICAgICAgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvLyBBZGQgbGlzdGVuZXJzIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC5cclxuICAgIE1vZGFsRGlhbG9nLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL25lZWQgdG8gY2VudGVyIHRoZSB3aW5kb3dcclxuICAgICAgICBpZiAodGhpcy5kaWFsb2cpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmVudFhDZW50ZXIgPSB0aGlzLmRpYWxvZy5vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggLyAyO1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50WUNlbnRlciA9IHRoaXMuZGlhbG9nLm9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgLyAyO1xyXG4gICAgICAgICAgICB2YXIgZGlhbG9nWE9mZnNldCA9IHRoaXMuZGlhbG9nLmNsaWVudFdpZHRoIC8gMjtcclxuICAgICAgICAgICAgdmFyIGRpYWxvZ1lPZmZzZXQgPSB0aGlzLmRpYWxvZy5jbGllbnRIZWlnaHQgLyAyO1xyXG4gICAgICAgICAgICB0aGlzLmxlZnQgPSBwYXJlbnRYQ2VudGVyIC0gZGlhbG9nWE9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy50b3AgPSBwYXJlbnRZQ2VudGVyIC0gZGlhbG9nWU9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmRpYWxvZy5jbGFzc0xpc3QuYWRkKCdzaG93bicpO1xyXG4gICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVLZXlVcCwgZmFsc2UpO1xyXG4gICAgICAgIC8vZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU91dHNpZGVDbGljaywgZmFsc2UpO1xyXG4gICAgfTtcclxuICAgIC8vIFJlbW92ZSBsaXN0ZW5lcnMgaW1tZWRpYXRlbHkgYmVmb3JlIGEgY29tcG9uZW50IGlzIHVubW91bnRlZCBhbmQgZGVzdHJveWVkLlxyXG4gICAgTW9kYWxEaWFsb2cucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVLZXlVcCwgZmFsc2UpO1xyXG4gICAgICAgIC8vZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU91dHNpZGVDbGljaywgZmFsc2UpO1xyXG4gICAgfTtcclxuICAgIE1vZGFsRGlhbG9nLnByb3RvdHlwZS5vbkNsb3NlUmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkNsb3NlUmVxdWVzdCkge1xyXG4gICAgICAgICAgICAvL2RvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2ssIGZhbHNlKTtcclxuICAgICAgICAgICAgLy93aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmhhbmRsZUtleVVwLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25DbG9zZVJlcXVlc3QoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gSGFuZGxlIHRoZSBrZXkgcHJlc3MgZXZlbnQuXHJcbiAgICBNb2RhbERpYWxvZy5wcm90b3R5cGUuaGFuZGxlS2V5VXAgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGtleXMgPSB7XHJcbiAgICAgICAgICAgIDI3OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vbkNsb3NlUmVxdWVzdCgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGtleXNbZS5rZXlDb2RlXSkge1xyXG4gICAgICAgICAgICBrZXlzW2Uua2V5Q29kZV0oKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gSGFuZGxlIHRoZSBtb3VzZSBjbGljayBvbiBicm93c2VyIHdpbmRvdy5cclxuICAgIE1vZGFsRGlhbG9nLnByb3RvdHlwZS5oYW5kbGVPdXRzaWRlQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5kaWFsb2cpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmRpYWxvZy5jb250YWlucyhlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25DbG9zZVJlcXVlc3QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBSZW5kZXIgdGhlIGNvbXBvbmVudCBwYXNzaW5nIG9uQ2xvc2VSZXF1ZXN0IGFuZCBjaGlsZHJlbiBhcyBwcm9wcy5cclxuICAgIE1vZGFsRGlhbG9nLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgc3R5bGUgPSB7fTtcclxuICAgICAgICBzdHlsZS5sZWZ0ID0gdGhpcy5sZWZ0O1xyXG4gICAgICAgIHN0eWxlLnRvcCA9IHRoaXMudG9wO1xyXG4gICAgICAgIHZhciBidXR0b25zID0gW107XHJcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoYnV0dG9uKSB7XHJcbiAgICAgICAgICAgIGJ1dHRvbnMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHsgY2xhc3NOYW1lOiBcIm1vZGFsLWRpYWxvZy1idXR0b24tYmFyLWJ1dHRvblwiLCB0aXRsZTogXCJDYW5jZWxcIiwgb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKSB7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IGJ1dHRvbi5oYW5kbGVyKCk7IH0gfSwgYnV0dG9uLmxhYmVsKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5wcm9wcy5idXR0b25zOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgYnV0dG9uID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBfbG9vcF8xKGJ1dHRvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJtb2RhbC1yZWRhY3Rpb25cIiwgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uIChlKSB7IF90aGlzLm9uTW91c2VNb3ZlKGUpOyB9LCBvbk1vdXNlVXA6IGZ1bmN0aW9uIChlKSB7IF90aGlzLm9uTW91c2VVcChlKTsgfSwgb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKSB7IF90aGlzLmhhbmRsZU91dHNpZGVDbGljayhlKTsgfSwgb25Db250ZXh0TWVudTogZnVuY3Rpb24gKGUpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyBlLnN0b3BQcm9wYWdhdGlvbigpOyBpZiAoX3RoaXMucHJvcHMub25Db250ZXh0TWVudSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25Db250ZXh0TWVudSgpO1xyXG4gICAgICAgICAgICB9IH0gfSxcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlOiBzdHlsZSwgY2xhc3NOYW1lOiBcIm1vZGFsLWNvbnRlbnRcIiwgcmVmOiBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gKF90aGlzLmRpYWxvZyA9IG5vZGUpOyB9IH0sXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcIm1vZGFsLWRpYWxvZ1wiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJtb2RhbC1kaWFsb2ctaGVhZGVyXCIsIG9uTW91c2VEb3duOiBmdW5jdGlvbiAoZSkgeyBfdGhpcy5vbk1vdXNlRG93bihlKTsgfSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHsgZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLCBmbGV4R3JvdzogMSB9IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJtb2RhbC1kaWFsb2ctaGVhZGVyLXRpdGxlXCIgfSwgdGhpcy5wcm9wcy50aXRsZSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHsgZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLCBtYXJnaW5MZWZ0OiAnYXV0bycsIGZsZXhHcm93OiAwIH0gfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIG1vZGFsLWRpYWxvZy1oZWFkZXItYnV0dG9uXCIsIHN0eWxlOiB7IGN1cnNvcjogJ3BvaW50ZXInLCBjb2xvcjogJyNmZWZlZmUnLCBtYXJnaW5SaWdodDogJzVweCcsIGZvbnRTaXplOiAnMTRwdCcgfSwgdGl0bGU6IFwiQ2xvc2VcIiwgb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKSB7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IF90aGlzLnByb3BzLm9uQ2xvc2UoJ2NhbmNlbCcpOyB9IH0pKSksXHJcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJtb2RhbC1kaWFsb2ctYm9keVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibW9kYWwtZGlhbG9nLWJvZHktY2xpZW50XCIgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbikpLFxyXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibW9kYWwtZGlhbG9nLWJ1dHRvbi1iYXJcIiB9LCBidXR0b25zKSkpKSk7XHJcbiAgICB9O1xyXG4gICAgTW9kYWxEaWFsb2cucHJvdG90eXBlLm1vdmVNZSA9IGZ1bmN0aW9uIChsZWZ0LCB0b3ApIHtcclxuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xyXG4gICAgICAgIHRoaXMudG9wID0gdG9wOyAvLyAtIHRoaXMuYm94LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9O1xyXG4gICAgTW9kYWxEaWFsb2cucHJvdG90eXBlLm9uTW91c2VEb3duID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAvL3RoaXMuc3RvcEV2ZW50QnViYmxlKGUpO1xyXG4gICAgICAgIC8vaW5jbHVkZSBjb21wb25lbnQgYm91bmRpbmcgcmVjdCB0byBhbGxvdyBmb3IgbW91c2Ugb2Zmc2V0IGludG8gY29tcG9uZW50XHJcbiAgICAgICAgdmFyIGNsaWVudFJlY3QgPSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB2YXIgbW91c2VPZmZzZXRZID0gZS5jbGllbnRZIC0gY2xpZW50UmVjdC50b3A7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJncmFiIGRpYWxvZ1wiKTtcclxuICAgICAgICB0aGlzLmRyYWdFdmVudCA9IERyYWdFdmVudC5zdGFydChlRHJhZ0V2ZW50VHlwZS5kaWFsb2csIHRoaXMsIGUuY2xpZW50WCAtIGNsaWVudFJlY3QubGVmdCwgbW91c2VPZmZzZXRZKTtcclxuICAgIH07XHJcbiAgICBNb2RhbERpYWxvZy5wcm90b3R5cGUub25Nb3VzZU1vdmUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIC8vdGhpcy5zdG9wRXZlbnRCdWJibGUoZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZHJhZ0V2ZW50LnR5cGUgPT09IGVEcmFnRXZlbnRUeXBlLmRpYWxvZykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm1vdmUgZGlhbG9nXCIpO1xyXG4gICAgICAgICAgICB0aGlzLm1vdmVNZShlLmNsaWVudFggLSB0aGlzLmRyYWdFdmVudC5tb3VzZU9mZnNldFgsIGUuY2xpZW50WSAtIHRoaXMuZHJhZ0V2ZW50Lm1vdXNlT2Zmc2V0WSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE1vZGFsRGlhbG9nLnByb3RvdHlwZS5vbk1vdXNlVXAgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIC8vdGhpcy5zdG9wRXZlbnRCdWJibGUoZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZHJhZ0V2ZW50LnR5cGUgPT09IGVEcmFnRXZlbnRUeXBlLmRpYWxvZykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImRyb3AgZGlhbG9nXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmRyYWdFdmVudC5lbmQobnVsbCwgZS5jbGllbnRYLCBlLmNsaWVudFkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gTW9kYWxEaWFsb2c7XHJcbn0oUmVhY3QuQ29tcG9uZW50KSk7XHJcbmV4cG9ydHMuTW9kYWxEaWFsb2cgPSBNb2RhbERpYWxvZztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xyXG5yZXF1aXJlKFwiLi9JY29uUGlja2VyLmNzc1wiKTtcclxuLy8gRGVjbGFyYXRpb24gb2YgdGhlIGNvbXBvbmVudCBhcyBSZWFjdCBDbGFzcyBDb21wb25lbnRcclxudmFyIEljb25QaWNrZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoSWNvblBpY2tlciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEljb25QaWNrZXIocHJvcHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5pY29ucyA9IHt9O1xyXG4gICAgICAgIF90aGlzLnNlbGVjdGVkSXRlbSA9IF90aGlzLnByb3BzLm9uQ2hhbmdlVmFsdWU7XHJcbiAgICAgICAgX3RoaXMub25jaGFuZ2UgPSBfdGhpcy5vbmNoYW5nZS5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5hZGRJY29uID0gX3RoaXMuYWRkSWNvbi5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5hZGRJY29ucyA9IF90aGlzLmFkZEljb25zLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmFkZEljb25zKCk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgSWNvblBpY2tlci5wcm90b3R5cGUub25jaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtID0gZS50YXJnZXQuaW5uZXJUZXh0O1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UodGhpcy5zZWxlY3RlZEl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9O1xyXG4gICAgSWNvblBpY2tlci5wcm90b3R5cGUuYWRkSWNvbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYXN0ZXJpc2tcIiwgXCJBc3Rlcmlza1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwbHVzXCIsIFwiUGx1c1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJtaW51c1wiLCBcIk1pbnVzXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImV1clwiLCBcIkV1clwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJldXJvXCIsIFwiRXVyb1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjbG91ZFwiLCBcIkNsb3VkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImVudmVsb3BlXCIsIFwiRW52ZWxvcGVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicGVuY2lsXCIsIFwiUGVuY2lsXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImdsYXNzXCIsIFwiR2xhc3NcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibXVzaWNcIiwgXCJNdXNpY1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzZWFyY2hcIiwgXCJTZWFyY2hcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaGVhcnRcIiwgXCJIZWFydFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdGFyXCIsIFwiU3RhclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdGFyLWVtcHR5XCIsIFwiU3RhciBFbXB0eVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ1c2VyXCIsIFwiVXNlclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmaWxtXCIsIFwiRmlsbVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0aC1sYXJnZVwiLCBcIlRoIExhcmdlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRoXCIsIFwiVGhcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidGgtbGlzdFwiLCBcIlRoIExpc3RcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib2tcIiwgXCJPa1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJyZW1vdmVcIiwgXCJSZW1vdmVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiem9vbS1pblwiLCBcIlpvb20gSW5cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiem9vbS1vdXRcIiwgXCJab29tIE91dFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvZmZcIiwgXCJPZmZcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic2lnbmFsXCIsIFwiU2lnbmFsXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNvZ1wiLCBcIkNvZ1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0cmFzaFwiLCBcIlRyYXNoXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImhvbWVcIiwgXCJIb21lXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZpbGVcIiwgXCJGaWxlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRpbWVcIiwgXCJUaW1lXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInJvYWRcIiwgXCJSb2FkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImRvd25sb2FkLWFsdFwiLCBcIkRvd25sb2FkIEFsdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJkb3dubG9hZFwiLCBcIkRvd25sb2FkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInVwbG9hZFwiLCBcIlVwbG9hZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJpbmJveFwiLCBcIkluYm94XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBsYXktY2lyY2xlXCIsIFwiUGxheSBDaXJjbGVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVwZWF0XCIsIFwiUmVwZWF0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInJlZnJlc2hcIiwgXCJSZWZyZXNoXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImxpc3QtYWx0XCIsIFwiTGlzdCBBbHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibG9ja1wiLCBcIkxvY2tcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZmxhZ1wiLCBcIkZsYWdcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaGVhZHBob25lc1wiLCBcIkhlYWRwaG9uZXNcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidm9sdW1lLW9mZlwiLCBcIlZvbHVtZSBPZmZcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidm9sdW1lLWRvd25cIiwgXCJWb2x1bWUgRG93blwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ2b2x1bWUtdXBcIiwgXCJWb2x1bWUgVXBcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicXJjb2RlXCIsIFwiUXJjb2RlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJhcmNvZGVcIiwgXCJCYXJjb2RlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRhZ1wiLCBcIlRhZ1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0YWdzXCIsIFwiVGFnc1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJib29rXCIsIFwiQm9va1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJib29rbWFya1wiLCBcIkJvb2ttYXJrXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInByaW50XCIsIFwiUHJpbnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2FtZXJhXCIsIFwiQ2FtZXJhXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZvbnRcIiwgXCJGb250XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJvbGRcIiwgXCJCb2xkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIml0YWxpY1wiLCBcIkl0YWxpY1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0ZXh0LWhlaWdodFwiLCBcIlRleHQgSGVpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRleHQtd2lkdGhcIiwgXCJUZXh0IFdpZHRoXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImFsaWduLWxlZnRcIiwgXCJBbGlnbiBMZWZ0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImFsaWduLWNlbnRlclwiLCBcIkFsaWduIENlbnRlclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJhbGlnbi1yaWdodFwiLCBcIkFsaWduIFJpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImFsaWduLWp1c3RpZnlcIiwgXCJBbGlnbiBKdXN0aWZ5XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImxpc3RcIiwgXCJMaXN0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImluZGVudC1sZWZ0XCIsIFwiSW5kZW50IExlZnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaW5kZW50LXJpZ2h0XCIsIFwiSW5kZW50IFJpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZhY2V0aW1lLXZpZGVvXCIsIFwiRmFjZXRpbWUgVmlkZW9cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicGljdHVyZVwiLCBcIlBpY3R1cmVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibWFwLW1hcmtlclwiLCBcIk1hcCBNYXJrZXJcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYWRqdXN0XCIsIFwiQWRqdXN0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRpbnRcIiwgXCJUaW50XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImVkaXRcIiwgXCJFZGl0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNoYXJlXCIsIFwiU2hhcmVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2hlY2tcIiwgXCJDaGVja1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJtb3ZlXCIsIFwiTW92ZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdGVwLWJhY2t3YXJkXCIsIFwiU3RlcCBCYWNrd2FyZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmYXN0LWJhY2t3YXJkXCIsIFwiRmFzdCBCYWNrd2FyZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJiYWNrd2FyZFwiLCBcIkJhY2t3YXJkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBsYXlcIiwgXCJQbGF5XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBhdXNlXCIsIFwiUGF1c2VcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic3RvcFwiLCBcIlN0b3BcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZm9yd2FyZFwiLCBcIkZvcndhcmRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZmFzdC1mb3J3YXJkXCIsIFwiRmFzdCBGb3J3YXJkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInN0ZXAtZm9yd2FyZFwiLCBcIlN0ZXAgRm9yd2FyZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJlamVjdFwiLCBcIkVqZWN0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNoZXZyb24tbGVmdFwiLCBcIkNoZXZyb24gTGVmdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjaGV2cm9uLXJpZ2h0XCIsIFwiQ2hldnJvbiBSaWdodFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwbHVzLXNpZ25cIiwgXCJQbHVzIFNpZ25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibWludXMtc2lnblwiLCBcIk1pbnVzIFNpZ25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVtb3ZlLXNpZ25cIiwgXCJSZW1vdmUgU2lnblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvay1zaWduXCIsIFwiT2sgU2lnblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJxdWVzdGlvbi1zaWduXCIsIFwiUXVlc3Rpb24gU2lnblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJpbmZvLXNpZ25cIiwgXCJJbmZvIFNpZ25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic2NyZWVuc2hvdFwiLCBcIlNjcmVlbnNob3RcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVtb3ZlLWNpcmNsZVwiLCBcIlJlbW92ZSBDaXJjbGVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib2stY2lyY2xlXCIsIFwiT2sgQ2lyY2xlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJhbi1jaXJjbGVcIiwgXCJCYW4gQ2lyY2xlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImFycm93LWxlZnRcIiwgXCJBcnJvdyBMZWZ0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImFycm93LXJpZ2h0XCIsIFwiQXJyb3cgUmlnaHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYXJyb3ctdXBcIiwgXCJBcnJvdyBVcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJhcnJvdy1kb3duXCIsIFwiQXJyb3cgRG93blwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzaGFyZS1hbHRcIiwgXCJTaGFyZSBBbHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVzaXplLWZ1bGxcIiwgXCJSZXNpemUgRnVsbFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJyZXNpemUtc21hbGxcIiwgXCJSZXNpemUgU21hbGxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZXhjbGFtYXRpb24tc2lnblwiLCBcIkV4Y2xhbWF0aW9uIFNpZ25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZ2lmdFwiLCBcIkdpZnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibGVhZlwiLCBcIkxlYWZcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZmlyZVwiLCBcIkZpcmVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZXllLW9wZW5cIiwgXCJFeWUgT3BlblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJleWUtY2xvc2VcIiwgXCJFeWUgQ2xvc2VcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwid2FybmluZy1zaWduXCIsIFwiV2FybmluZyBTaWduXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBsYW5lXCIsIFwiUGxhbmVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2FsZW5kYXJcIiwgXCJDYWxlbmRhclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJyYW5kb21cIiwgXCJSYW5kb21cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY29tbWVudFwiLCBcIkNvbW1lbnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibWFnbmV0XCIsIFwiTWFnbmV0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNoZXZyb24tdXBcIiwgXCJDaGV2cm9uIFVwXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNoZXZyb24tZG93blwiLCBcIkNoZXZyb24gRG93blwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJyZXR3ZWV0XCIsIFwiUmV0d2VldFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzaG9wcGluZy1jYXJ0XCIsIFwiU2hvcHBpbmcgQ2FydFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmb2xkZXItY2xvc2VcIiwgXCJGb2xkZXIgQ2xvc2VcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZm9sZGVyLW9wZW5cIiwgXCJGb2xkZXIgT3BlblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJyZXNpemUtdmVydGljYWxcIiwgXCJSZXNpemUgVmVydGljYWxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVzaXplLWhvcml6b250YWxcIiwgXCJSZXNpemUgSG9yaXpvbnRhbFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJoZGRcIiwgXCJIZGRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYnVsbGhvcm5cIiwgXCJCdWxsaG9yblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJiZWxsXCIsIFwiQmVsbFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjZXJ0aWZpY2F0ZVwiLCBcIkNlcnRpZmljYXRlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRodW1icy11cFwiLCBcIlRodW1icyBVcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0aHVtYnMtZG93blwiLCBcIlRodW1icyBEb3duXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImhhbmQtcmlnaHRcIiwgXCJIYW5kIFJpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImhhbmQtbGVmdFwiLCBcIkhhbmQgTGVmdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJoYW5kLXVwXCIsIFwiSGFuZCBVcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJoYW5kLWRvd25cIiwgXCJIYW5kIERvd25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2lyY2xlLWFycm93LXJpZ2h0XCIsIFwiQ2lyY2xlIEFycm93IFJpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNpcmNsZS1hcnJvdy1sZWZ0XCIsIFwiQ2lyY2xlIEFycm93IExlZnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2lyY2xlLWFycm93LXVwXCIsIFwiQ2lyY2xlIEFycm93IFVwXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNpcmNsZS1hcnJvdy1kb3duXCIsIFwiQ2lyY2xlIEFycm93IERvd25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZ2xvYmVcIiwgXCJHbG9iZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ3cmVuY2hcIiwgXCJXcmVuY2hcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidGFza3NcIiwgXCJUYXNrc1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmaWx0ZXJcIiwgXCJGaWx0ZXJcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYnJpZWZjYXNlXCIsIFwiQnJpZWZjYXNlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZ1bGxzY3JlZW5cIiwgXCJGdWxsc2NyZWVuXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImRhc2hib2FyZFwiLCBcIkRhc2hib2FyZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwYXBlcmNsaXBcIiwgXCJQYXBlcmNsaXBcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaGVhcnQtZW1wdHlcIiwgXCJIZWFydCBFbXB0eVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJsaW5rXCIsIFwiTGlua1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwaG9uZVwiLCBcIlBob25lXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInB1c2hwaW5cIiwgXCJQdXNocGluXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInVzZFwiLCBcIlVzZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJnYnBcIiwgXCJHYnBcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic29ydFwiLCBcIlNvcnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic29ydC1ieS1hbHBoYWJldFwiLCBcIlNvcnQgQnkgQWxwaGFiZXRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic29ydC1ieS1hbHBoYWJldC1hbHRcIiwgXCJTb3J0IEJ5IEFscGhhYmV0IEFsdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzb3J0LWJ5LW9yZGVyXCIsIFwiU29ydCBCeSBPcmRlclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzb3J0LWJ5LW9yZGVyLWFsdFwiLCBcIlNvcnQgQnkgT3JkZXIgQWx0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNvcnQtYnktYXR0cmlidXRlc1wiLCBcIlNvcnQgQnkgQXR0cmlidXRlc1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzb3J0LWJ5LWF0dHJpYnV0ZXMtYWx0XCIsIFwiU29ydCBCeSBBdHRyaWJ1dGVzIEFsdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ1bmNoZWNrZWRcIiwgXCJVbmNoZWNrZWRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZXhwYW5kXCIsIFwiRXhwYW5kXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNvbGxhcHNlLWRvd25cIiwgXCJDb2xsYXBzZSBEb3duXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNvbGxhcHNlLXVwXCIsIFwiQ29sbGFwc2UgVXBcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibG9nLWluXCIsIFwiTG9nIEluXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZsYXNoXCIsIFwiRmxhc2hcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibG9nLW91dFwiLCBcIkxvZyBPdXRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibmV3LXdpbmRvd1wiLCBcIk5ldyBXaW5kb3dcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVjb3JkXCIsIFwiUmVjb3JkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNhdmVcIiwgXCJTYXZlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9wZW5cIiwgXCJPcGVuXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNhdmVkXCIsIFwiU2F2ZWRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaW1wb3J0XCIsIFwiSW1wb3J0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImV4cG9ydFwiLCBcIkV4cG9ydFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzZW5kXCIsIFwiU2VuZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmbG9wcHktZGlza1wiLCBcIkZsb3BweSBEaXNrXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZsb3BweS1zYXZlZFwiLCBcIkZsb3BweSBTYXZlZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmbG9wcHktcmVtb3ZlXCIsIFwiRmxvcHB5IFJlbW92ZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmbG9wcHktc2F2ZVwiLCBcIkZsb3BweSBTYXZlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZsb3BweS1vcGVuXCIsIFwiRmxvcHB5IE9wZW5cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY3JlZGl0LWNhcmRcIiwgXCJDcmVkaXQgQ2FyZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0cmFuc2ZlclwiLCBcIlRyYW5zZmVyXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImN1dGxlcnlcIiwgXCJDdXRsZXJ5XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImhlYWRlclwiLCBcIkhlYWRlclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjb21wcmVzc2VkXCIsIFwiQ29tcHJlc3NlZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJlYXJwaG9uZVwiLCBcIkVhcnBob25lXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBob25lLWFsdFwiLCBcIlBob25lIEFsdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0b3dlclwiLCBcIlRvd2VyXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInN0YXRzXCIsIFwiU3RhdHNcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic2QtdmlkZW9cIiwgXCJTZCBWaWRlb1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJoZC12aWRlb1wiLCBcIkhkIFZpZGVvXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInN1YnRpdGxlc1wiLCBcIlN1YnRpdGxlc1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzb3VuZC1zdGVyZW9cIiwgXCJTb3VuZCBTdGVyZW9cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic291bmQtZG9sYnlcIiwgXCJTb3VuZCBEb2xieVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzb3VuZC01LTFcIiwgXCJTb3VuZCA1IDFcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic291bmQtNi0xXCIsIFwiU291bmQgNiAxXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNvdW5kLTctMVwiLCBcIlNvdW5kIDcgMVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjb3B5cmlnaHQtbWFya1wiLCBcIkNvcHlyaWdodCBNYXJrXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInJlZ2lzdHJhdGlvbi1tYXJrXCIsIFwiUmVnaXN0cmF0aW9uIE1hcmtcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2xvdWQtZG93bmxvYWRcIiwgXCJDbG91ZCBEb3dubG9hZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjbG91ZC11cGxvYWRcIiwgXCJDbG91ZCBVcGxvYWRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidHJlZS1jb25pZmVyXCIsIFwiVHJlZSBDb25pZmVyXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRyZWUtZGVjaWR1b3VzXCIsIFwiVHJlZSBEZWNpZHVvdXNcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2RcIiwgXCJDZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzYXZlLWZpbGVcIiwgXCJTYXZlIEZpbGVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib3Blbi1maWxlXCIsIFwiT3BlbiBGaWxlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImxldmVsLXVwXCIsIFwiTGV2ZWwgVXBcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY29weVwiLCBcIkNvcHlcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicGFzdGVcIiwgXCJQYXN0ZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJhbGVydFwiLCBcIkFsZXJ0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImVxdWFsaXplclwiLCBcIkVxdWFsaXplclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJraW5nXCIsIFwiS2luZ1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJxdWVlblwiLCBcIlF1ZWVuXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBhd25cIiwgXCJQYXduXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJpc2hvcFwiLCBcIkJpc2hvcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJrbmlnaHRcIiwgXCJLbmlnaHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYmFieS1mb3JtdWxhXCIsIFwiQmFieSBGb3JtdWxhXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRlbnRcIiwgXCJUZW50XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJsYWNrYm9hcmRcIiwgXCJCbGFja2JvYXJkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJlZFwiLCBcIkJlZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJhcHBsZVwiLCBcIkFwcGxlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImVyYXNlXCIsIFwiRXJhc2VcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaG91cmdsYXNzXCIsIFwiSG91cmdsYXNzXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImxhbXBcIiwgXCJMYW1wXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImR1cGxpY2F0ZVwiLCBcIkR1cGxpY2F0ZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwaWdneS1iYW5rXCIsIFwiUGlnZ3kgQmFua1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzY2lzc29yc1wiLCBcIlNjaXNzb3JzXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJpdGNvaW5cIiwgXCJCaXRjb2luXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInllblwiLCBcIlllblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJydWJsZVwiLCBcIlJ1YmxlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNjYWxlXCIsIFwiU2NhbGVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaWNlLWxvbGx5XCIsIFwiSWNlIExvbGx5XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImljZS1sb2xseS10YXN0ZWRcIiwgXCJJY2UgTG9sbHkgVGFzdGVkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImVkdWNhdGlvblwiLCBcIkVkdWNhdGlvblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvcHRpb24taG9yaXpvbnRhbFwiLCBcIk9wdGlvbiBIb3Jpem9udGFsXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9wdGlvbi12ZXJ0aWNhbFwiLCBcIk9wdGlvbiBWZXJ0aWNhbFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJtZW51LWhhbWJ1cmdlclwiLCBcIk1lbnUgSGFtYnVyZ2VyXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm1vZGFsLXdpbmRvd1wiLCBcIk1vZGFsIFdpbmRvd1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvaWxcIiwgXCJPaWxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZ3JhaW5cIiwgXCJHcmFpblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdW5nbGFzc2VzXCIsIFwiU3VuZ2xhc3Nlc1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0ZXh0LXNpemVcIiwgXCJUZXh0IFNpemVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidGV4dC1jb2xvclwiLCBcIlRleHQgQ29sb3JcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidGV4dC1iYWNrZ3JvdW5kXCIsIFwiVGV4dCBCYWNrZ3JvdW5kXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9iamVjdC1hbGlnbi10b3BcIiwgXCJPYmplY3QgQWxpZ24gVG9wXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9iamVjdC1hbGlnbi1ib3R0b21cIiwgXCJPYmplY3QgQWxpZ24gQm90dG9tXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9iamVjdC1hbGlnbi1ob3Jpem9udGFsXCIsIFwiT2JqZWN0IEFsaWduIEhvcml6b250YWxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib2JqZWN0LWFsaWduLWxlZnRcIiwgXCJPYmplY3QgQWxpZ24gTGVmdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvYmplY3QtYWxpZ24tdmVydGljYWxcIiwgXCJPYmplY3QgQWxpZ24gVmVydGljYWxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib2JqZWN0LWFsaWduLXJpZ2h0XCIsIFwiT2JqZWN0IEFsaWduIFJpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRyaWFuZ2xlLXJpZ2h0XCIsIFwiVHJpYW5nbGUgUmlnaHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidHJpYW5nbGUtbGVmdFwiLCBcIlRyaWFuZ2xlIExlZnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidHJpYW5nbGUtYm90dG9tXCIsIFwiVHJpYW5nbGUgQm90dG9tXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRyaWFuZ2xlLXRvcFwiLCBcIlRyaWFuZ2xlIFRvcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjb25zb2xlXCIsIFwiQ29uc29sZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdXBlcnNjcmlwdFwiLCBcIlN1cGVyc2NyaXB0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInN1YnNjcmlwdFwiLCBcIlN1YnNjcmlwdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJtZW51LWxlZnRcIiwgXCJNZW51IExlZnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibWVudS1yaWdodFwiLCBcIk1lbnUgUmlnaHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibWVudS1kb3duXCIsIFwiTWVudSBEb3duXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm1lbnUtdXBcIiwgXCJNZW51IFVwXCIpO1xyXG4gICAgfTtcclxuICAgIEljb25QaWNrZXIucHJvdG90eXBlLmFkZEljb24gPSBmdW5jdGlvbiAobmFtZSwgbGFiZWwpIHtcclxuICAgICAgICB0aGlzLmljb25zW25hbWVdID0geyBcIm5hbWVcIjogbmFtZSwgXCJsYWJlbFwiOiBsYWJlbCB9O1xyXG4gICAgfTtcclxuICAgIEljb25QaWNrZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBvcHRpb25zID0gW107XHJcbiAgICAgICAgdmFyIGNscztcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXModGhpcy5pY29ucyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBvcHQgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIHZhciBjbHNfMSA9ICdnbHlwaGljb24gZ2x5cGhpY29uLScgKyB0aGlzLmljb25zW29wdF0ubmFtZSArICcgaWNvbi1waWNrZXItaWNvbic7XHJcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwgeyBvbkNsaWNrOiBmdW5jdGlvbiAoZSkgeyBfdGhpcy5vbmNoYW5nZShlKTsgfSB9LFxyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IGNsc18xIH0pLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5pY29uc1tvcHRdLm5hbWUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImJ0bi1ncm91cFwiIH0sXHJcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgeyB0eXBlOiBcImJ1dHRvblwiLCBjbGFzc05hbWU6IFwiYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZVwiLCBcImRhdGEtdG9nZ2xlXCI6IFwiZHJvcGRvd25cIiB9LFxyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6ICdnbHlwaGljb24gZ2x5cGhpY29uLScgKyB0aGlzLnNlbGVjdGVkSXRlbSB9KSxcclxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcImNhcmV0XCIgfSkpLFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwgeyBjbGFzc05hbWU6IFwiZHJvcGRvd24tbWVudVwiLCByb2xlOiBcIm1lbnVcIiB9LCBvcHRpb25zKSkpO1xyXG4gICAgICAgIC8vIDxzZWxlY3QgY2xhc3NOYW1lPVwibW9kYWwtZGlhbG9nLXNlbGVjdFwiIGRhdGEtc2hvdy1pY29uPVwidHJ1ZVwiIG9uQ2hhbmdlPXsoZSkgPT4ge3RoaXMuaXRlbVNlbGVjdGVkOyB9fT5cclxuICAgICAgICAvLyAgICB7b3B0aW9uc31cclxuICAgICAgICAvLyA8L3NlbGVjdD5cclxuICAgIH07XHJcbiAgICByZXR1cm4gSWNvblBpY2tlcjtcclxufShSZWFjdC5Db21wb25lbnQpKTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gSWNvblBpY2tlcjtcclxuIiwiaW1wb3J0IHsgZUxvYWRpbmdTdGF0ZSwgRmxvd0NvbXBvbmVudCB9IGZyb20gJ2Zsb3ctY29tcG9uZW50LW1vZGVsJztcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcblxyXG4vL2RlY2xhcmUgY29uc3QgbWFueXdobzogSU1hbnl3aG87XHJcbmRlY2xhcmUgY29uc3QgbWFueXdobzogYW55O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFiS2VlcGVyIGV4dGVuZHMgRmxvd0NvbXBvbmVudCB7XHJcbiAgICB2ZXJzaW9uOiBzdHJpbmc9XCIxLjAuMFwiO1xyXG4gICAgY29udGV4dDogYW55O1xyXG4gICAgdGFic0VsZW1lbnQ6IEVsZW1lbnQ7XHJcbiAgICBjb3VudDogbnVtYmVyID0gMDtcclxuICAgIHNlbGVjdGVkVGFiOiBzdHJpbmc7XHJcbiAgICAgICBcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuZmxvd01vdmVkID0gdGhpcy5mbG93TW92ZWQuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmZsb3dXaWxsTW92ZSA9IHRoaXMuZmxvd1dpbGxNb3ZlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZFRhYiA9IHRoaXMuc2V0U2VsZWN0ZWRUYWIuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmdldFNlbGVjdGVkVGFiID0gdGhpcy5nZXRTZWxlY3RlZFRhYi5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbmRQYXJlbnRUYWJzKGVsZW1lbnQ6IGFueSkgOiBFbGVtZW50IHtcclxuICAgICAgICBsZXQgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xyXG4gICAgICAgIGlmKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibXctZ3JvdXBcIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maW5kUGFyZW50VGFicyhlbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZmxvd1dpbGxNb3ZlKHhocjogYW55LCByZXF1ZXN0OiBhbnkpIHtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNlbGVjdGVkVGFiID0gdGhpcy5nZXRTZWxlY3RlZFRhYigpO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuZmxvd0tleSArIFwiX1wiICsgdGhpcy5jb21wb25lbnRJZCArIFwiX3RhYlwiLHRoaXMuc2VsZWN0ZWRUYWIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGZsb3dNb3ZlZCh4aHI6IGFueSwgcmVxdWVzdDogYW55KSB7XHJcbiAgICAgICAgbGV0IG1lOiBhbnkgPSB0aGlzO1xyXG4gICAgICAgIGlmKHhoci5pbnZva2VUeXBlPT09XCJGT1JXQVJEXCIpIHtcclxuICAgICAgICAgICAgaWYodGhpcy5sb2FkaW5nU3RhdGUgIT09IGVMb2FkaW5nU3RhdGUucmVhZHkpe1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7bWUuZmxvd01vdmVkKHhociwgcmVxdWVzdCl9LDUwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFyZW50OiBhbnkgPSBtYW55d2hvLm1vZGVsLmdldENvbnRhaW5lcih0aGlzLnBhcmVudElkLHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgICAgICAgICBpZihwYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGhpc0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwYXJlbnQuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFic0VsZW1lbnQgPSB0aGlzLmZpbmRQYXJlbnRUYWJzKHRoaXNFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGFiID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5mbG93S2V5ICsgXCJfXCIgKyB0aGlzLmNvbXBvbmVudElkICsgXCJfdGFiXCIpOyBcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCh0aGlzLnNldFNlbGVjdGVkVGFiLDEwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgLy93aWxsIGdldCB0aGlzIGZyb20gYSBjb21wb25lbnQgYXR0cmlidXRlXHJcbiAgICAgICAgYXdhaXQgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKTtcclxuICAgICAgICBsZXQgcGFyZW50OiBhbnkgPSBtYW55d2hvLm1vZGVsLmdldENvbnRhaW5lcih0aGlzLnBhcmVudElkLHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgbGV0IHRoaXNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFyZW50LmlkKTtcclxuICAgICAgICB0aGlzLnRhYnNFbGVtZW50ID0gdGhpcy5maW5kUGFyZW50VGFicyh0aGlzRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFRhYiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuZmxvd0tleSArIFwiX1wiICsgdGhpcy5jb21wb25lbnRJZCArIFwiX3RhYlwiKTsgXHJcbiAgICAgICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYWRkRG9uZUxpc3RlbmVyKHRoaXMuZmxvd01vdmVkLCB0aGlzLmNvbXBvbmVudElkKTtcclxuICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5hZGRCZWZvcmVTZW5kTGlzdGVuZXIodGhpcy5mbG93V2lsbE1vdmUsIHRoaXMuY29tcG9uZW50SWQpO1xyXG4gICAgICAgIC8vdGhpcy5wYXJlbnRTY3JvbGxlci5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMuc2Nyb2xsTW92ZSwge3Bhc3NpdmU6IGZhbHNlfSk7XHJcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQodGhpcy5zZXRTZWxlY3RlZFRhYiwxMDApO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgICAgIGF3YWl0IHN1cGVyLmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIucmVtb3ZlRG9uZUxpc3RlbmVyKHRoaXMuY29tcG9uZW50SWQpO1xyXG4gICAgICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLnJlbW92ZUJlZm9yZVNlbmRMaXN0ZW5lcih0aGlzLmNvbXBvbmVudElkKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTZWxlY3RlZFRhYigpIHtcclxuICAgICAgICBpZih0aGlzLnNlbGVjdGVkVGFiICYmIHRoaXMudGFic0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgZm9yKGxldCB0YWJFbGVtZW50c1BvcyA9IDAgOyB0YWJFbGVtZW50c1BvcyA8IHRoaXMudGFic0VsZW1lbnQuY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoIDsgdGFiRWxlbWVudHNQb3MrKykge1xyXG4gICAgICAgICAgICAgICAgLy8yIGNoaWxkcmVuLCAxIGlzIHRhYiBsYWJlbCBvdGhlciBpcyB0YWIgY29udGVudCAtIHdlIHdhbnQgdG8gbG9vayBhdCB0YWIgY29udGVudCBvbmVzXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLnRhYnNFbGVtZW50LmNoaWxkcmVuWzBdLmNoaWxkcmVuW3RhYkVsZW1lbnRzUG9zXS5jbGFzc0xpc3QuY29udGFpbnMoXCJuYXYtdGFic1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgdGFiUG9zID0gMCA7IHRhYlBvcyA8IHRoaXMudGFic0VsZW1lbnQuY2hpbGRyZW5bMF0uY2hpbGRyZW5bdGFiRWxlbWVudHNQb3NdLmNoaWxkcmVuLmxlbmd0aCA7IHRhYlBvcyArKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnRhYnNFbGVtZW50LmNoaWxkcmVuWzBdLmNoaWxkcmVuW3RhYkVsZW1lbnRzUG9zXS5jaGlsZHJlblt0YWJQb3NdLmNoaWxkcmVuWzBdLmlkID09PSB0aGlzLnNlbGVjdGVkVGFiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZXZPYmogPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldk9iai5pbml0RXZlbnQoJ2NsaWNrJywgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YWJzRWxlbWVudC5jaGlsZHJlblswXS5jaGlsZHJlblt0YWJFbGVtZW50c1Bvc10uY2hpbGRyZW5bdGFiUG9zXS5jaGlsZHJlblswXS5kaXNwYXRjaEV2ZW50KGV2T2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcy50YWJzRWxlbWVudC5jaGlsZHJlblswXS5jaGlsZHJlblt0YWJFbGVtZW50c1Bvc10uY2hpbGRyZW5bdGFiUG9zXS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGdldFNlbGVjdGVkVGFiKCkgOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCB0YWJJZDogc3RyaW5nO1xyXG4gICAgICAgIGlmKHRoaXMudGFic0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgZm9yKGxldCB0YWJFbGVtZW50c1BvcyA9IDAgOyB0YWJFbGVtZW50c1BvcyA8IHRoaXMudGFic0VsZW1lbnQuY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoIDsgdGFiRWxlbWVudHNQb3MrKykge1xyXG4gICAgICAgICAgICAgICAgLy8yIGNoaWxkcmVuLCAxIGlzIHRhYiBsYWJlbCBvdGhlciBpcyB0YWIgY29udGVudCAtIHdlIHdhbnQgdG8gbG9vayBhdCB0YWIgY29udGVudCBvbmVzXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLnRhYnNFbGVtZW50LmNoaWxkcmVuWzBdLmNoaWxkcmVuW3RhYkVsZW1lbnRzUG9zXS5jbGFzc0xpc3QuY29udGFpbnMoXCJuYXYtdGFic1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgdGFiUG9zID0gMCA7IHRhYlBvcyA8IHRoaXMudGFic0VsZW1lbnQuY2hpbGRyZW5bMF0uY2hpbGRyZW5bdGFiRWxlbWVudHNQb3NdLmNoaWxkcmVuLmxlbmd0aCA7IHRhYlBvcyArKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnRhYnNFbGVtZW50LmNoaWxkcmVuWzBdLmNoaWxkcmVuW3RhYkVsZW1lbnRzUG9zXS5jaGlsZHJlblt0YWJQb3NdLmNsYXNzTGlzdC5jb250YWlucyhcImFjdGl2ZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFic0VsZW1lbnQuY2hpbGRyZW5bMF0uY2hpbGRyZW5bdGFiRWxlbWVudHNQb3NdLmNoaWxkcmVuW3RhYlBvc10uY2hpbGRyZW5bMF0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRhYklkO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHsgICAgICAgXHJcbiAgICAgICAgcmV0dXJuICg8ZGl2PjwvZGl2PilcclxuICAgIH1cclxufVxyXG5cclxubWFueXdoby5jb21wb25lbnQucmVnaXN0ZXIoJ1RhYktlZXBlcicsIFRhYktlZXBlcik7Il0sInNvdXJjZVJvb3QiOiIifQ==